<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>;SQL Server 2014 Configuration File
[OPTIONS]



; Especifica un flujo de trabajo de instalación, como INSTALL, UNINSTALL o UPGRADE. Es un parámetro necesario. 

ACTION="Install"

; No se ha definido aún ayuda detallada para el argumento de la línea de comandos ROLE. 

ROLE="AllFeatures_WithDefaults"

; Use el parámetro /ENU para instalar la versión en inglés de SQL Server en el sistema operativo Windows traducido. 

ENU="False"

; Parámetro que controla el comportamiento de la interfaz de usuario. Los valores válidos son Normal para la interfaz de usuario completa, AutoAdvance para una interfaz de usuario simplificada y EnableUIOnServerCore para omitir la parte gráfica de la instalación de Server Core. 


; La instalación no mostrará ninguna interfaz de usuario. 

QUIET="False"

; El programa de instalación sólo mostrará el progreso, sin la interacción del usuario. 

QUIETSIMPLE="True"

; Especifique si el programa de instalación de SQL Server debe detectar e incluir actualizaciones del producto. Los valores válidos son True y False o 1 y 0. De forma predeterminada, el programa de instalación de SQL Server incluirá las actualizaciones que encuentre. 

UpdateEnabled="False"

; Especifique si se puede informar de los errores a Microsoft para mejorar las futuras versiones de SQL Server. Elija 1 o True para habilitar esta característica, o bien 0 o False para deshabilitarla. 

ERRORREPORTING="False"

; Si se proporciona este parámetro, el equipo usará Microsoft Update para comprobar las actualizaciones. 

USEMICROSOFTUPDATE="False"

; Especifica las características que se van a instalar, desinstalar o actualizar. La lista de las características de nivel superior incluye SQL, AS, RS, IS, MDS y Herramientas. La característica SQL instalará el motor de base de datos, la replicación, el texto completo y el servidor Data Quality Services (DQS). La característica Herramientas instalará las herramientas de administración, los componentes de Libros en pantalla, SQL Server Data Tools y el resto de los componentes compartidos. 

FEATURES=SQLENGINE,REPLICATION

; Especifique la ubicación en la que el programa de instalación de SQL Server obtendrá actualizaciones del producto. Los valores válidos son "MU" para buscar en Microsoft Update, una ruta de acceso de carpeta válida, una ruta de acceso relativa, como .\MisActualizaciones, o un recurso compartido UNC. De forma predeterminada, el programa de instalación de SQL Server buscará en Microsoft Update o en el servicio Windows Update mediante Windows Server Update Services. 

UpdateSource="MU"

; Muestra el uso de los parámetros de la línea de comandos 

HELP="False"

; Especifica que el registro de instalación detallado debe redireccionarse a la consola. 

INDICATEPROGRESS="False"

; Especifica que el programa de instalación debe realizar la instalación en WOW64. Este argumento de la línea de comandos no se admite en sistemas IA64 ni de 32 bits. 

X86="False"

; Especifique el directorio de instalación raíz de los componentes compartidos. Este directorio no cambia después de instalar los componentes compartidos. 

INSTALLSHAREDDIR="C:\Program Files\Microsoft SQL Server"

; Especifique una instancia predeterminada o con nombre. MSSQLSERVER y SQLExpress son las instancias predeterminadas de las ediciones que no son Express y de las Express, respectivamente. Se requiere este parámetro al instalar el motor de base de datos de SQL Server (SQL), Analysis Services (AS) o Reporting Services (RS). 

INSTANCENAME="PRUEBAFINAL22"

; Especifique si los datos de uso de las características de SQL Server se pueden recopilar y enviar a Microsoft. Elija 1 o True para habilitar esta característica, o bien 0 o False para deshabilitarla. 

SQMREPORTING="False"

; Especifique el identificador de instancia de las características de SQL Server que ha indicado. Las estructuras de directorios y del Registro, así como los nombres de los servicios SQL Server incorporarán el identificador de instancia de SQL Server. 

INSTANCEID="PRUEBAFINAL22"

; Especifique el directorio de instalación. 

INSTANCEDIR="C:\Program Files (x86)\Microsoft SQL Server"

; Nombre de cuenta del Agente 

AGTSVCACCOUNT="NT AUTHORITY\Servicio de red"

; Iniciar servicio automáticamente después de la instalación.  

AGTSVCSTARTUPTYPE="Disabled"

; Puerto de comunicación TCP del brick de CM 

COMMFABRICPORT="0"

; Cómo usará la matriz las redes privadas 

COMMFABRICNETWORKLEVEL="0"

; Cómo se protegerá la comunicación entre bricks 

COMMFABRICENCRYPTION="0"

; Puerto TCP usado por el brick de CM 

MATRIXCMBRICKCOMMPORT="0"

; Tipo de inicio para el servicio SQL Server. 

SQLSVCSTARTUPTYPE="Automatic"

; Nivel para habilitar la característica FILESTREAM en (0, 1, 2 o 3). 

FILESTREAMLEVEL="0"

; Establézcalo en "1" para habilitar RANU para SQL Server Express. 

ENABLERANU="True"

; Especifica una intercalación de Windows o SQL que se va a utilizar para el motor de base de datos. 

SQLCOLLATION="Modern_Spanish_CI_AS"

; Cuenta para el servicio de SQL Server: Dominio\Usuario o cuenta de sistema. 

SQLSVCACCOUNT="NT Service\MSSQL$PRUEBAFINAL22"

; Cuentas de Windows que se suministran como administradores del sistema de SQL Server. 


; Autenticación de Windows predeterminada. Use "SQL" para el modo mixto de autenticación de Windows. 


; Aprovisione el usuario actual como administrador del sistema del motor de base de datos para %SQL_PRODUCT_SHORT_NAME% Express. 

ADDCURRENTUSERASSQLADMIN="False"

; Especifique 0 para deshabilitar el protocolo TCP/IP, o 1 para habilitarlo. 

TCPENABLED="1"

; Especifique 0 para deshabilitar el protocolo Named Pipes, o 1 para habilitarlo. 

NPENABLED="0"

; Tipo de inicio para el servicio SQL Server Browser. 

BROWSERSVCSTARTUPTYPE="Disabled"</value>
  </data>
  <data name="txtCrear_procedimientos.Text" xml:space="preserve">
    <value>USE [master]

GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [BASE_PUNTO_VENTA].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ARITHABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  DISABLE_BROKER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECOVERY FULL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  MULTI_USER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DB_CHAINING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'BASE_PUNTO_VENTA', N'ON'
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUERY_STORE = OFF
GO
USE [BASE_PUNTO_VENTA]
GO
/****** Object:  Table [dbo].[Caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Caja](
	[Id_Caja] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](50) NULL,
	[Tema] [varchar](50) NULL,
	[Serial_PC] [varchar](50) NULL,
	[Impresora_Ticket] [varchar](max) NULL,
	[Impresora_A4] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Tipo] [varchar](50) NULL,
 CONSTRAINT [PK_Caja_1] PRIMARY KEY CLUSTERED 
(
	[Id_Caja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[clientes]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[clientes](
	[idclientev] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](max) NULL,
	[Direccion_para_factura] [varchar](max) NULL,
	[RFC] [varchar](max) NULL,
	[movil] [varchar](50) NULL,
	[Cliente] [varchar](50) NULL,
	[Proveedor] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
 CONSTRAINT [PK_clientes] PRIMARY KEY CLUSTERED 
(
	[idclientev] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[detalle_venta]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[detalle_venta](
	[iddetalle_venta] [int] IDENTITY(1,1) NOT NULL,
	[idventa] [int] NULL,
	[Id_producto] [int] NULL,
	[cantidad] [numeric](18, 2) NULL,
	[preciounitario] [numeric](18, 2) NULL,
	[Moneda] [varchar](50) NULL,
	[Total_a_pagar]  AS ([preciounitario]*[cantidad]),
	[Unidad_de_medida] [varchar](50) NULL,
	[Cantidad_mostrada] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Descripcion] [varchar](50) NULL,
	[Codigo] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Costo] [numeric](18, 2) NULL,
	[Ganancia]  AS ([cantidad]*[preciounitario]-[cantidad]*[Costo]),
 CONSTRAINT [PK_detalle_venta] PRIMARY KEY CLUSTERED 
(
	[iddetalle_venta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMPRESA]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMPRESA](
	[Id_empresa] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Empresa] [varchar](50) NULL,
	[Logo] [image] NULL,
	[Impuesto] [varchar](50) NULL,
	[Porcentaje_impuesto] [numeric](18, 0) NULL,
	[Moneda] [varchar](50) NULL,
	[Trabajas_con_impuestos] [varchar](50) NULL,
	[Modo_de_busqueda] [varchar](50) NULL,
	[Carpeta_para_copias_de_seguridad] [varchar](max) NULL,
	[Correo_para_envio_de_reportes] [varchar](50) NULL,
	[Ultima_fecha_de_copia_de_seguridad] [varchar](50) NULL,
	[Ultima_fecha_de_copia_date] [datetime] NULL,
	[Frecuencia_de_copias] [int] NULL,
	[Estado] [varchar](50) NULL,
	[Tipo_de_empresa] [varchar](50) NULL,
	[Pais] [varchar](max) NULL,
	[Redondeo_de_total] [varchar](50) NULL,
 CONSTRAINT [PK_EMPRESA] PRIMARY KEY CLUSTERED 
(
	[Id_empresa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Grupo_de_Productos]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Grupo_de_Productos](
	[Idline] [int] IDENTITY(1,1) NOT NULL,
	[Linea] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_linea] PRIMARY KEY CLUSTERED 
(
	[Idline] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Inicios_de_sesion_por_caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Inicios_de_sesion_por_caja](
	[Id_inicio_sesion] [int] IDENTITY(1,1) NOT NULL,
	[Id_serial_Pc] [varchar](max) NULL,
	[Id_usuario] [int] NULL,
 CONSTRAINT [PK_Inicios_de_sesion_por_caja] PRIMARY KEY CLUSTERED 
(
	[Id_inicio_sesion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[KARDEX]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KARDEX](
	[Id_kardex] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Motivo] [varchar](200) NULL,
	[Cantidad] [numeric](18, 0) NULL,
	[Id_producto] [int] NULL,
	[Id_usuario] [int] NULL,
	[Tipo] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[Total]  AS ([Cantidad]*[Costo_unt]),
	[Costo_unt] [numeric](18, 2) NULL,
	[Habia] [numeric](18, 2) NULL,
	[Hay] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_KARDEX] PRIMARY KEY CLUSTERED 
(
	[Id_kardex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Marcan]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Marcan](
	[Id_marca] [int] IDENTITY(1,1) NOT NULL,
	[S] [varchar](max) NULL,
	[F] [varchar](max) NULL,
	[E] [varchar](max) NULL,
	[FA] [varchar](max) NULL,
 CONSTRAINT [PK_Licencias] PRIMARY KEY CLUSTERED 
(
	[Id_marca] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MOVIMIENTOCAJACIERRE]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MOVIMIENTOCAJACIERRE](
	[idcierrecaja] [int] IDENTITY(1,1) NOT NULL,
	[fechainicio] [datetime] NULL,
	[fechafin] [datetime] NULL,
	[fechacierre] [datetime] NULL,
	[ingresos] [numeric](18, 2) NULL,
	[egresos] [numeric](18, 2) NULL,
	[Saldo_queda_en_caja] [numeric](18, 2) NULL,
	[Id_usuario] [int] NULL,
	[Total_calculado] [numeric](18, 2) NULL,
	[Total_real] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Diferencia] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_MOVIMIENTOCAJACIERRE] PRIMARY KEY CLUSTERED 
(
	[idcierrecaja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Producto1]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Producto1](
	[Id_Producto1] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](50) NULL,
	[Imagen] [varchar](50) NULL,
	[Id_grupo] [int] NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Precio_de_compra] [numeric](18, 2) NULL,
	[Fecha_de_vencimiento] [varchar](50) NULL,
	[Precio_de_venta] [numeric](18, 2) NULL,
	[Codigo] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Impuesto] [varchar](50) NULL,
	[Stock_minimo] [numeric](18, 2) NULL,
	[Precio_mayoreo] [numeric](18, 2) NULL,
	[Sub_total_pv]  AS ([Precio_de_venta]-([Precio_de_venta]*[Impuesto])/(100)),
	[Sub_total_pm]  AS ([Precio_mayoreo]-([Precio_mayoreo]*[Impuesto])/(100)),
	[A_partir_de] [numeric](18, 2) NULL,
 CONSTRAINT [PK_Producto1] PRIMARY KEY CLUSTERED 
(
	[Id_Producto1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Serializacion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Serializacion](
	[Id_serializacion] [int] IDENTITY(1,1) NOT NULL,
	[Serie] [varchar](50) NULL,
	[Cantidad_de_numeros] [varchar](50) NULL,
	[numerofin] [varchar](50) NULL,
	[Destino] [varchar](50) NULL,
	[tipodoc] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_Serializacion] PRIMARY KEY CLUSTERED 
(
	[Id_serializacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Ticket]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ticket](
	[Id_ticket] [int] IDENTITY(1,1) NOT NULL,
	[Id_Empresa] [int] NULL,
	[Identificador_fiscal] [varchar](max) NULL,
	[Direccion] [varchar](max) NULL,
	[Provincia_Departamento_Pais] [varchar](max) NULL,
	[Nombre_de_Moneda] [varchar](max) NULL,
	[Agradecimiento] [varchar](max) NULL,
	[pagina_Web_Facebook] [varchar](max) NULL,
	[Anuncio] [varchar](max) NULL,
	[Datos_fiscales_de_autorizacion] [varchar](max) NULL,
	[Por_defecto] [varchar](max) NULL,
 CONSTRAINT [PK_Ticket] PRIMARY KEY CLUSTERED 
(
	[Id_ticket] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[USUARIO2]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USUARIO2](
	[idUsuario] [int] IDENTITY(1,1) NOT NULL,
	[Nombres_y_Apellidos] [varchar](50) NULL,
	[Login] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[Icono] [image] NULL,
	[Nombre_de_icono] [varchar](max) NULL,
	[Correo] [varchar](max) NULL,
	[Rol] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
 CONSTRAINT [PK_USUARIO2] PRIMARY KEY CLUSTERED 
(
	[idUsuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ventas]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ventas](
	[idventa] [int] IDENTITY(1,1) NOT NULL,
	[idclientev] [int] NULL,
	[fecha_venta] [datetime] NULL,
	[Numero_de_doc] [varchar](50) NULL,
	[Monto_total] [numeric](18, 2) NULL,
	[Tipo_de_pago] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[IGV] [numeric](18, 1) NULL,
	[Comprobante] [varchar](50) NULL,
	[Id_usuario] [int] NULL,
	[Fecha_de_pago] [varchar](50) NULL,
	[ACCION] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
	[Pago_con] [numeric](18, 2) NULL,
	[Porcentaje_IGV] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
	[Referencia_tarjeta] [varchar](50) NULL,
	[Vuelto] [numeric](18, 2) NULL,
	[Efectivo] [numeric](18, 2) NULL,
	[Credito] [numeric](18, 2) NULL,
	[Tarjeta] [numeric](18, 2) NULL,
 CONSTRAINT [PK_ventas] PRIMARY KEY CLUSTERED 
(
	[idventa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[detalle_venta]  WITH CHECK ADD  CONSTRAINT [FK_detalle_venta_ventas] FOREIGN KEY([idventa])
REFERENCES [dbo].[ventas] ([idventa])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[detalle_venta] CHECK CONSTRAINT [FK_detalle_venta_ventas]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Caja]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Producto1] FOREIGN KEY([Id_producto])
REFERENCES [dbo].[Producto1] ([Id_Producto1])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Producto1]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_USUARIO2]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_clientes] FOREIGN KEY([idclientev])
REFERENCES [dbo].[clientes] ([idclientev])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_clientes]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_USUARIO2]
GO
/****** Object:  StoredProcedure [dbo].[buscar_cliente_Form]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscar_cliente_Form]

@letra VARCHAR(50)
AS BEGIN
SELECT       top 10 idclientev, Nombre, Direccion_para_factura as Direccion, RFC,  movil as Celular, Cliente, Proveedor, 
                    Saldo ,     Estado
FROM            dbo.clientes 
WHEre Nombre  LIKE  '%' + @letra+'%' and Cliente  ='SI' 
END
GO
/****** Object:  StoredProcedure [dbo].[Buscar_id_USUARIO]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Buscar_id_USUARIO]
@Nombres_y_Apellidos varchar(50)
as
select * from USUARIO2 
where Nombres_y_Apellidos =@Nombres_y_Apellidos
order by idUsuario desc


GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]
@idProducto int
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos.Linea as Categoria
,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
               cross join EMPRESA
			INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
						 
WHEre Producto1.Id_Producto1=@idProducto   order by KARDEX.Fecha Desc

END


GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Usuario ,Grupo_de_Productos .Linea as Categoria
,USUARIO2.idUsuario,@fecha as Fecha_consulta, @tipo as Tipo_consulta, EMPRESA.Nombre_Empresa ,EMPRESA.Logo 
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         INNER JOIN Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
						 CROSS JOIN EMPRESA 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
END


GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT     Producto1.Descripcion ,KARDEX.Tipo ,sum (KARDEX.Cantidad) Cantidad_Total ,@fecha as fecha, USUARIO2.Nombres_y_Apellidos,@tipo as Tipo_consultado
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         
				 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
group by Producto1.Descripcion,KARDEX.Tipo,USUARIO2.Nombres_y_Apellidos
ORDER BY sum (KARDEX.Cantidad) DESC
END


GO
/****** Object:  StoredProcedure [dbo].[buscar_producto_por_descripcion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_producto_por_descripcion]
@letra VARCHAR(50)
AS BEGIN
select top 10 Id_Producto1,Codigo , Grupo_de_Productos.Linea as Grupo,Descripcion ,Impuesto,Usa_inventarios ,Precio_de_compra AS P_Compra,Precio_mayoreo as P_mayoreo,Se_vende_a as Se_vende_por,Stock_minimo ,Fecha_de_vencimiento as F_vencimiento ,Stock,Precio_de_venta as P_venta 
,Grupo_de_Productos.Idline,A_partir_de 

FROM            dbo.Producto1 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
              
WHEre (dbo.Producto1.Descripcion)+Codigo +Grupo_de_Productos.Linea   LIKE  '%' + @letra+'%' ORDER BY DBO.Producto1.Descripcion  asc
 
END


GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]

@letrab VARCHAR(50)
AS 
SELECT       top 10 Id_Producto1, (Descripcion) AS Descripcion, Imagen, Grupo_de_Productos.Linea, Usa_inventarios, Stock, Precio_de_compra, Fecha_de_vencimiento, Precio_de_venta, Codigo, Se_vende_a, Impuesto, Stock_minimo, Precio_mayoreo, Sub_total_pv, 
                         Sub_total_pm
FROM            dbo.Producto1 
                      	INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
  
						 where  (Descripcion+Grupo_de_Productos.Linea  + Codigo) LIKE  '%' + @letrab+'%' and Usa_inventarios ='SI'



GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_oka]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[BUSCAR_PRODUCTOS_oka]

@letrab varchar(50)
as
begin
SELECT      TOP 8  Id_Producto1,(Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) AS Descripcion
, Usa_inventarios, Stock, Precio_de_compra, Precio_de_venta, Codigo, Se_vende_a
,Descripcion as Descripcion2, Codigo 
FROM            dbo.Producto1  cross join EMPRESA 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo   
              
where EMPRESA.Id_empresa = 1 and  (Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) LIKE  '%' + @letrab+'%' 
end  
GO
/****** Object:  StoredProcedure [dbo].[buscar_productos_vencidos]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[buscar_productos_vencidos]
@letra as varchar(50)
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock,empresa.Nombre_Empresa,empresa.Logo
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1
cross join EMPRESA 
where   Descripcion +codigo LIKE  '%' + @letra+'%' and Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))) asc


GO
/****** Object:  StoredProcedure [dbo].[buscar_usuario]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscar_usuario]
@letra varchar(50)
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2

where Nombres_y_Apellidos + Login      LIKE '%'+ @letra +'%' AND Estado='ACTIVO'


GO
/****** Object:  StoredProcedure [dbo].[buscar_USUARIO_por_correo]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_USUARIO_por_correo]
@correo VARCHAR(max)

AS 
SELECT        Password 
FROM            dbo.USUARIO2						 
WHEre Correo =@correo



GO
/****** Object:  StoredProcedure [dbo].[CERRAR_CAJA]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[CERRAR_CAJA]
@idcaja as integer,
@fechafin datetime,
@fechacierre datetime


		
as 
update MOVIMIENTOCAJACIERRE set 
Estado ='CAJA CERRADA'
where Id_caja =@idcaja AND Estado='CAJA APERTURADA'






GO
/****** Object:  StoredProcedure [dbo].[contar_clientes_activos]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_clientes_activos]
as
select COUNT (idclientev) from clientes 
where Cliente='SI' AND Estado= 'ACTIVO'
GO
/****** Object:  StoredProcedure [dbo].[contar_clientes_eliminados]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_clientes_eliminados]
as
select COUNT (idclientev) from clientes 
where Cliente='SI' AND Estado= 'ELIMINADO'
GO
/****** Object:  StoredProcedure [dbo].[contar_productos_vencidos]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[contar_productos_vencidos] 
as
select
COUNT (Id_Producto1) as Id
from Producto1
where Fecha_de_vencimiento&lt;&gt;'NO APLICA' and Fecha_de_vencimiento &lt;= CONVERT(date,GETDATE()) 
GO
/****** Object:  StoredProcedure [dbo].[editar_caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[editar_caja]
@idcaja integer,
@descripcion varchar(50)

 as       
 if EXISTS (SELECT Descripcion  FROM Caja  where (Descripcion  = @descripcion and Id_Caja  &lt;&gt;@idcaja ) )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else          		
 
update Caja set 
Descripcion  =@descripcion 

where Id_Caja    =@idcaja  
GO
/****** Object:  StoredProcedure [dbo].[editar_cliente]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_cliente]
@idcliente as integer,
@Nombre varchar(MAX),
           @Direccion_para_factura varchar(MAX),
            @RFC varchar(MAX),                      
            @movil varchar(50)
		
as 
if EXISTS (SELECT RFC  FROM clientes  where (RFC  = @RFC and idclientev  &lt;&gt;@idcliente and @RFC &lt;&gt; '0') )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else
update clientes set 
Nombre =@Nombre ,
          Direccion_para_factura = @Direccion_para_factura ,
           RFC = @RFC ,
          
          movil  = @movil 
where idclientev =@idcliente 

GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_CANTIDAD]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_CANTIDAD]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad=@cantidad,
Cantidad_mostrada =@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end
GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_restar]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_detalle_venta_restar]
@iddetalle_venta INT,
@cantidad as numeric(18, 2),
@Cantidad_mostrada  numeric(18, 2) ,
  @Id_producto varchar(50)   
    ,@Id_venta  as int

	as
	DECLARE @APARTIR_DE as numeric(18,2)
DECLARE @Precio_normal as numeric (18,2)
DECLARE @Precio_pormayor as numeric(18,2)
SET @APARTIR_DE= (SELECT A_partir_de  FROM Producto1  where Producto1.Id_Producto1 = @Id_producto )
SET @Precio_normal =(SELECT Precio_de_venta  FROM Producto1 where Producto1.Id_Producto1 =@Id_producto  )
SET @Precio_pormayor =(SELECT Precio_mayoreo  FROM Producto1 where Producto1.Id_Producto1 = @Id_producto )
PRINT @APARTIR_DE
PRINT @Precio_normal
PRINT @Precio_pormayor

BEGIN
if EXISTS(SELECT cantidad,Id_producto  from detalle_venta where detalle_venta.iddetalle_venta=@iddetalle_venta and cantidad &lt;=0 and detalle_venta.idventa = @Id_venta  )
delete from detalle_venta where detalle_venta.iddetalle_venta =@iddetalle_venta and detalle_venta.idventa =@Id_venta 
else
update detalle_venta set 
cantidad=cantidad-@cantidad 
, Cantidad_mostrada=Cantidad_mostrada-@Cantidad_mostrada
where detalle_venta.Id_producto = @Id_producto and detalle_venta.idventa=@Id_venta
END

begin
if EXISTS( SELECT Descripcion,cantidad,Id_producto ,idventa  FROM detalle_venta where cantidad &gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto AND  detalle_venta.idventa =@Id_venta AND detalle_venta.Codigo &lt;&gt;'0')
UPDATE detalle_venta set
preciounitario =@Precio_pormayor 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and @Precio_pormayor &gt;0 and @APARTIR_DE &gt;0
end

begin
if EXISTS(SELECT cantidad  FROM detalle_venta where cantidad &lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and detalle_venta.Codigo &lt;&gt;'0')
update detalle_venta set
preciounitario =@Precio_normal 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta 
end

begin
IF EXISTS(SELECT cantidad FROM detalle_venta WHERE detalle_venta .idventa =@Id_venta and detalle_venta.Codigo ='0')
update detalle_venta set 
Codigo = 0 
where detalle_venta.Codigo='0' and detalle_venta.idventa =@Id_venta 
end
GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_sumar]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_sumar]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad= cantidad+ @cantidad,
Cantidad_mostrada = Cantidad_mostrada+@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end
GO
/****** Object:  StoredProcedure [dbo].[editar_dinero_caja_inicial]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_dinero_caja_inicial]
@Id_caja as integer,
@saldo numeric(18,2)


as
update MOVIMIENTOCAJACIERRE  set  Saldo_queda_en_caja =@saldo
where Id_caja =@Id_caja AND Estado ='CAJA APERTURADA'



GO
/****** Object:  StoredProcedure [dbo].[editar_Empresa]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[editar_Empresa]
@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),
@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),

@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50)

as

update  EMPRESA set Nombre_Empresa=@Nombre_Empresa,Logo=@logo ,Impuesto=@Impuesto ,
Porcentaje_impuesto=@Porcentaje_impuesto,Moneda=@Moneda,Trabajas_con_impuestos=@Trabajas_con_impuestos
,Modo_de_busqueda=@Modo_de_busqueda ,Carpeta_para_copias_de_seguridad =@Carpeta_para_copias_de_seguridad ,Correo_para_envio_de_reportes =@Correo_para_envio_de_reportes 

GO
/****** Object:  StoredProcedure [dbo].[editar_FORMATO_TICKET]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_FORMATO_TICKET]
    	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto  varchar(max),
	   @Nombre_Empresa varchar(max),
	   @Logo image
    as
	begin
    update Ticket set  
	Identificador_fiscal=@Identificador_fiscal ,
          Direccion =@Direccion ,    
           Provincia_Departamento_Pais=@Provincia_Departamento_Pais ,
           Nombre_de_Moneda=@Nombre_de_Moneda ,
          Agradecimiento  =@Agradecimiento ,
          pagina_Web_Facebook = @pagina_Web_Facebook ,
         Anuncio =  @Anuncio,
		   Datos_fiscales_de_autorizacion=@Datos_fiscales_de_autorizacion,
		   Por_defecto=@Por_defecto
		   end 

		   begin
		    update EMPRESA  set  
			Nombre_Empresa=@Nombre_Empresa, 
			Logo=@Logo 
			end 
GO
/****** Object:  StoredProcedure [dbo].[editar_Grupo]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_Grupo]
@id int,
@Grupo varchar(50)

as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo and Idline&lt;&gt;@id  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
update  Grupo_de_Productos set Linea=@grupo
where Idline=@id




GO
/****** Object:  StoredProcedure [dbo].[editar_inicio_De_sesion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max),
 @id_usuario int
  as
update Inicios_de_sesion_por_caja set 
Id_usuario =@id_usuario 
where Id_serial_Pc=@Id_serial_Pc 
GO
/****** Object:  StoredProcedure [dbo].[EDITAR_marcan_a]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[EDITAR_marcan_a]

	@e varchar(max),
	@fa varchar(max),
	@f  varchar(max),
	@s varchar(max)
    as
	
    UPDATE Marcan SET E=@e, FA=@fa, F=@f 
	where S=@s 
GO
/****** Object:  StoredProcedure [dbo].[editar_Producto1]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_Producto1]
@Id_Producto1 int,
 @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
          @Id_grupo INT,
		  @Usa_inventarios varchar(50),
	  @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
		 	,@A_partir_de numeric(18,2)
as 

if EXISTS (SELECT Descripcion FROM Producto1  where (Descripcion = @Descripcion and Id_Producto1 &lt;&gt;@Id_Producto1 ) )

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)

else if EXISTS (SELECT Codigo  FROM Producto1  where (Codigo  = @Codigo  and Id_Producto1 &lt;&gt;@Id_Producto1 ))

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)

else if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion &lt;&gt; @Descripcion and Id_Producto1 =@Id_Producto1 ) OR (Codigo&lt;&gt;@Codigo and Id_Producto1 = @Id_Producto1))

update Producto1 set  

      Descripcion =@Descripcion ,
		  Imagen =  @Imagen ,			         
         
         Id_grupo = @Id_grupo 	,
		  Usa_inventarios =@Usa_inventarios ,
		  Stock = @Stock ,
           Precio_de_compra =@Precio_de_compra ,
        Fecha_de_vencimiento =   @Fecha_de_vencimiento ,
          Precio_de_venta = @Precio_de_venta ,
         Codigo =  @Codigo ,
         Se_vende_a =  @Se_vende_a ,
           Impuesto =@Impuesto,
           Stock_minimo =@Stock_minimo ,
         Precio_mayoreo =  @Precio_mayoreo 
		 	,A_partir_de=@A_partir_de 
where id_Producto1=@Id_Producto1




GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[editar_serializacion]
@serie VARCHAR(50)  ,
@Cantidad_de_numeros AS VARCHAR(50)    ,
@numerofin as varchar(50) ,
@Tipo as varchar(50), 
   @Id_serie as int
as 
update Serializacion set  Serie =@serie   ,Cantidad_de_numeros=@Cantidad_de_numeros ,numerofin=@numerofin   
         ,tipodoc =@Tipo 
where Id_serializacion=@Id_serie 



GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion_POR_DEFECTO]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_serializacion_POR_DEFECTO]


   @Id_serie as int
as 

BEGIN
update Serializacion set  Por_defecto  ='-' 
     END


	 BEGIN
	 update Serializacion set  Por_defecto  ='SI'
where Id_serializacion=@Id_serie 

END

GO
/****** Object:  StoredProcedure [dbo].[editar_usuario]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_usuario]
@idUsuario int,
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max)
as
if EXISTS (SELECT Login,idUsuario FROM USUARIO2 where (Login  = @login  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO') or (Nombres_y_Apellidos   = @nombres  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO'))
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )

ELSE

update USUARIO2 set Nombres_y_Apellidos=@nombres ,Password =@Password , Icono=@Icono ,Nombre_de_icono =@Nombre_de_icono
 ,Correo =@Correo , Rol=@rol , Login =@Login
 where idUsuario=@idUsuario 




GO
/****** Object:  StoredProcedure [dbo].[eliminar_caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Eliminada'
where Id_Caja    =@idcaja
GO
/****** Object:  StoredProcedure [dbo].[eliminar_cliente]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ELIMINADO'
where idclientev=@idcliente AND Estado='ACTIVO'
GO
/****** Object:  StoredProcedure [dbo].[eliminar_detalle_venta]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_detalle_venta]
@iddetalleventa as int 
as
delete detalle_venta where iddetalle_venta=@iddetalleventa
GO
/****** Object:  StoredProcedure [dbo].[eliminar_producto]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_producto]
@idproducto  int
as
delete from Producto1  where Id_Producto1 =@idproducto 



GO
/****** Object:  StoredProcedure [dbo].[eliminar_Producto1]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_Producto1]
@id  int
as
delete from Producto1  where Id_Producto1 =@id 


GO
/****** Object:  StoredProcedure [dbo].[eliminar_Serializacion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_Serializacion]
@id integer
as
if EXISTS (SELECT Destino FROM Serializacion  where Destino &lt;&gt;'OTROS' AND ID_SERIALIZACION=@id )
RAISERROR ('Este Comprobante no se Eliminara ya que generaria Error', 16,1)
else
delete from Serializacion   where Id_serializacion   =@id and Destino='OTROS'


GO
/****** Object:  StoredProcedure [dbo].[eliminar_usuario]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_usuario]
@idusuario int,
@login varchar(50)
as
if exists(select login from USUARIO2 where @login ='admin')
raiserror('El Usuario *Admin* es Inborrable, si se borraria Eliminarias el Acceso al Sistema de porvida, Accion Denegada', 16,1)
else
UPDATE  USUARIO2 SET Estado='ELIMINADO'
 WHERE idUsuario =@idusuario and Login &lt;&gt;'admin'




GO
/****** Object:  StoredProcedure [dbo].[eliminar_venta]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_venta]
@idventa as integer
as
delete from ventas where idventa=@idventa
GO
/****** Object:  StoredProcedure [dbo].[imprimir_inventarios_todos]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[imprimir_inventarios_todos]


AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 





GO
/****** Object:  StoredProcedure [dbo].[Insertar_caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_caja]

	
	@descripcion varchar(50),


	 @Tema varchar(50),
	  @Serial_PC varchar(50),
	   @Impresora_Ticket varchar(max),
	   @Impresora_A4 varchar(max),
	   @Tipo varchar(50)
	   
	  
    as
	BEGIN
if EXISTS (SELECT  Descripcion,Serial_PC      FROM Caja    where  Descripcion=@descripcion and Serial_PC =@Serial_PC   )
RAISERROR ('Ya Existe una Caja con ese Nombre ÃƒÂ³ puede ser que ya se haya creado una Caja para Esta Pc, Ingrese un nombre diferente e intente de Nuevo', 16,1)
else
BEGIN
declare @Estado as varchar(50)
set @Estado ='RECIEN CREADA'

    INSERT INTO Caja values 
	(@descripcion,@Tema ,@Serial_PC ,@Impresora_Ticket,@Impresora_A4,@Estado,@Tipo )

	end
	end


GO
/****** Object:  StoredProcedure [dbo].[insertar_cliente]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  procedure [dbo].[insertar_cliente]
@Nombre varchar(MAX),
           @Direccion_para_factura varchar(MAX),
            @RFC varchar(MAX),                      
            @movil varchar(50),               
            @Cliente varchar(50),
            @Proveedor varchar(50),
			@Estado as varchar(50)
		,@Saldo numeric(18,2)
as
		   BEGIN
if EXISTS (SELECT RFC  FROM clientes  where RFC  = @RFC and @RFC&lt;&gt;'0')
RAISERROR ('REGISTRO EXISTENTE', 16,1)
else
BEGIN
insert into clientes  values 
            (@Nombre
           ,@Direccion_para_factura
           ,@RFC
           ,@movil     
          
           ,@Cliente
           ,@Proveedor
		   ,@Estado,
		   @Saldo
            )
			end
			end

GO
/****** Object:  StoredProcedure [dbo].[insertar_DETALLE_cierre_de_caja]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_DETALLE_cierre_de_caja]
	@fechaini datetime,
	 @fechafin datetime,
	 @fechacierre datetime, 
	  @ingresos numeric(18,2), 
    @egresos numeric(18,2),
	@saldo numeric(18,2),
	@idusuario int,
	 @totalcaluclado numeric(18,2),
	  @totalreal numeric(18,2), 
	 
	 @estado as varchar(50),
	 @diferencia as numeric(18,2)	,
	 @id_caja as int   
  AS BEGIN

if EXISTS (SELECT Estado FROM MOVIMIENTOCAJACIERRE 
 where  MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA')
RAISERROR ('Ya Fue Iniciado el Turno de esta Caja', 16,1)
else
BEGIN
    INSERT INTO MOVIMIENTOCAJACIERRE values 
	(@fechaini ,
	 @fechafin ,
	 @fechacierre , 
	  @ingresos , 
    @egresos ,
	@saldo ,
	@idusuario ,
	 @totalcaluclado ,
	  @totalreal , 
	
	 @estado ,
	 @diferencia ,
	 @id_caja )


	 end
	 end




GO
/****** Object:  StoredProcedure [dbo].[insertar_detalle_venta]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_detalle_venta]

@idventa as integer,
@id_presentacionfraccionada as int,
@cantidad as numeric(18,2),
@preciounitario as numeric(18,2),
@moneda as varchar(50),

@unidades as varchar(50),
@cantidad_mostrada as numeric(18,2),
@Estado as varchar(50),
@Descripcion varchar(50),
@Codigo varchar(50),
@Stock varchar(50),
@Se_vende_a varchar(50),
@Usa_inventarios varchar(50),
@Costo numeric(18,2)
as
begin
if exists (select id_producto, idventa from detalle_venta
inner join Producto1 on Producto1.Id_Producto1=detalle_venta.id_producto
where Producto1.Id_Producto1=@id_presentacionfraccionada and idventa=@idventa)

update detalle_venta set
cantidad = cantidad+@cantidad,
cantidad_mostrada=cantidad_mostrada+@cantidad_mostrada
where id_producto=@id_presentacionfraccionada

else
begin
insert into detalle_venta

values(@idventa,@id_presentacionfraccionada,@cantidad,@preciounitario,@moneda,@unidades,@cantidad_mostrada,
@Estado,@Descripcion,@Codigo,@Stock,@Se_vende_a,@Usa_inventarios,@Costo)

end
end
GO
/****** Object:  StoredProcedure [dbo].[insertar_Empresa]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[insertar_Empresa]

@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),

@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),
@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50),
@Ultima_fecha_de_copia_de_seguridad varchar(50),

@Ultima_fecha_de_copia_date datetime,
@Frecuencia_de_copias int,
@Estado varchar(50),
@Tipo_de_empresa varchar(50),
@Pais varchar(max),
@Redondeo_de_total varchar(50)
as 
 BEGIN
if EXISTS (SELECT Nombre_Empresa   FROM EMPRESA   where Nombre_Empresa  = @Nombre_Empresa   )
RAISERROR ('YA EXISTE UNA EMPRESA CON ESE NOMBRE, Ingrese un nombre diferente', 16,1)
else
BEGIN
insert into EMPRESA  
values (@Nombre_Empresa,@logo,@Impuesto,@Porcentaje_impuesto,@Moneda ,@Trabajas_con_impuestos,@Modo_de_busqueda,
@Carpeta_para_copias_de_seguridad,@Correo_para_envio_de_reportes,@Ultima_fecha_de_copia_de_seguridad,
@Ultima_fecha_de_copia_date ,
@Frecuencia_de_copias ,
@Estado ,@Tipo_de_empresa,@Pais,@Redondeo_de_total)

END
END


GO
/****** Object:  StoredProcedure [dbo].[Insertar_FORMATO_TICKET]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_FORMATO_TICKET]

  
	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto as varchar(max)
	  
    as
	 DECLARE @Id_Empresa int  = (Select Id_empresa from EMPRESA )
    INSERT INTO Ticket values 

	(  
	@Id_Empresa ,
	  @Identificador_fiscal ,
           @Direccion,
         
           @Provincia_Departamento_Pais,
           @Nombre_de_Moneda ,
           @Agradecimiento ,
           @pagina_Web_Facebook ,
           @Anuncio,
	   @Datos_fiscales_de_autorizacion,
	   @Por_defecto )



GO
/****** Object:  StoredProcedure [dbo].[insertar_Grupo]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Grupo]
@Grupo varchar(50),
@Por_defecto varchar(50)
as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
insert into Grupo_de_Productos  values (@Grupo, @Por_defecto)



GO
/****** Object:  StoredProcedure [dbo].[insertar_inicio_De_sesion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max)

  as
  declare @id_usuario_nuevo as int
  set @id_usuario_nuevo = (SELECT idUsuario  FROM USUARIO2  )

insert into Inicios_de_sesion_por_caja

values (@Id_serial_Pc,@id_usuario_nuevo )

GO
/****** Object:  StoredProcedure [dbo].[Insertar_marcan]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_marcan]

	
	@s varchar(MAX),
	@f varchar(MAX),
	@e varchar(MAX),
	@fa varchar(MAX)
    as
	
    INSERT INTO Marcan values 
	(@s,@f,@e ,@fa)


GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
          @Id_grupo as int	,
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where Descripcion = @Descripcion and Codigo=@Codigo  )
RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE/CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'
		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
END
END


GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto_Importacion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto_Importacion]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
     
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		    declare    @Id_grupo as int	
			set @Id_grupo= (Select Idline  from Grupo_de_Productos where Grupo_de_Productos.Linea= 'General')
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
		
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion = @Descripcion and Codigo=@Codigo) or Descripcion ='' )
select top 0 *from Producto1
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'

		   

		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
		begin
		update Producto1 set Codigo=Id_Producto1 
		where Codigo = 'VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='Descripcion'
		end

END
END




GO
/****** Object:  StoredProcedure [dbo].[insertar_Serializacion]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Serializacion]

@Serie varchar (50),
@numeroinicio as varchar (50),
@numerofin as varchar (50),
@Destino as varchar(50),
@tipodoc varchar(50)
,@Por_defecto varchar(50)
as BEGIN
if EXISTS (SELECT tipodoc  FROM Serializacion  where  tipodoc= @tipodoc )
RAISERROR ('YA EXISTE ESTE COMPROBANTE INGRESE UNO NUEVO', 16,1)
else
BEGIN
insert into Serializacion  values (@Serie ,
@numeroinicio ,
@numerofin,@Destino ,@tipodoc ,@Por_defecto)

END
END


GO
/****** Object:  StoredProcedure [dbo].[insertar_usuario]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_usuario]
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max),
@Estado varchar(50)
as
if exists (select Login FROM USUARIO2 where Login=@Login and Estado='ACTIVO')
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )
ELSE

insert into USUARIO2 
values(@nombres,@Login,@Password,@Icono,@Nombre_de_icono,@Correo,@Rol,@Estado  )



GO
/****** Object:  StoredProcedure [dbo].[insertar_venta]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertar_venta]
@idcliente as integer,
@fecha_venta as datetime,

@nume_documento as varchar(50),
@montototal  as numeric(18,2),
@Tipo_de_pago as varchar(50),
@estado as varchar(50),
@IGV as numeric(18, 1),

@Comprobante as VARCHAR(50),
@id_usuario as int,
@Fecha_de_pago as varchar(50),
@ACCION VARCHAR(50),
@Saldo numeric(18,2),
@Pago_con numeric(18,2),
@Porcentaje_IGV numeric(18,2),
@Id_caja int,
@Referencia_tarjeta varchar(50)

as 
declare @vuelto numeric(18,2)
declare @Efectivo numeric(18,2)
declare @id_numero varchar(50)
declare @Credito numeric(18,2)
declare @Tarjeta numeric(18,2)
SET @vuelto =0
SET @Efectivo =0
SET @id_numero= (select max(idventa)+1 from ventas )
SET @Credito =0
SET @Tarjeta =0
insert into ventas 
values (@idcliente,@fecha_venta,@nume_documento ,@montototal ,@Tipo_de_pago,@estado ,@IGV 
,@Comprobante +' '+ @id_numero ,@id_usuario,@Fecha_de_pago,@ACCION ,@Saldo,@Pago_con,@Porcentaje_IGV,
@Id_caja,@Referencia_tarjeta,
@vuelto ,@Efectivo,@Credito,@Tarjeta )
GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_principal]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Mostrar_caja_principal]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='PRINCIPAL' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos  ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario 
where Caja.tipo='PRINCIPAL' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos

else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='PRINCIPAL' and USUARIO2.Login  ='admin'
GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_remota]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[Mostrar_caja_remota]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='REMOTA' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos  ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario
where Caja.tipo='REMOTA' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos

else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='REMOTA' and USUARIO2.Login  ='admin'
GO
/****** Object:  StoredProcedure [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc  [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]
@Serial as varchar(50)
as
select Id_Caja  ,Descripcion 
from Caja 
where Serial_PC =@Serial



GO
/****** Object:  StoredProcedure [dbo].[mostrar_cliente]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[mostrar_cliente]
as
SELECT       top 10 idclientev, Nombre, Direccion_para_factura as Direccion, RFC,  movil as Celular, Cliente, Proveedor, 
                    Saldo ,     Estado
FROM            dbo.clientes 
WHERE clientes.Cliente='SI' order by Nombre  asc 
GO
/****** Object:  StoredProcedure [dbo].[mostrar_descripcion_produco_sin_repetir]    Script Date: 03/07/2023 12:26:23 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_descripcion_produco_sin_repetir]

@buscar varchar(50)
as begin
select TOP 10 Descripcion  from Producto1  Where Descripcion  LIKE  '%' + @buscar +'%'
end


GO
/****** Object:  StoredProcedure [dbo].[mostrar_Empresa]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_Empresa]
as
select LOGO, Nombre_Empresa as Empresa ,(Impuesto + ' ('+  CONVERT(VARCHAR(50),Porcentaje_impuesto) + ')') Impuesto 
,Moneda  ,Id_empresa  
,Porcentaje_impuesto  ,Impuesto ,Modo_de_busqueda ,Trabajas_con_impuestos ,Trabajas_con_impuestos,
Correo_para_envio_de_reportes,
Carpeta_para_copias_de_seguridad, Redondeo_de_total  , Pais 
from Empresa
GO
/****** Object:  StoredProcedure [dbo].[Mostrar_formato_ticket]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Mostrar_formato_ticket]
as
select EMPRESA.Logo,Empresa.Nombre_Empresa ,Ticket.*  from Ticket 
INNER JOIN EMPRESA ON EMPRESA.Id_empresa=Ticket.Id_Empresa 

GO
/****** Object:  StoredProcedure [dbo].[mostrar_grupos]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_grupos]

@buscar varchar(50)
as begin
select Idline,Linea  as Grupo from Grupo_de_Productos  Where Linea  LIKE  '%' + @buscar +'%'
end


GO
/****** Object:  StoredProcedure [dbo].[mostrar_id_venta_po_Id_caja]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_id_venta_po_Id_caja]
@Id_caja int
as
select MAX(idventa)from ventas
where id_caja=@Id_caja
GO
/****** Object:  StoredProcedure [dbo].[mostrar_impresoras_por_caja]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_impresoras_por_caja]
@Serial as varchar(max)
as
select Impresora_Ticket 
from Caja 
where Serial_PC =@Serial
GO
/****** Object:  StoredProcedure [dbo].[mostrar_inicio_De_sesion]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[mostrar_inicio_De_sesion]
  @id_serial_pc as varchar(max)
  as
select Id_usuario  from Inicios_de_sesion_por_caja 
where Id_serial_Pc =@id_serial_pc 
GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_Inventarios_bajo_minimo]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[MOSTRAR_Inventarios_bajo_minimo]
AS
select  Codigo,Descripcion,Precio_de_compra AS [Precio_de_Compra],Grupo_de_Productos. linea as Categoria,
 Stock ,Stock_minimo as [Stock_Minimo],Grupo_de_Productos. linea,EMPRESA.Nombre_Empresa,EMPRESA.Logo  
 from Producto1 cross join EMPRESA
				inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
				where Stock &lt;= Stock_minimo 	and Usa_inventarios ='SI'


GO
/****** Object:  StoredProcedure [dbo].[mostrar_inventarios_todos]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_inventarios_todos]

@letra varchar(50)
AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
where Descripcion+Codigo   LIKE  '%' + @letra+'%' AND Producto1.Usa_inventarios ='SI'


GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]

@serial varchar(50)

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos     FROM MOVIMIENTOCAJACIERRE 
inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' 




GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]

@serial varchar(50),
@idusuario int

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos    FROM MOVIMIENTOCAJACIERRE inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' and MOVIMIENTOCAJACIERRE.Id_usuario =@idusuario and USUARIO2.Estado ='ACTIVO'




GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]

@idProducto int
AS
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Cantidad ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay  as Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos .linea as Categoria, KARDEX.Costo_unt , KARDEX.Total 
,Grupo_de_Productos .linea ,EMPRESA.Nombre_Empresa,EMPRESA.Logo ,Producto1.Stock,convert(numeric(18,2), Producto1.Stock * KARDEX.Costo_unt) as TotalInventario
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
             cross join EMPRESA
			 inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
			where    Producto1.Id_Producto1=@idProducto
			
			 order by KARDEX.Id_kardex  Desc 





GO
/****** Object:  StoredProcedure [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]
@LOGIN VARCHAR(50)
as 
select 
USUARIO2.Rol 
from USUARIO2 
where USUARIO2.LOGIN =@LOGIN and USUARIO2.Estado ='ACTIVO'



GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_agregados_a_venta]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_agregados_a_venta]
@idventa as int
as
select detalle_venta.Codigo,(detalle_venta.Descripcion) as Producto,
detalle_venta.Cantidad_mostrada as cant,
detalle_venta.preciounitario as P_Unit,
CONVERT(numeric(18,2), detalle_venta.Total_a_pagar) as Importe,
detalle_venta.Id_producto, detalle_venta.iddetalle_venta, ventas.Estado,
detalle_venta.Stock, detalle_venta.cantidad, ventas.idclientev,
detalle_venta.Stock, detalle_venta.Stock, Usa_inventarios,
Se_vende_a, detalle_venta.idventa
from detalle_venta inner join ventas on detalle_venta.idventa = ventas.idventa
where detalle_venta.idventa=@idventa and detalle_venta.cantidad &gt;0 order by
detalle_venta.iddetalle_venta desc
GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_vencidos]
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 





GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]

as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,(datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1)as [Dias a Vencer] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &gt; CONVERT(DATE,GETDATE ()) and (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) &lt;=30
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) asc


GO
/****** Object:  StoredProcedure [dbo].[mostrar_stock_de_detalle_de_ventas]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_stock_de_detalle_de_ventas]
@Id_producto int
as
select detalle_venta.Stock,detalle_venta.Descripcion from ventas 
inner join detalle_venta on detalle_venta.idventa=ventas.idventa
where ventas.Estado ='EN ESPERA' and detalle_venta.Id_producto=@Id_producto and detalle_venta.Usa_inventarios='SI'
GO
/****** Object:  StoredProcedure [dbo].[mostrar_ticket_impreso]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_ticket_impreso]
@Id_venta int,
@total_en_letras varchar(50)
as
declare @cantidad_de_productos int
set @cantidad_de_productos = (select SUM (cantidad ) from detalle_venta inner join ventas on ventas.idventa = detalle_venta.idventa 
where detalle_venta .idventa = @Id_venta  )

select detalle_venta.Descripcion as Producto , detalle_venta.Cantidad_mostrada as Cant,
detalle_venta.preciounitario as P_Unit , detalle_venta.Total_a_pagar as Importe,
EMPRESA.Nombre_Empresa as Empresa, EMPRESA.Logo, Ticket.*,ventas.fecha_venta as fecha,
(EMPRESA.Impuesto + '(' + convert(varchar(50),ventas.Porcentaje_IGV ) + '%):') as Impuesto
 ,((ventas.Monto_total*ventas.Porcentaje_IGV)/100) as Subtotal_Impuesto,ventas.Monto_total ,
 USUARIO2.Nombres_y_Apellidos as Usuario, ventas.Pago_con , ventas.Vuelto ,EMPRESA .Moneda  ,
 clientes.Nombre ,ventas.Tipo_de_pago , @cantidad_de_productos as Cantidad_de_productos,@total_en_letras
 as total_en_letras, ventas.Comprobante , ventas.Numero_de_doc
 from detalle_venta inner join ventas  on ventas.idventa = detalle_venta.idventa 
inner join USUARIO2 on USUARIO2.idUsuario = ventas.Id_usuario 
inner join clientes on clientes .idclientev= ventas.idclientev
cross join EMPRESA 
cross join Ticket

where detalle_venta.idventa= @Id_venta and ventas.Monto_total &gt;0 order by detalle_venta.iddetalle_venta desc  

GO
/****** Object:  StoredProcedure [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]
as

SELECT       dbo.Serializacion.Serie ,dbo.Serializacion.Cantidad_de_numeros , dbo.Serializacion.numerofin ,dbo.Serializacion.Id_serializacion ,(dbo.Serializacion.Serie  +' - '+ dbo.Serializacion.Cantidad_de_numeros + dbo.Serializacion.numerofin) as serie_completa,Serializacion.tipodoc  AS COMPROBANTE
,Por_defecto 
FROM            dbo.Serializacion where destino='VENTAS' OR destino='OTROS'
GO
/****** Object:  StoredProcedure [dbo].[mostrar_usuario]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_usuario]
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2 Where Estado='ACTIVO'




GO
/****** Object:  StoredProcedure [dbo].[restaurar_caja]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[restaurar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Restaurada'
where Id_Caja    =@idcaja
GO
/****** Object:  StoredProcedure [dbo].[restaurar_cliente]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[restaurar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ACTIVO'
where idclientev=@idcliente AND Estado='ELIMINADO' 
GO
/****** Object:  StoredProcedure [dbo].[validar_usuario]    Script Date: 03/07/2023 12:26:24 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[validar_usuario]

@password varchar(50),
@login varchar(50)
as
select * from USUARIO2
where  Password   = @password and Login=@Login and Estado ='ACTIVO'



GO
USE [master]
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  READ_WRITE 
GO</value>
  </data>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="timer3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>104, 17</value>
  </metadata>
  <metadata name="timer4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>191, 17</value>
  </metadata>
  <metadata name="timer5.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>278, 17</value>
  </metadata>
  <metadata name="timerCRARINI.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>365, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>