<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox3.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAABGdBTUEAALGeYUxB9wAAACBjSFJNAACH
        EAAAjBIAAP1NAACBPgAAWesAARIPAAA85gAAGc66ySIyAAABJmlDQ1BBZG9iZSBSR0IgKDE5OTgpAAAo
        z2NgYDJwdHFyZRJgYMjNKykKcndSiIiMUmA/z8DGwMwABonJxQWOAQE+IHZefl4qAwb4do2BEURf1gWZ
        xUAa4EouKCoB0n+A2CgltTiZgYHRAMjOLi8pAIozzgGyRZKywewNIHZRSJAzkH0EyOZLh7CvgNhJEPYT
        ELsI6Akg+wtIfTqYzcQBNgfClgGxS1IrQPYyOOcXVBZlpmeUKBhaWloqOKbkJ6UqBFcWl6TmFit45iXn
        FxXkFyWWpKYA1ULcBwaCEIWgENMAarTQZKAyAMUDhPU5EBy+jGJnEGIIkFxaVAZlMjIZE+YjzJgjwcDg
        v5SBgeUPQsykl4FhgQ4DA/9UhJiaIQODgD4Dw745AMDGT/0ZOjZcAAAACXBIWXMAACmtAAAprQE599cQ
        AAD+VElEQVR4Xuydd3wUVffG524Seu9ILyo1CSGEEnrvHRIgECC00LsISkd677333hULimJXbK/lZ3v1
        tfeuKHB+zzl37u5kGRCVJpk/vp/Zna1JYJ7nnnYtIvLw8PDw8PBIZbie9PDw8PDw8Li1cT3p4eHh4eHh
        cWvjetLDw8PDw8Pj1sb1pIeHh4eHh8etjetJDw8PDw8Pj1sb15MeHh4eHh4etzauJz08PDw8PDxubVxP
        enh4eHh4eNzauJ708PDw8PDwuLVxPenh4eHh4eFxa+N60sPDw8PDw+PWxvWkh4eHh4eHx62N60kPDw8P
        Dw+PWxvXkx4eHh4eHh63Nq4nPTw8PDw8PG5tXE96eHh4eHh43Nq4nvTw8PDw8PC4tXE96eHh4eHh4XFr
        43rSw8PDw8PD49bG9aSHh4eHh4fHrY3rSQ8PDw8PD49bG9eTHh4eHh4eHrc2ridTGyq8w81HhU6Wiups
        qYoJllWxs2VFd9Xw7ag4PBZvqUjcjsTtiI6WFdHBssJxLNcO5/lxvDYcR2BF4z1iullW5e6Wikm0VJUe
        +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
        DDawUBAEQRCEwQYWCoIgCIIw2MBCQRAEQRAGG1goCIIgCMJgAwsFQRAEQRhsYKEgCIIgCIMNLBQEQRAE
        YbCBhYIgCIIgDDawUBAEQRCEwQYWCoIgCIIw2MBCQRAEQRAGG1goCIIgCMJgAwsFQRAEQRhsYKEgCIIg
        CIMNLBQEQRAEYbCBhYIgCIIgDDawUBAEQRCEwQYWCoIgCIIw2MBCQRAEQRAGG1goCIIgCMJgAwsFQRAE
        QRhsYKEgCIIgCIMNLBQEQRAEYbCBhYIgCIIgDDawUBAEQRCEwQYWCoIgCIIw2MBCQRAEQRAGG1goCIIg
        CMJgAwsFQRAEQRhsYKEgCIIgCIMNLBQEQRAEYbCBhYIgCIIgDDawUBAEQRCEwQYWCoIgCIIw2MBCQRAE
        QRAGG1goCIIgCMJgAwsFQRAEQRhsYKEgCIIgCIMNLBQEQRAEYbCBhYIgCIIgDDawUBAEQRCEwQYWCoIg
        CIIw2MBCQRAEQRAGG1goCIIgCMJgAwsFQRAEQRhsYKEgCIIgCINMI/j/j/RBciY5bvcAAAAASUVORK5C
        YII=
</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>;SQL Server 2014 Configuration File
[OPTIONS]



; Especifica un flujo de trabajo de instalación, como INSTALL, UNINSTALL o UPGRADE. Es un parámetro necesario. 

ACTION="Install"

; No se ha definido aún ayuda detallada para el argumento de la línea de comandos ROLE. 

ROLE="AllFeatures_WithDefaults"

; Use el parámetro /ENU para instalar la versión en inglés de SQL Server en el sistema operativo Windows traducido. 

ENU="False"

; Parámetro que controla el comportamiento de la interfaz de usuario. Los valores válidos son Normal para la interfaz de usuario completa, AutoAdvance para una interfaz de usuario simplificada y EnableUIOnServerCore para omitir la parte gráfica de la instalación de Server Core. 


; La instalación no mostrará ninguna interfaz de usuario. 

QUIET="False"

; El programa de instalación sólo mostrará el progreso, sin la interacción del usuario. 

QUIETSIMPLE="True"

; Especifique si el programa de instalación de SQL Server debe detectar e incluir actualizaciones del producto. Los valores válidos son True y False o 1 y 0. De forma predeterminada, el programa de instalación de SQL Server incluirá las actualizaciones que encuentre. 

UpdateEnabled="False"

; Especifique si se puede informar de los errores a Microsoft para mejorar las futuras versiones de SQL Server. Elija 1 o True para habilitar esta característica, o bien 0 o False para deshabilitarla. 

ERRORREPORTING="False"

; Si se proporciona este parámetro, el equipo usará Microsoft Update para comprobar las actualizaciones. 

USEMICROSOFTUPDATE="False"

; Especifica las características que se van a instalar, desinstalar o actualizar. La lista de las características de nivel superior incluye SQL, AS, RS, IS, MDS y Herramientas. La característica SQL instalará el motor de base de datos, la replicación, el texto completo y el servidor Data Quality Services (DQS). La característica Herramientas instalará las herramientas de administración, los componentes de Libros en pantalla, SQL Server Data Tools y el resto de los componentes compartidos. 

FEATURES=SQLENGINE,REPLICATION

; Especifique la ubicación en la que el programa de instalación de SQL Server obtendrá actualizaciones del producto. Los valores válidos son "MU" para buscar en Microsoft Update, una ruta de acceso de carpeta válida, una ruta de acceso relativa, como .\MisActualizaciones, o un recurso compartido UNC. De forma predeterminada, el programa de instalación de SQL Server buscará en Microsoft Update o en el servicio Windows Update mediante Windows Server Update Services. 

UpdateSource="MU"

; Muestra el uso de los parámetros de la línea de comandos 

HELP="False"

; Especifica que el registro de instalación detallado debe redireccionarse a la consola. 

INDICATEPROGRESS="False"

; Especifica que el programa de instalación debe realizar la instalación en WOW64. Este argumento de la línea de comandos no se admite en sistemas IA64 ni de 32 bits. 

X86="False"

; Especifique el directorio de instalación raíz de los componentes compartidos. Este directorio no cambia después de instalar los componentes compartidos. 

INSTALLSHAREDDIR="C:\Program Files\Microsoft SQL Server"

; Especifique una instancia predeterminada o con nombre. MSSQLSERVER y SQLExpress son las instancias predeterminadas de las ediciones que no son Express y de las Express, respectivamente. Se requiere este parámetro al instalar el motor de base de datos de SQL Server (SQL), Analysis Services (AS) o Reporting Services (RS). 

INSTANCENAME="PRUEBAFINAL22"

; Especifique si los datos de uso de las características de SQL Server se pueden recopilar y enviar a Microsoft. Elija 1 o True para habilitar esta característica, o bien 0 o False para deshabilitarla. 

SQMREPORTING="False"

; Especifique el identificador de instancia de las características de SQL Server que ha indicado. Las estructuras de directorios y del Registro, así como los nombres de los servicios SQL Server incorporarán el identificador de instancia de SQL Server. 

INSTANCEID="PRUEBAFINAL22"

; Especifique el directorio de instalación. 

INSTANCEDIR="C:\Program Files (x86)\Microsoft SQL Server"

; Nombre de cuenta del Agente 

AGTSVCACCOUNT="NT AUTHORITY\Servicio de red"

; Iniciar servicio automáticamente después de la instalación.  

AGTSVCSTARTUPTYPE="Disabled"

; Puerto de comunicación TCP del brick de CM 

COMMFABRICPORT="0"

; Cómo usará la matriz las redes privadas 

COMMFABRICNETWORKLEVEL="0"

; Cómo se protegerá la comunicación entre bricks 

COMMFABRICENCRYPTION="0"

; Puerto TCP usado por el brick de CM 

MATRIXCMBRICKCOMMPORT="0"

; Tipo de inicio para el servicio SQL Server. 

SQLSVCSTARTUPTYPE="Automatic"

; Nivel para habilitar la característica FILESTREAM en (0, 1, 2 o 3). 

FILESTREAMLEVEL="0"

; Establézcalo en "1" para habilitar RANU para SQL Server Express. 

ENABLERANU="True"

; Especifica una intercalación de Windows o SQL que se va a utilizar para el motor de base de datos. 

SQLCOLLATION="Modern_Spanish_CI_AS"

; Cuenta para el servicio de SQL Server: Dominio\Usuario o cuenta de sistema. 

SQLSVCACCOUNT="NT Service\MSSQL$PRUEBAFINAL22"

; Cuentas de Windows que se suministran como administradores del sistema de SQL Server. 


; Autenticación de Windows predeterminada. Use "SQL" para el modo mixto de autenticación de Windows. 


; Aprovisione el usuario actual como administrador del sistema del motor de base de datos para %SQL_PRODUCT_SHORT_NAME% Express. 

ADDCURRENTUSERASSQLADMIN="False"

; Especifique 0 para deshabilitar el protocolo TCP/IP, o 1 para habilitarlo. 

TCPENABLED="1"

; Especifique 0 para deshabilitar el protocolo Named Pipes, o 1 para habilitarlo. 

NPENABLED="0"

; Tipo de inicio para el servicio SQL Server Browser. 

BROWSERSVCSTARTUPTYPE="Disabled"</value>
  </data>
  <data name="txtCrear_procedimientos.Text" xml:space="preserve">
    <value>USE [master]
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [BASE_PUNTO_VENTA].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ARITHABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  DISABLE_BROKER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECOVERY FULL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  MULTI_USER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DB_CHAINING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'BASE_PUNTO_VENTA', N'ON'
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUERY_STORE = OFF
GO
USE [BASE_PUNTO_VENTA]
GO
/****** Object:  User [ada369]    Script Date: 28/05/2024 17:04:17 ******/
CREATE USER [ada369] FOR LOGIN [ada369] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [ada369]
GO
/****** Object:  Table [dbo].[Caja]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Caja](
	[Id_Caja] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](50) NULL,
	[Tema] [varchar](50) NULL,
	[Serial_PC] [varchar](max) NULL,
	[Impresora_Ticket] [varchar](max) NULL,
	[Impresora_A4] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Tipo] [varchar](50) NULL,
	[PuertoBalanza] [varchar](max) NULL,
	[EstadoBalanza] [varchar](50) NULL,
 CONSTRAINT [PK_Caja_1] PRIMARY KEY CLUSTERED 
(
	[Id_Caja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[clientes]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[clientes](
	[idclientev] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](max) NULL,
	[Direccion_para_factura] [varchar](max) NULL,
	[RFC] [varchar](max) NULL,
	[movil] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
 CONSTRAINT [PK_clientes] PRIMARY KEY CLUSTERED 
(
	[idclientev] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Compras]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Compras](
	[Idcompra] [int] IDENTITY(1,1) NOT NULL,
	[fechacompra] [datetime] NULL,
	[Total] [numeric](18, 2) NULL,
	[Comprobante] [varchar](max) NULL,
	[IdProveedor] [int] NULL,
	[Idcaja] [int] NULL,
 CONSTRAINT [PK_Compras] PRIMARY KEY CLUSTERED 
(
	[Idcompra] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Conceptos]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Conceptos](
	[Id_concepto] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](max) NULL,
 CONSTRAINT [PK_Conceptos] PRIMARY KEY CLUSTERED 
(
	[Id_concepto] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ControlCobros]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ControlCobros](
	[idcontrolCobro] [int] IDENTITY(1,1) NOT NULL,
	[Monto] [numeric](18, 2) NULL,
	[Fecha] [datetime] NULL,
	[Detalle] [varchar](max) NULL,
	[idCliente] [int] NULL,
	[idUsusario] [int] NULL,
	[idCaja] [int] NULL,
	[Comprobante] [varchar](max) NULL,
	[Efectivo] [numeric](18, 2) NULL,
	[Tarjeta] [numeric](18, 2) NULL,
 CONSTRAINT [PK_ControlCobros] PRIMARY KEY CLUSTERED 
(
	[idcontrolCobro] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CorreoBase]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CorreoBase](
	[IdCorreo] [int] IDENTITY(1,1) NOT NULL,
	[Correo] [varchar](max) NULL,
	[Password] [varchar](max) NULL,
	[EstadoEnvio] [varchar](50) NULL,
 CONSTRAINT [PK_CorreoBase] PRIMARY KEY CLUSTERED 
(
	[IdCorreo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[detalle_venta]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[detalle_venta](
	[iddetalle_venta] [int] IDENTITY(1,1) NOT NULL,
	[idventa] [int] NULL,
	[Id_producto] [int] NULL,
	[cantidad] [numeric](18, 2) NULL,
	[preciounitario] [numeric](18, 2) NULL,
	[Moneda] [varchar](50) NULL,
	[Total_a_pagar]  AS ([preciounitario]*[cantidad]),
	[Unidad_de_medida] [varchar](50) NULL,
	[Cantidad_mostrada] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Descripcion] [varchar](50) NULL,
	[Codigo] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Costo] [numeric](18, 2) NULL,
	[Ganancia]  AS ([cantidad]*[preciounitario]-[cantidad]*[Costo]),
 CONSTRAINT [PK_detalle_venta] PRIMARY KEY CLUSTERED 
(
	[iddetalle_venta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DetalleCompra]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DetalleCompra](
	[IdDetallecompra] [int] IDENTITY(1,1) NOT NULL,
	[IdCompra] [int] NULL,
	[Cantidad] [numeric](18, 2) NULL,
	[Costo] [numeric](18, 2) NULL,
	[Moneda] [varchar](50) NULL,
	[IdProducto] [int] NULL,
	[Descripcion] [varchar](max) NULL,
	[Total]  AS ([Costo]*[Cantidad]),
 CONSTRAINT [PK_DetalleCompra] PRIMARY KEY CLUSTERED 
(
	[IdDetallecompra] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMPRESA]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMPRESA](
	[Id_empresa] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Empresa] [varchar](50) NULL,
	[Logo] [image] NULL,
	[Impuesto] [varchar](50) NULL,
	[Porcentaje_impuesto] [numeric](18, 0) NULL,
	[Moneda] [varchar](50) NULL,
	[Trabajas_con_impuestos] [varchar](50) NULL,
	[Modo_de_busqueda] [varchar](50) NULL,
	[Carpeta_para_copias_de_seguridad] [varchar](max) NULL,
	[Correo_para_envio_de_reportes] [varchar](50) NULL,
	[Ultima_fecha_de_copia_de_seguridad] [varchar](50) NULL,
	[Ultima_fecha_de_copia_date] [datetime] NULL,
	[Frecuencia_de_copias] [int] NULL,
	[Estado] [varchar](50) NULL,
	[Tipo_de_empresa] [varchar](50) NULL,
	[Pais] [varchar](max) NULL,
	[Redondeo_de_total] [varchar](50) NULL,
 CONSTRAINT [PK_EMPRESA] PRIMARY KEY CLUSTERED 
(
	[Id_empresa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Gastos_varios]    Script Date: 28/05/2024 17:04:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Gastos_varios](
	[id_gasto] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Nro_comprobante] [varchar](5) NULL,
	[Tipo_comprobante] [varchar](max) NULL,
	[Importe] [numeric](18, 2) NULL,
	[Descripcion] [varchar](max) NULL,
	[Id_caja] [int] NULL,
	[Id_concepto] [int] NULL,
 CONSTRAINT [PK_Gastos_varios] PRIMARY KEY CLUSTERED 
(
	[id_gasto] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Grupo_de_Productos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Grupo_de_Productos](
	[Idline] [int] IDENTITY(1,1) NOT NULL,
	[Linea] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_linea] PRIMARY KEY CLUSTERED 
(
	[Idline] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Ingresos_varios]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ingresos_varios](
	[id_ingreso] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Nro_comprobante] [varchar](max) NULL,
	[Tipo_comprobante] [varchar](max) NULL,
	[Importe] [numeric](18, 2) NULL,
	[Descripcion] [varchar](max) NULL,
	[Id_caja] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Inicios_de_sesion_por_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Inicios_de_sesion_por_caja](
	[Id_inicio_sesion] [int] IDENTITY(1,1) NOT NULL,
	[Id_serial_Pc] [varchar](max) NULL,
	[Id_usuario] [int] NULL,
 CONSTRAINT [PK_Inicios_de_sesion_por_caja] PRIMARY KEY CLUSTERED 
(
	[Id_inicio_sesion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[KARDEX]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KARDEX](
	[Id_kardex] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Motivo] [varchar](max) NULL,
	[Cantidad] [numeric](18, 2) NULL,
	[Id_producto] [int] NULL,
	[Id_usuario] [int] NULL,
	[Tipo] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[Total]  AS ([Cantidad]*[Costo_unt]),
	[Costo_unt] [numeric](18, 2) NULL,
	[Habia] [numeric](18, 2) NULL,
	[Hay] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_KARDEX] PRIMARY KEY CLUSTERED 
(
	[Id_kardex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Marcan]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Marcan](
	[Id_marca] [int] IDENTITY(1,1) NOT NULL,
	[S] [varchar](max) NULL,
	[F] [varchar](max) NULL,
	[E] [varchar](max) NULL,
	[FA] [varchar](max) NULL,
 CONSTRAINT [PK_Licencias] PRIMARY KEY CLUSTERED 
(
	[Id_marca] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MOVIMIENTOCAJACIERRE]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MOVIMIENTOCAJACIERRE](
	[idcierrecaja] [int] IDENTITY(1,1) NOT NULL,
	[fechainicio] [datetime] NULL,
	[fechafin] [datetime] NULL,
	[fechacierre] [datetime] NULL,
	[ingresos] [numeric](18, 2) NULL,
	[egresos] [numeric](18, 2) NULL,
	[Saldo_queda_en_caja] [numeric](18, 2) NULL,
	[Id_usuario] [int] NULL,
	[Total_calculado] [numeric](18, 2) NULL,
	[Total_real] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Diferencia] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_MOVIMIENTOCAJACIERRE] PRIMARY KEY CLUSTERED 
(
	[idcierrecaja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Producto1]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Producto1](
	[Id_Producto1] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](max) NULL,
	[Imagen] [varchar](50) NULL,
	[Id_grupo] [int] NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Precio_de_compra] [numeric](18, 2) NULL,
	[Fecha_de_vencimiento] [varchar](50) NULL,
	[Precio_de_venta] [numeric](18, 2) NULL,
	[Codigo] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Impuesto] [varchar](50) NULL,
	[Stock_minimo] [numeric](18, 2) NULL,
	[Precio_mayoreo] [numeric](18, 2) NULL,
	[Sub_total_pv]  AS ([Precio_de_venta]-([Precio_de_venta]*[Impuesto])/(100)),
	[Sub_total_pm]  AS ([Precio_mayoreo]-([Precio_mayoreo]*[Impuesto])/(100)),
	[A_partir_de] [numeric](18, 2) NULL,
 CONSTRAINT [PK_Producto1] PRIMARY KEY CLUSTERED 
(
	[Id_Producto1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Proveedores](
	[IdProveedor] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](max) NULL,
	[Direccion] [varchar](max) NULL,
	[IdentificadorFiscal] [varchar](max) NULL,
	[Celular] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
 CONSTRAINT [PK_Proveedores] PRIMARY KEY CLUSTERED 
(
	[IdProveedor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Serializacion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Serializacion](
	[Id_serializacion] [int] IDENTITY(1,1) NOT NULL,
	[Serie] [varchar](50) NULL,
	[Cantidad_de_numeros] [varchar](50) NULL,
	[numerofin] [varchar](50) NULL,
	[Destino] [varchar](50) NULL,
	[tipodoc] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_Serializacion] PRIMARY KEY CLUSTERED 
(
	[Id_serializacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Ticket]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ticket](
	[Id_ticket] [int] IDENTITY(1,1) NOT NULL,
	[Id_Empresa] [int] NULL,
	[Identificador_fiscal] [varchar](max) NULL,
	[Direccion] [varchar](max) NULL,
	[Provincia_Departamento_Pais] [varchar](max) NULL,
	[Nombre_de_Moneda] [varchar](max) NULL,
	[Agradecimiento] [varchar](max) NULL,
	[pagina_Web_Facebook] [varchar](max) NULL,
	[Anuncio] [varchar](max) NULL,
	[Datos_fiscales_de_autorizacion] [varchar](max) NULL,
	[Por_defecto] [varchar](max) NULL,
 CONSTRAINT [PK_Ticket] PRIMARY KEY CLUSTERED 
(
	[Id_ticket] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[USUARIO2]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USUARIO2](
	[idUsuario] [int] IDENTITY(1,1) NOT NULL,
	[Nombres_y_Apellidos] [varchar](50) NULL,
	[Login] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[Icono] [image] NULL,
	[Nombre_de_icono] [varchar](max) NULL,
	[Correo] [varchar](max) NULL,
	[Rol] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
 CONSTRAINT [PK_USUARIO2] PRIMARY KEY CLUSTERED 
(
	[idUsuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ventas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ventas](
	[idventa] [int] IDENTITY(1,1) NOT NULL,
	[idclientev] [int] NULL,
	[fecha_venta] [datetime] NULL,
	[Numero_de_doc] [varchar](50) NULL,
	[Monto_total] [numeric](18, 2) NULL,
	[Tipo_de_pago] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[IVA] [numeric](18, 1) NULL,
	[Comprobante] [varchar](50) NULL,
	[Id_usuario] [int] NULL,
	[Fecha_de_pago] [varchar](50) NULL,
	[ACCION] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
	[Pago_con] [numeric](18, 2) NULL,
	[Porcentaje_IGV] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
	[Referencia_tarjeta] [varchar](50) NULL,
	[Vuelto] [numeric](18, 2) NULL,
	[Efectivo] [numeric](18, 2) NULL,
	[Credito] [numeric](18, 2) NULL,
	[Tarjeta] [numeric](18, 2) NULL,
 CONSTRAINT [PK_ventas] PRIMARY KEY CLUSTERED 
(
	[idventa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_Caja] FOREIGN KEY([idCaja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_Caja]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_clientes] FOREIGN KEY([idCliente])
REFERENCES [dbo].[clientes] ([idclientev])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_clientes]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_USUARIO2] FOREIGN KEY([idUsusario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_USUARIO2]
GO
ALTER TABLE [dbo].[detalle_venta]  WITH CHECK ADD  CONSTRAINT [FK_detalle_venta_ventas] FOREIGN KEY([idventa])
REFERENCES [dbo].[ventas] ([idventa])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[detalle_venta] CHECK CONSTRAINT [FK_detalle_venta_ventas]
GO
ALTER TABLE [dbo].[Gastos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Gastos_varios_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[Gastos_varios] CHECK CONSTRAINT [FK_Gastos_varios_Caja]
GO
ALTER TABLE [dbo].[Gastos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Gastos_varios_Conceptos] FOREIGN KEY([Id_concepto])
REFERENCES [dbo].[Conceptos] ([Id_concepto])
GO
ALTER TABLE [dbo].[Gastos_varios] CHECK CONSTRAINT [FK_Gastos_varios_Conceptos]
GO
ALTER TABLE [dbo].[Ingresos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Ingresos_varios_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[Ingresos_varios] CHECK CONSTRAINT [FK_Ingresos_varios_Caja]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Caja]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Producto1] FOREIGN KEY([Id_producto])
REFERENCES [dbo].[Producto1] ([Id_Producto1])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Producto1]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_USUARIO2]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja1] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja1]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_clientes] FOREIGN KEY([idclientev])
REFERENCES [dbo].[clientes] ([idclientev])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_clientes]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_USUARIO2]
GO
/****** Object:  StoredProcedure [dbo].[actualizar_serializacion_mas_uno]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[actualizar_serializacion_mas_uno]
@idserie as int

as 
update Serializacion set  numerofin=numerofin+1          
where Id_serializacion=@idserie 






GO
/****** Object:  StoredProcedure [dbo].[aplicar_precio_mayoreo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[aplicar_precio_mayoreo]
@idproducto int,
@iddetalleventa int
as
declare @preciomayoreo numeric(18,2)
set @preciomayoreo= (select Precio_mayoreo from Producto1 where Producto1.Id_Producto1 = @idproducto )
if Exists(select Precio_mayoreo,Id_Producto1 from Producto1 where Precio_mayoreo=0 and Producto1.Id_Producto1 =@idproducto)
Raiserror('No se configuro un precio al moyero para este producto',16,1)
else

update detalle_venta set preciounitario=@preciomayoreo
where Id_producto =@idproducto and detalle_venta.iddetalle_venta =@iddetalleventa 
GO
/****** Object:  StoredProcedure [dbo].[aumentar_saldo_a_cliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[aumentar_saldo_a_cliente]
@idcliente as integer,
@Saldo numeric(18,2)          
as 
update clientes set          
			Saldo =Saldo+@Saldo 
where idclientev =@idcliente 







GO
/****** Object:  StoredProcedure [dbo].[aumentar_stock_en_detalle_de_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[aumentar_stock_en_detalle_de_venta]
@Id_Producto1 as int,
@cantidad as numeric (18,2)

as
update detalle_venta   set Stock=Stock+@cantidad where Id_producto   =@Id_Producto1 AND Stock  &lt;&gt;'Ilimitado'
GO
/****** Object:  StoredProcedure [dbo].[aumentarStock]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[aumentarStock]
@idproducto int,
@cantidad numeric(18,2)
as
Update Producto1 set Stock = Stock+@cantidad 
where Id_Producto1=@idproducto and Usa_inventarios = 'SI'
GO
/****** Object:  StoredProcedure [dbo].[buscar_clientes]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_clientes]
@letra varchar(max)
As
SELECT        idclientev , Nombre, Direccion_para_factura, RFC as [RFC] , movil, Estado, Saldo
FROM            dbo.clientes
where Nombre+RFC+movil   Like '%' + @letra + '%'  AND Nombre&lt;&gt;'GENERICO'
GO
/****** Object:  StoredProcedure [dbo].[buscar_conceptos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscar_conceptos]
@letra varchar(max)
as
select Id_concepto,Descripcion as Concepto from Conceptos
where Descripcion  Like '%' + @letra + '%' 





GO
/****** Object:  StoredProcedure [dbo].[Buscar_id_USUARIO]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Buscar_id_USUARIO]
@Nombres_y_Apellidos varchar(50)
as
select * from USUARIO2 
where Nombres_y_Apellidos =@Nombres_y_Apellidos
order by idUsuario desc










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]
@idProducto int
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos.Linea as Categoria
,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
               cross join EMPRESA
			INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
						 
WHEre Producto1.Id_Producto1=@idProducto   order by KARDEX.Fecha Desc

END










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Usuario ,Grupo_de_Productos .Linea as Categoria
,USUARIO2.idUsuario,@fecha as Fecha_consulta, @tipo as Tipo_consulta, EMPRESA.Nombre_Empresa ,EMPRESA.Logo 
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         INNER JOIN Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
						 CROSS JOIN EMPRESA 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
END










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT     Producto1.Descripcion ,KARDEX.Tipo ,sum (KARDEX.Cantidad) Cantidad_Total ,@fecha as fecha, USUARIO2.Nombres_y_Apellidos,@tipo as Tipo_consultado
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         
				 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
group by Producto1.Descripcion,KARDEX.Tipo,USUARIO2.Nombres_y_Apellidos
ORDER BY sum (KARDEX.Cantidad) DESC
END










GO
/****** Object:  StoredProcedure [dbo].[buscar_producto_por_descripcion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_producto_por_descripcion]
@letra VARCHAR(50)
AS BEGIN
select top 10 Id_Producto1,Codigo , Grupo_de_Productos.Linea as Grupo,Descripcion ,Impuesto,Usa_inventarios ,Precio_de_compra AS P_Compra,Precio_mayoreo as P_mayoreo,Se_vende_a as Se_vende_por,Stock_minimo ,Fecha_de_vencimiento as F_vencimiento ,Stock,Precio_de_venta as P_venta 
,Grupo_de_Productos.Idline,A_partir_de 

FROM            dbo.Producto1 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
              
WHEre (dbo.Producto1.Descripcion)+Codigo +Grupo_de_Productos.Linea   LIKE  '%' + @letra+'%' ORDER BY DBO.Producto1.Descripcion  asc
 
END










GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]

@letrab VARCHAR(50)
AS 
SELECT       top 10 Id_Producto1, (Descripcion) AS Descripcion, Imagen, Grupo_de_Productos.Linea, Usa_inventarios, Stock, Precio_de_compra, Fecha_de_vencimiento, Precio_de_venta, Codigo, Se_vende_a, Impuesto, Stock_minimo, Precio_mayoreo, Sub_total_pv, 
                         Sub_total_pm
FROM            dbo.Producto1 
                      	INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
  
						 where  (Descripcion+Grupo_de_Productos.Linea  + Codigo) LIKE  '%' + @letrab+'%' and Usa_inventarios ='SI'











GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_oka]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[BUSCAR_PRODUCTOS_oka]

@letrab VARCHAR(50)
AS 
BEGIN
SELECT      TOP 10  Id_Producto1,(Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) AS Descripcion
, Usa_inventarios, Stock, Precio_de_compra, Precio_de_venta, Codigo, Se_vende_a
,Descripcion as Descripcion2, Codigo 
FROM            dbo.Producto1  cross join EMPRESA 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo   
              
where  (Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) LIKE  '%' + @letrab+'%' 
end  









GO
/****** Object:  StoredProcedure [dbo].[buscar_productos_vencidos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[buscar_productos_vencidos]
@letra as varchar(50)
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock,empresa.Nombre_Empresa,empresa.Logo
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1
cross join EMPRESA 
where   Descripcion +codigo LIKE  '%' + @letra+'%' and Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))) asc










GO
/****** Object:  StoredProcedure [dbo].[buscar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_Proveedores]
@letra varchar(max)
As
SELECT        IdProveedor, Nombre, Direccion, IdentificadorFiscal as [Identificador Fiscal] , Celular, Estado, Saldo
FROM            dbo.Proveedores
where Nombre+IdentificadorFiscal+Celular   Like '%' + @letra + '%' 





GO
/****** Object:  StoredProcedure [dbo].[buscar_Tipo_de_documentos_para_insertar_en_ventas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscar_Tipo_de_documentos_para_insertar_en_ventas]
@letra VARCHAR(50)
AS BEGIN

SELECT        Serializacion.tipodoc   AS COMPROBANTE ,
dbo.Serializacion.Serie ,dbo.Serializacion.Cantidad_de_numeros  , dbo.Serializacion.numerofin ,
dbo.Serializacion.Id_serializacion ,
(dbo.Serializacion.Serie  +' - '+ dbo.Serializacion.Cantidad_de_numeros + dbo.Serializacion.numerofin) as serie_completa
FROM            dbo.Serializacion 
 
 WHEre Serializacion.tipodoc =@letra  and dbo.Serializacion .Destino  ='VENTAS'
 end






GO
/****** Object:  StoredProcedure [dbo].[buscar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscar_usuario]
@letra varchar(50)
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2

where Nombres_y_Apellidos + Login      LIKE '%'+ @letra +'%' AND Estado='ACTIVO'










GO
/****** Object:  StoredProcedure [dbo].[buscar_USUARIO_por_correo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_USUARIO_por_correo]
@correo VARCHAR(max)

AS 
SELECT        Password 
FROM            dbo.USUARIO2						 
WHEre Correo =@correo











GO
/****** Object:  StoredProcedure [dbo].[buscarCompras]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscarCompras]
@buscar varchar(50)
as
select * from Compras 
where Comprobante  Like '%' + @buscar + '%'


GO
/****** Object:  StoredProcedure [dbo].[buscarVentas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscarVentas]
@busqueda varchar(50)
as
SELECT dbo.ventas.idventa, dbo.ventas.fecha_venta as Fecha, (dbo.ventas.Comprobante + ' ' + ventas.Numero_de_doc) as Comprobante, dbo.ventas.Monto_total, 
dbo.USUARIO2.Nombres_y_Apellidos, dbo.ventas.Pago_con, (dbo.EMPRESA.Moneda + ' ' +CONVERT(varchar(50),ventas.Monto_total)) as Total, 
dbo.clientes.Nombre as Clientes, 
dbo.ventas.Tipo_de_pago, dbo.ventas.Vuelto
FROM  dbo.ventas INNER JOIN
         dbo.USUARIO2 ON dbo.ventas.Id_usuario = dbo.USUARIO2.idUsuario INNER JOIN
         dbo.clientes ON dbo.ventas.idclientev = dbo.clientes.idclientev CROSS JOIN
         dbo.EMPRESA

		 where Comprobante+Numero_de_doc like '%' + @busqueda + '%' and  ventas.Monto_total &gt;0 
GO
/****** Object:  StoredProcedure [dbo].[cambio_de_Caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[cambio_de_Caja]
@idcaja int, 
@idventa int
as
update ventas set Id_caja = @idcaja 
where idventa=@idcaja 






GO
/****** Object:  StoredProcedure [dbo].[CERRAR_CAJA]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[CERRAR_CAJA]
@idcaja as integer,
@fechafin datetime,
@fechacierre datetime


		
as 
update MOVIMIENTOCAJACIERRE set 
Estado ='CAJA CERRADA'
where Id_caja =@idcaja AND Estado='CAJA APERTURADA'














GO
/****** Object:  StoredProcedure [dbo].[cerrarCaja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[cerrarCaja]

@fechafin As datetime,
@fechacierre As datetime,
@ingresos As numeric(18,2),
@egresos As numeric(18,2),
@Saldo_queda_en_caja As numeric(18,2),
@Id_usuario As int,
@Total_calculado As numeric(18,2),
@Total_real As numeric(18,2),
@Estado As varchar(50),
@Diferencia As numeric(18,2),
@Id_caja As int
As
UPDATE MOVIMIENTOCAJACIERRE Set


fechafin=@fechafin,
fechacierre=@fechacierre,
ingresos=@ingresos,
egresos=@egresos,
Saldo_queda_en_caja=@Saldo_queda_en_caja,
Id_usuario=@Id_usuario,
Total_calculado=@Total_calculado,
Total_real=@Total_real,
Estado=@Estado,
Diferencia=@Diferencia
Where Id_caja =@Id_caja



GO
/****** Object:  StoredProcedure [dbo].[Confirmar_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Confirmar_venta]
@idventa int,
@montototal as numeric(18,2),
@IVA as numeric(18,2),
@Saldo numeric(18,2),
@Tipo_de_pago varchar(50),
@Estado varchar(50),
@Comprobante varchar(50),
@Numero_de_doc varchar(50),
@fecha_venta datetime,
@ACCION varchar(50),
@Fecha_de_pago varchar(50),
@idcliente int,
@Pago_con numeric(18,2),
@Referencia_tarjeta varchar(50),
@Vuelto as numeric(18,2),
@Efectivo as numeric(18,2),
@Credito numeric(18,2),
@Tarjeta numeric(18,2)
as
BEGIN
if EXISTS (SELECT Numero_de_doc  FROM ventas  where Numero_de_doc  = @Numero_de_doc  )
RAISERROR ('Ya existe un Numero de Comprobante con ese Numero y Serie', 16,1)
else
BEGIN
update ventas set Monto_total  =@montototal, IVA=@IVA ,Saldo=@Saldo,
Tipo_de_pago=@Tipo_de_pago 
,Estado=@Estado ,
Comprobante =@Comprobante ,
Numero_de_doc=@Numero_de_doc ,
fecha_venta=@fecha_venta ,
ACCION=@ACCION ,Fecha_de_pago =@Fecha_de_pago ,idclientev=@idcliente ,
Pago_con=@Pago_con,Referencia_tarjeta=@Referencia_tarjeta,
Vuelto=@Vuelto ,Efectivo=@Efectivo,Credito=@Credito,Tarjeta=@Tarjeta 
where idventa =@idventa 
END
END










GO
/****** Object:  StoredProcedure [dbo].[confirmarCompra]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[confirmarCompra]
@Idcompra int,
@Total numeric(18,2),
@Idcaja int,
@Idproveedor int,
@fechacompra datetime
as
declare @Comprobante varchar(max)

update Serializacion set numerofin=numerofin+1
where Serie='TC'
set @Comprobante=(select (tipodoc +'-'+Serie+numerofin) from Serializacion where Serie='TC')
update Compras set Total=@Total ,
Comprobante=@Comprobante,
IdProveedor =@Idproveedor ,
fechacompra=@fechacompra 
where Idcompra=@Idcompra and Idcaja =@Idcaja  


GO
/****** Object:  StoredProcedure [dbo].[contar_Clientes_Activos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_Clientes_Activos] 
as
select
COUNT (idclientev) as Id
from clientes
where Estado = 'ACTIVO' 

GO
/****** Object:  StoredProcedure [dbo].[contar_Clientes_Eliminados]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_Clientes_Eliminados] 
as
select COUNT(idclientev) as Id from clientes where Estado = 'ELIMINADO' 
GO
/****** Object:  StoredProcedure [dbo].[contar_productos_vencidos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[contar_productos_vencidos] 
as
select
COUNT (Id_Producto1) as Id
from Producto1
where Fecha_de_vencimiento&lt;&gt;'NO APLICA' and Fecha_de_vencimiento &lt;= CONVERT(date,GETDATE()) 








GO
/****** Object:  StoredProcedure [dbo].[contarVentasEspera]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contarVentasEspera]
as
Select count (idventa) from ventas 
where Estado='EN ESPERA'
GO
/****** Object:  StoredProcedure [dbo].[DetalleventaDevolucion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[DetalleventaDevolucion]
@iddetalle int,
@cantidad numeric(18,2),
@cantidadMostrada numeric(18,2)
as
update detalle_venta set cantidad=cantidad- @cantidad,Cantidad_mostrada=Cantidad_mostrada- @cantidadMostrada
where iddetalle_venta=@iddetalle
delete from detalle_venta where iddetalle_venta = @iddetalle and cantidad=0
GO
/****** Object:  StoredProcedure [dbo].[disminuir_stock]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuir_stock]
@Id_Producto1 as int,
@cantidad as decimal (18,2)

as
update Producto1   set Stock=Stock-@cantidad 
where Id_Producto1=@Id_Producto1 AND Usa_inventarios  ='SI' and Stock&gt;=@cantidad






GO
/****** Object:  StoredProcedure [dbo].[disminuir_stock_en_detalle_de_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuir_stock_en_detalle_de_venta]
@Id_Producto1 as int,
@cantidad as decimal (18,2)

as
update detalle_venta   set Stock=Stock-@cantidad where Id_producto   =@Id_Producto1 AND Stock  &lt;&gt;'Ilimitado'






GO
/****** Object:  StoredProcedure [dbo].[disminuirSaldocliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuirSaldocliente]
@idcliente int,
@monto numeric(18,2)
as
update clientes set Saldo = Saldo - @monto 
where idclientev=@idcliente 
GO
/****** Object:  StoredProcedure [dbo].[editar_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[editar_caja]
@idcaja integer,
@descripcion varchar(50)

 as       
 if EXISTS (SELECT Descripcion  FROM Caja  where (Descripcion  = @descripcion and Id_Caja  &lt;&gt;@idcaja ) )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else          		
 
update Caja set 
Descripcion  =@descripcion 

where Id_Caja    =@idcaja  








GO
/****** Object:  StoredProcedure [dbo].[editar_caja_impresoras]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_caja_impresoras]
@idcaja integer,


	   @Impresora_Ticket varchar(max),
	   @Impresora_A4 varchar(max)
        
           		
as 
update Caja set 
 Impresora_Ticket=@Impresora_Ticket
 ,Impresora_A4= @Impresora_A4
where Id_Caja    =@idcaja    



GO
/****** Object:  StoredProcedure [dbo].[editar_cliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_cliente]
@idcliente as integer,
@Nombre varchar(MAX),
           @Direccion_para_factura varchar(MAX),
            @RFC varchar(MAX),                      
            @movil varchar(50)
		
as 
if EXISTS (SELECT RFC  FROM clientes  where (RFC  = @RFC and idclientev  &lt;&gt;@idcliente and @RFC &lt;&gt; '0') )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else
update clientes set 
Nombre =@Nombre ,
          Direccion_para_factura = @Direccion_para_factura ,
           RFC = @RFC ,
          
          movil  = @movil 
where idclientev =@idcliente 









GO
/****** Object:  StoredProcedure [dbo].[editar_Conceptos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_Conceptos]
@Id_concepto As int,
@Descripcion As varchar(MAX)
As
if Exists(select Descripcion  from Conceptos where Descripcion =@Descripcion and Id_concepto&lt;&gt;@Id_concepto )
Raiserror('Concepto ya registrado',16,1 )
else
UPDATE Conceptos Set

Descripcion=@Descripcion
Where Id_concepto=@Id_concepto





GO
/****** Object:  StoredProcedure [dbo].[editar_ControlCobros]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[editar_ControlCobros]
@idcontrolCobro As int,
@Monto As numeric(18,2),
@Fecha As datetime,
@Detalle As varchar(MAX),
@idCliente As int,
@idUsusario As int,
@idCaja As int,
@Comprobante As varchar(MAX)
As
UPDATE ControlCobros Set

Monto=@Monto,
Fecha=@Fecha,
Detalle=@Detalle,
idCliente=@idCliente,
idUsusario=@idUsusario,
idCaja=@idCaja,
Comprobante=@Comprobante
Where idcontrolCobro=@idcontrolCobro

GO
/****** Object:  StoredProcedure [dbo].[editar_correo_base]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_correo_base]
@Correo varchar(max),
@Password varchar(max),
@Estado_De_envio varchar(50)

as

update  CorreoBase set Correo =@Correo,
Password=@Password,EstadoEnvio=@Estado_De_envio


GO
/****** Object:  StoredProcedure [dbo].[editar_CreditoPorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_CreditoPorPagar]
@Id_credito As int,
@Descripcion As varchar(MAX),
@Fecha_registro As datetime,
@Fecha_vencimiento As date,
@Total As numeric(18,2),
@Saldo As numeric(18,2),
@Estado As varchar(MAX),
@Id_caja As int,
@Id_Proveedor As int
As
UPDATE CreditoPorPagar Set

Descripcion=@Descripcion,
Fecha_registro=@Fecha_registro,
Fecha_vencimiento=@Fecha_vencimiento,
Total=@Total,
Saldo=@Saldo,
Estado=@Estado,
Id_caja=@Id_caja,
Id_Proveedor=@Id_Proveedor
Where Id_credito=@Id_credito


GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_compra_Cantidad]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_detalle_compra_Cantidad]
@cantidad as numeric(18, 2),
@Id_producto varchar(50)   
,@Idcompra  as int
as
update DetalleCompra set 
cantidad=@cantidad 
where DetalleCompra.IdProducto = @Id_producto and DetalleCompra.IdCompra=@Idcompra














GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_compra_Precio]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[editar_detalle_compra_Precio]
@precio as numeric(18, 2),
@Id_producto varchar(50)   
,@Idcompra  as int
as
update DetalleCompra set 
Costo=@precio 
where DetalleCompra.IdProducto = @Id_producto and DetalleCompra.IdCompra=@Idcompra














GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_CANTIDAD]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_CANTIDAD]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad=@cantidad,
Cantidad_mostrada =@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end








GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_restar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_detalle_venta_restar]
@iddetalle_venta INT,
@cantidad as numeric(18, 2),
@Cantidad_mostrada  numeric(18, 2) ,
  @Id_producto varchar(50)   
    ,@Id_venta  as int

	as
	DECLARE @APARTIR_DE as numeric(18,2)
DECLARE @Precio_normal as numeric (18,2)
DECLARE @Precio_pormayor as numeric(18,2)
SET @APARTIR_DE= (SELECT A_partir_de  FROM Producto1  where Producto1.Id_Producto1 = @Id_producto )
SET @Precio_normal =(SELECT Precio_de_venta  FROM Producto1 where Producto1.Id_Producto1 =@Id_producto  )
SET @Precio_pormayor =(SELECT Precio_mayoreo  FROM Producto1 where Producto1.Id_Producto1 = @Id_producto )
PRINT @APARTIR_DE
PRINT @Precio_normal
PRINT @Precio_pormayor

BEGIN


 

update detalle_venta set 
cantidad=cantidad-@cantidad 
, Cantidad_mostrada=Cantidad_mostrada-@Cantidad_mostrada
where detalle_venta.Id_producto = @Id_producto and detalle_venta.idventa=@Id_venta
END

begin 
delete from detalle_venta where  detalle_venta.idventa =@Id_venta and  cantidad &lt;=0
end

begin
if EXISTS( SELECT Descripcion,cantidad,Id_producto ,idventa  FROM detalle_venta where cantidad &gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto AND  detalle_venta.idventa =@Id_venta AND detalle_venta.Codigo &lt;&gt;'0')
UPDATE detalle_venta set
preciounitario =@Precio_pormayor 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and @Precio_pormayor &gt;0 and @APARTIR_DE &gt;0
end

begin
if EXISTS(SELECT cantidad  FROM detalle_venta where cantidad &lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and detalle_venta.Codigo &lt;&gt;'0')
update detalle_venta set
preciounitario =@Precio_normal 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta 
end

begin
IF EXISTS(SELECT cantidad FROM detalle_venta WHERE detalle_venta .idventa =@Id_venta and detalle_venta.Codigo ='0')
update detalle_venta set 
Codigo = 0 
where detalle_venta.Codigo='0' and detalle_venta.idventa =@Id_venta 
end








GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_sumar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_sumar]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad= cantidad+ @cantidad,
Cantidad_mostrada = Cantidad_mostrada+@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end








GO
/****** Object:  StoredProcedure [dbo].[editar_dinero_caja_inicial]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_dinero_caja_inicial]
@Id_caja as integer,
@saldo numeric(18,2)


as
update MOVIMIENTOCAJACIERRE  set  Saldo_queda_en_caja =@saldo
where Id_caja =@Id_caja AND Estado ='CAJA APERTURADA'











GO
/****** Object:  StoredProcedure [dbo].[editar_eleccion_impresoras]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_eleccion_impresoras]
@idcaja integer,
@Impresora_Ticket varchar(max)	                     		
as 
update Caja set 
 Impresora_Ticket=@Impresora_Ticket
where Id_Caja    =@idcaja  






GO
/****** Object:  StoredProcedure [dbo].[editar_Empresa]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[editar_Empresa]
@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),
@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),

@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50)

as

update  EMPRESA set Nombre_Empresa=@Nombre_Empresa,Logo=@logo ,Impuesto=@Impuesto ,
Porcentaje_impuesto=@Porcentaje_impuesto,Moneda=@Moneda,Trabajas_con_impuestos=@Trabajas_con_impuestos
,Modo_de_busqueda=@Modo_de_busqueda ,Carpeta_para_copias_de_seguridad =@Carpeta_para_copias_de_seguridad ,Correo_para_envio_de_reportes =@Correo_para_envio_de_reportes 









GO
/****** Object:  StoredProcedure [dbo].[editar_FORMATO_TICKET]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_FORMATO_TICKET]
    	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto  varchar(max),
	   @Nombre_Empresa varchar(max),
	   @Logo image
    as
	begin
    update Ticket set  
	Identificador_fiscal=@Identificador_fiscal ,
          Direccion =@Direccion ,    
           Provincia_Departamento_Pais=@Provincia_Departamento_Pais ,
           Nombre_de_Moneda=@Nombre_de_Moneda ,
          Agradecimiento  =@Agradecimiento ,
          pagina_Web_Facebook = @pagina_Web_Facebook ,
         Anuncio =  @Anuncio,
		   Datos_fiscales_de_autorizacion=@Datos_fiscales_de_autorizacion,
		   Por_defecto=@Por_defecto
		   end 

		   begin
		    update EMPRESA  set  
			Nombre_Empresa=@Nombre_Empresa, 
			Logo=@Logo 
			end 








GO
/****** Object:  StoredProcedure [dbo].[editar_Gastos_varios]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[editar_Gastos_varios]
@id_gasto As int,
@Fecha As datetime,
@Nro_comprobante As varchar(5),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int,
@Id_concepto As int
As
UPDATE Gastos_varios Set

Fecha=@Fecha,
Nro_comprobante=@Nro_comprobante,
Tipo_comprobante=@Tipo_comprobante,
Importe=@Importe,
Descripcion=@Descripcion,
Id_caja=@Id_caja,
Id_concepto=@Id_concepto
Where id_gasto=@id_gasto





GO
/****** Object:  StoredProcedure [dbo].[editar_Grupo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_Grupo]
@id int,
@Grupo varchar(50)

as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo and Idline&lt;&gt;@id  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
update  Grupo_de_Productos set Linea=@grupo
where Idline=@id












GO
/****** Object:  StoredProcedure [dbo].[editar_inicio_De_sesion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max),
 @id_usuario int
  as
update Inicios_de_sesion_por_caja set 
Id_usuario =@id_usuario 
where Id_serial_Pc=@Id_serial_Pc 








GO
/****** Object:  StoredProcedure [dbo].[EDITAR_marcan_a]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[EDITAR_marcan_a]

	@e varchar(max),
	@fa varchar(max),
	@f  varchar(max),
	@s varchar(max)
    as
	
    UPDATE Marcan SET E=@e, FA=@fa, F=@f 
	where S=@s 








GO
/****** Object:  StoredProcedure [dbo].[editar_Producto1]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_Producto1]
@Id_Producto1 int,
 @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
          @Id_grupo INT,
		  @Usa_inventarios varchar(50),
	  @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
		 	,@A_partir_de numeric(18,2)
as 

if EXISTS (SELECT Descripcion FROM Producto1  where (Descripcion = @Descripcion and Id_Producto1 &lt;&gt;@Id_Producto1 ) )

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)

else if EXISTS (SELECT Codigo  FROM Producto1  where (Codigo  = @Codigo  and Id_Producto1 &lt;&gt;@Id_Producto1 ))

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)

else if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion &lt;&gt; @Descripcion and Id_Producto1 =@Id_Producto1 ) OR (Codigo&lt;&gt;@Codigo and Id_Producto1 = @Id_Producto1))

update Producto1 set  

      Descripcion =@Descripcion ,
		  Imagen =  @Imagen ,			         
         
         Id_grupo = @Id_grupo 	,
		  Usa_inventarios =@Usa_inventarios ,
		  Stock = @Stock ,
           Precio_de_compra =@Precio_de_compra ,
        Fecha_de_vencimiento =   @Fecha_de_vencimiento ,
          Precio_de_venta = @Precio_de_venta ,
         Codigo =  @Codigo ,
         Se_vende_a =  @Se_vende_a ,
           Impuesto =@Impuesto,
           Stock_minimo =@Stock_minimo ,
         Precio_mayoreo =  @Precio_mayoreo 
		 	,A_partir_de=@A_partir_de 
where id_Producto1=@Id_Producto1












GO
/****** Object:  StoredProcedure [dbo].[editar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_Proveedores]
@IdProveedor As int,
@Nombre As varchar(MAX),
@Direccion As varchar(MAX),
@IdentificadorFiscal As varchar(MAX),
@Celular As varchar(MAX)
As
if EXISTS(select Nombre  from Proveedores where Nombre=@Nombre and IdProveedor &lt;&gt; @IdProveedor )
RAISERROR('Registro ya existente', 16,1)
else
UPDATE Proveedores Set

Nombre=@Nombre,
Direccion=@Direccion,
IdentificadorFiscal=@IdentificadorFiscal,
Celular=@Celular
Where IdProveedor=@IdProveedor






GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[editar_serializacion]
@serie VARCHAR(50)  ,
@Cantidad_de_numeros AS VARCHAR(50)    ,
@numerofin as varchar(50) ,
@Tipo as varchar(50), 
   @Id_serie as int
as 
update Serializacion set  Serie =@serie   ,Cantidad_de_numeros=@Cantidad_de_numeros ,numerofin=@numerofin   
         ,tipodoc =@Tipo 
where Id_serializacion=@Id_serie 











GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion_POR_DEFECTO]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_serializacion_POR_DEFECTO]


   @Id_serie as int
as 

BEGIN
update Serializacion set  Por_defecto  ='-' 
     END


	 BEGIN
	 update Serializacion set  Por_defecto  ='SI'
where Id_serializacion=@Id_serie 

END









GO
/****** Object:  StoredProcedure [dbo].[editar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_usuario]
@idUsuario int,
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max)
as
if EXISTS (SELECT Login,idUsuario FROM USUARIO2 where (Login  = @login  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO') or (Nombres_y_Apellidos   = @nombres  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO'))
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )

ELSE

update USUARIO2 set Nombres_y_Apellidos=@nombres ,Password =@Password , Icono=@Icono ,Nombre_de_icono =@Nombre_de_icono
 ,Correo =@Correo , Rol=@rol , Login =@Login
 where idUsuario=@idUsuario 












GO
/****** Object:  StoredProcedure [dbo].[EditarBascula]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[EditarBascula]
@idcaja int,
@Puerto varchar(max),
@Estado varchar(50)

as
update Caja set   PuertoBalanza=@Puerto , EstadoBalanza = @Estado 
where Id_Caja = @idcaja
GO
/****** Object:  StoredProcedure [dbo].[EditarPreciosProductos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[EditarPreciosProductos]
@idproducto int,
@precioventa numeric(18,2),
@costo numeric(18,2),
@preciomayoreo numeric(18,2),
@cantidadAgregada numeric(18,2)

as
update Producto1 set 
Precio_de_venta=@precioventa ,
Precio_de_compra = @costo ,
Precio_mayoreo=@preciomayoreo ,
Stock = Stock + @cantidadAgregada
where Id_Producto1=@idproducto and Usa_inventarios = 'SI'
GO
/****** Object:  StoredProcedure [dbo].[editarPrecioVenta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editarPrecioVenta]
@iddetalleventa int,
@precio numeric(18,2)
as
update detalle_venta set preciounitario=@precio 
where iddetalle_venta=@iddetalleventa 
GO
/****** Object:  StoredProcedure [dbo].[editarRespaldos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editarRespaldos]

@Ultima_fecha_de_copia_de_seguridad  varchar(50),
@Carpeta_para_copias_de_seguridad varchar (max),
@Ultima_fecha_de_copia_date datetime,
@Frecuencia_de_copias int
as
update EMPRESA  set Ultima_fecha_de_copia_de_seguridad =@Ultima_fecha_de_copia_de_seguridad ,
Carpeta_para_copias_de_seguridad =@Carpeta_para_copias_de_seguridad ,Ultima_fecha_de_copia_date=@Ultima_fecha_de_copia_date
,Frecuencia_de_copias= @Frecuencia_de_copias 



GO
/****** Object:  StoredProcedure [dbo].[EditarTemaCaja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[EditarTemaCaja]
@idcaja int, 
@tema varchar(50)
as
update Caja set Tema= @tema 
where Id_Caja=@idcaja 
GO
/****** Object:  StoredProcedure [dbo].[editarVenta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editarVenta]
@idventa int,
@monto numeric(18,2)
as
if @monto &lt;&gt;0
update ventas set Monto_total=@monto 
where idventa = @idventa 
else
delete from ventas 
where idventa = @idventa 
GO
/****** Object:  StoredProcedure [dbo].[eliminar_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Eliminada'
where Id_Caja    =@idcaja








GO
/****** Object:  StoredProcedure [dbo].[eliminar_cliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ELIMINADO'
where idclientev=@idcliente AND Estado='ACTIVO'








GO
/****** Object:  StoredProcedure [dbo].[eliminar_ControlCobros]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[eliminar_ControlCobros]
@idcontrolCobro As int

As
DELETE FROM ControlCobros
WHERE idcontrolCobro=@idcontrolCobro
GO
/****** Object:  StoredProcedure [dbo].[eliminar_CreditoPorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[eliminar_CreditoPorPagar]
@Id_credito As int

As
DELETE FROM CreditoPorPagar
WHERE Id_credito=@Id_credito





GO
/****** Object:  StoredProcedure [dbo].[eliminar_detalle_compra]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_detalle_compra]
@iddetallecompra as int
as
delete DetalleCompra where IdDetallecompra=@iddetallecompra 















GO
/****** Object:  StoredProcedure [dbo].[eliminar_detalle_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_detalle_venta]
@iddetalleventa as int 
as
delete detalle_venta where iddetalle_venta=@iddetalleventa








GO
/****** Object:  StoredProcedure [dbo].[eliminar_Gastos_varios]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[eliminar_Gastos_varios]
@id_gasto As int

As
DELETE FROM Gastos_varios
WHERE id_gasto=@id_gasto





GO
/****** Object:  StoredProcedure [dbo].[eliminar_ingreso]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_ingreso]
@idingreso integer
as
delete from Ingresos_varios    where Id_ingreso  =@idingreso 






GO
/****** Object:  StoredProcedure [dbo].[eliminar_producto]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_producto]
@idproducto  int
as
delete from Producto1  where Id_Producto1 =@idproducto 











GO
/****** Object:  StoredProcedure [dbo].[eliminar_Producto1]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_Producto1]
@id  int
as
delete from Producto1  where Id_Producto1 =@id 










GO
/****** Object:  StoredProcedure [dbo].[eliminar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[eliminar_Proveedores]
@IdProveedor As int

As
update   Proveedores
set Estado ='ELIMINADO'
WHERE IdProveedor=@IdProveedor





GO
/****** Object:  StoredProcedure [dbo].[eliminar_Serializacion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_Serializacion]
@id integer
as
if EXISTS (SELECT Destino FROM Serializacion  where Destino &lt;&gt;'OTROS' AND ID_SERIALIZACION=@id )
RAISERROR ('Este Comprobante no se Eliminara ya que generaria Error', 16,1)
else
delete from Serializacion   where Id_serializacion   =@id and Destino='OTROS'










GO
/****** Object:  StoredProcedure [dbo].[eliminar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_usuario]
@idusuario int,
@login varchar(50)
as
if exists(select login from USUARIO2 where @login ='admin')
raiserror('El Usuario *Admin* es Inborrable, si se borraria Eliminarias el Acceso al Sistema de porvida, Accion Denegada', 16,1)
else
UPDATE  USUARIO2 SET Estado='ELIMINADO'
 WHERE idUsuario =@idusuario and Login &lt;&gt;'admin'












GO
/****** Object:  StoredProcedure [dbo].[eliminar_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_venta]
@idventa as integer
as
delete from ventas where idventa=@idventa








GO
/****** Object:  StoredProcedure [dbo].[eliminarComprasvacias]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminarComprasvacias]
@Idcaja int
as
delete from Compras where Idcaja =@Idcaja and Total=0

GO
/****** Object:  StoredProcedure [dbo].[eliminarControlCobro]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminarControlCobro]
@idcontrol int 
as
delete from ControlCobros
where IdcontrolCobro=@idcontrol 
GO
/****** Object:  StoredProcedure [dbo].[imprimir_inventarios_todos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[imprimir_inventarios_todos]


AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], 
case when Stock='Ilimitado' then 1 else 0  end as Stock_Es_Ilimitado,

cast(case when Stock='Ilimitado' then  0 else stock end as int) as Stock_Es_Ilimitado,
Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 


GO
/****** Object:  StoredProcedure [dbo].[ingresar_nombre_a_venta_en_espera]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ingresar_nombre_a_venta_en_espera]
@idventa int,
@nombre varchar(50)
as
update ventas set Comprobante =@nombre , Estado='EN ESPERA' where idventa = @idventa 





GO
/****** Object:  StoredProcedure [dbo].[Insertar_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Insertar_caja]

	
	@descripcion varchar(50),


	 @Tema varchar(50),
	  @Serial_PC varchar(50),
	   @Impresora_Ticket varchar(max),
	   @Impresora_A4 varchar(max),
	   @Tipo varchar(50)
	   
	  
    as
	declare @PuertoBalanza varchar(max)
	declare @EstadoBalanza varchar(50)
	set @PuertoBalanza='-'
	set @EstadoBalanza='PENDIENTE'
	BEGIN
if EXISTS (SELECT  Descripcion,Serial_PC      FROM Caja    where  Descripcion=@descripcion and Serial_PC =@Serial_PC   )
RAISERROR ('Ya Existe una Caja con ese Nombre  puede ser que ya se haya creado una Caja para Esta Pc, Ingrese un nombre diferente e intente de Nuevo', 16,1)
else
BEGIN
declare @Estado as varchar(50)
set @Estado ='RECIEN CREADA'

    INSERT INTO Caja values 
	(@descripcion,@Tema ,@Serial_PC ,@Impresora_Ticket,@Impresora_A4,@Estado,@Tipo,@PuertoBalanza,@EstadoBalanza )

	end
	end

GO
/****** Object:  StoredProcedure [dbo].[insertar_clientes]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_clientes]
@Nombre As varchar(MAX),
@Direccion_para_factura As varchar(MAX),
@RFC As varchar(MAX),
@movil As varchar(MAX),
@Estado As varchar(50),
@Saldo As numeric(18,2)
As
if EXISTS(select Nombre  from clientes  where Nombre=@Nombre )
RAISERROR('Registro ya existente', 16,1)
else
INSERT INTO clientes
Values (
@Nombre,
@Direccion_para_factura,
@RFC,
@movil,
@Estado,
@Saldo)
GO
/****** Object:  StoredProcedure [dbo].[insertar_Compras]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_Compras]
@Idcaja int,
@fechacompra As datetime,
@Estado varchar(50),
/*Parametros de detallecompras*/
@Cantidad As numeric(18,2),
@Costo As numeric(18,2),
@Moneda As varchar(50),
@IdProducto As int,
@Descripcion As varchar(MAX)
as
/*Parametros de compras*/
declare @Total As numeric(18,2)
declare @Comprobante As varchar(MAX)
declare @IdProveedor As int
set @Total=0
set @Comprobante='-'
set @IdProveedor = (select IdProveedor  from Proveedores where Estado='0')
/*Parametros de detallecompra*/
declare @IdCompra As int

if (@Estado = 'COMPRA NUEVA')
INSERT INTO Compras
Values (
@fechacompra,
@Total,
@Comprobante,
@IdProveedor,
@Idcaja)
select  @IdCompra = scope_identity()


 
if(@Estado = 'COMPRA GENERADA')
set @IdCompra = (select top 1 Max(Idcompra) from Compras where Idcaja=@Idcaja)
if EXISTS (SELECT IdProducto,IdCompra   FROM DetalleCompra 
inner join Producto1 on Producto1.Id_Producto1=DetalleCompra.IdProducto 
  where Producto1.Id_Producto1  = @IdProducto AND IdCompra=@IdCompra  ) 
update DetalleCompra set 
cantidad =cantidad +@cantidad
where IdProducto =@IdProducto and IdCompra=@IdCompra
else
INSERT INTO DetalleCompra
Values (
@IdCompra,
@Cantidad,
@Costo,
@Moneda,
@IdProducto,
@Descripcion)

GO
/****** Object:  StoredProcedure [dbo].[insertar_Conceptos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_Conceptos]
@Descripcion As varchar(MAX)
As
if Exists(select Descripcion  from Conceptos where Descripcion =@Descripcion  )
Raiserror('Concepto ya registrado',16,1 )
else
INSERT INTO Conceptos
Values (
@Descripcion)





GO
/****** Object:  StoredProcedure [dbo].[insertar_ControlCobros]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_ControlCobros]
@Monto As numeric(18,2),
@Fecha As datetime,
@Detalle As varchar(MAX),
@idCliente As int,
@idUsusario As int,
@idCaja As int,
@Comprobante As varchar(MAX),
@efectivo numeric(18,2),
@tarjeta numeric(18,2)

As
INSERT INTO ControlCobros
Values (
@Monto,
@Fecha,
@Detalle,
@idCliente,
@idUsusario,
@idCaja,
@Comprobante,
@efectivo,
@tarjeta)
GO
/****** Object:  StoredProcedure [dbo].[insertar_CreditoPorCobrar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_CreditoPorCobrar]
@Descripcion As varchar(MAX),
@Fecha_registro As datetime,
@Fecha_vencimiento As date,
@Total As numeric(18,2),
@Saldo As numeric(18,2),
@Estado As varchar(MAX),
@Id_caja As int,
@Id_cliente As int
As
INSERT INTO CreditoPorCobrar
Values (
@Descripcion,
@Fecha_registro,
@Fecha_vencimiento,
@Total,
@Saldo,
@Estado,
@Id_caja,
@Id_cliente)





GO
/****** Object:  StoredProcedure [dbo].[insertar_CreditoPorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_CreditoPorPagar]
@Descripcion As varchar(MAX),
@Fecha_registro As datetime,
@Fecha_vencimiento As date,
@Total As numeric(18,2),
@Saldo As numeric(18,2),
@Estado As varchar(MAX),
@Id_caja As int,
@Id_Proveedor As int
As
INSERT INTO CreditoPorPagar
Values (
@Descripcion,
@Fecha_registro,
@Fecha_vencimiento,
@Total,
@Saldo,
@Estado,
@Id_caja,
@Id_Proveedor)






GO
/****** Object:  StoredProcedure [dbo].[insertar_DETALLE_cierre_de_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_DETALLE_cierre_de_caja]
	@fechaini datetime,
	 @fechafin datetime,
	 @fechacierre datetime, 
	  @ingresos numeric(18,2), 
    @egresos numeric(18,2),
	@saldo numeric(18,2),
	@idusuario int,
	 @totalcaluclado numeric(18,2),
	  @totalreal numeric(18,2), 
	 
	 @estado as varchar(50),
	 @diferencia as numeric(18,2)	,
	 @id_caja as int   
  AS BEGIN

if EXISTS (SELECT Estado FROM MOVIMIENTOCAJACIERRE 
 where  MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA')
RAISERROR ('Ya Fue Iniciado el Turno de esta Caja', 16,1)
else
BEGIN
    INSERT INTO MOVIMIENTOCAJACIERRE values 
	(@fechaini ,
	 @fechafin ,
	 @fechacierre , 
	  @ingresos , 
    @egresos ,
	@saldo ,
	@idusuario ,
	 @totalcaluclado ,
	  @totalreal , 
	
	 @estado ,
	 @diferencia ,
	 @id_caja )


	 end
	 end












GO
/****** Object:  StoredProcedure [dbo].[insertar_detalle_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_detalle_venta]

@idventa as integer,
@id_presentacionfraccionada as int,
@cantidad as numeric(18,2),
@preciounitario as numeric(18,2),
@moneda as varchar(50),

@unidades as varchar(50),
@cantidad_mostrada as numeric(18,2),
@Estado as varchar(50),
@Descripcion varchar(50),
@Codigo varchar(50),
@Stock varchar(50),
@Se_vende_a varchar(50),
@Usa_inventarios varchar(50),
@Costo numeric(18,2)
as
begin
if exists (select id_producto, idventa from detalle_venta
inner join Producto1 on Producto1.Id_Producto1=detalle_venta.id_producto
where Producto1.Id_Producto1=@id_presentacionfraccionada and idventa=@idventa)

update detalle_venta set
cantidad = cantidad+@cantidad,
cantidad_mostrada=cantidad_mostrada+@cantidad_mostrada
where id_producto=@id_presentacionfraccionada

else
begin
insert into detalle_venta

values(@idventa,@id_presentacionfraccionada,@cantidad,@preciounitario,@moneda,@unidades,@cantidad_mostrada,
@Estado,@Descripcion,@Codigo,@Stock,@Se_vende_a,@Usa_inventarios,@Costo)

end
end








GO
/****** Object:  StoredProcedure [dbo].[insertar_Empresa]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[insertar_Empresa]

@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),

@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),
@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50),
@Ultima_fecha_de_copia_de_seguridad varchar(50),

@Ultima_fecha_de_copia_date datetime,
@Frecuencia_de_copias int,
@Estado varchar(50),
@Tipo_de_empresa varchar(50),
@Pais varchar(max),
@Redondeo_de_total varchar(50)
as 
 BEGIN
if EXISTS (SELECT Nombre_Empresa   FROM EMPRESA   where Nombre_Empresa  = @Nombre_Empresa   )
RAISERROR ('YA EXISTE UNA EMPRESA CON ESE NOMBRE, Ingrese un nombre diferente', 16,1)
else
BEGIN
insert into EMPRESA  
values (@Nombre_Empresa,@logo,@Impuesto,@Porcentaje_impuesto,@Moneda ,@Trabajas_con_impuestos,@Modo_de_busqueda,
@Carpeta_para_copias_de_seguridad,@Correo_para_envio_de_reportes,@Ultima_fecha_de_copia_de_seguridad,
@Ultima_fecha_de_copia_date ,
@Frecuencia_de_copias ,
@Estado ,@Tipo_de_empresa,@Pais,@Redondeo_de_total)

END
END










GO
/****** Object:  StoredProcedure [dbo].[Insertar_FORMATO_TICKET]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_FORMATO_TICKET]

  
	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto as varchar(max)
	  
    as
	 DECLARE @Id_Empresa int  = (Select Id_empresa from EMPRESA )
    INSERT INTO Ticket values 

	(  
	@Id_Empresa ,
	  @Identificador_fiscal ,
           @Direccion,
         
           @Provincia_Departamento_Pais,
           @Nombre_de_Moneda ,
           @Agradecimiento ,
           @pagina_Web_Facebook ,
           @Anuncio,
	   @Datos_fiscales_de_autorizacion,
	   @Por_defecto )











GO
/****** Object:  StoredProcedure [dbo].[insertar_Gastos_varios]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_Gastos_varios]
@Fecha As datetime,
@Nro_comprobante As varchar(5),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int,
@Id_concepto As int
As
INSERT INTO Gastos_varios
Values (
@Fecha,
@Nro_comprobante,
@Tipo_comprobante,
@Importe,
@Descripcion,
@Id_caja,
@Id_concepto)





GO
/****** Object:  StoredProcedure [dbo].[insertar_Grupo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Grupo]
@Grupo varchar(50),
@Por_defecto varchar(50)
as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
insert into Grupo_de_Productos  values (@Grupo, @Por_defecto)











GO
/****** Object:  StoredProcedure [dbo].[insertar_Ingresos_varios]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_Ingresos_varios]
@Fecha As datetime,
@Nro_comprobante As varchar(MAX),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int
As
INSERT INTO Ingresos_varios
Values (
@Fecha,
@Nro_comprobante,
@Tipo_comprobante,
@Importe,
@Descripcion,
@Id_caja)





GO
/****** Object:  StoredProcedure [dbo].[insertar_inicio_De_sesion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max)

  as
  declare @id_usuario_nuevo as int
  set @id_usuario_nuevo = (SELECT idUsuario  FROM USUARIO2  )

insert into Inicios_de_sesion_por_caja

values (@Id_serial_Pc,@id_usuario_nuevo )









GO
/****** Object:  StoredProcedure [dbo].[insertar_KARDEX_entrada]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertar_KARDEX_entrada]
           @Fecha datetime,
		   @Motivo varchar(max),
		   @Cantidad as numeric(18,2),
		   @Id_producto int	,
	       @Id_usuario as int,
		   @Tipo as varchar(50),
		    @Estado varchar(50),
			@Id_caja int
			as
			declare @Hay as numeric(18,2)
			declare @Habia as numeric(18,2)
			declare @Costo_unt numeric(18,2)
			set @Hay = (select Stock  from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Costo_unt=(select Precio_de_compra   from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Habia = @Hay-@Cantidad 

			insert into KARDEX 
			Values(
			 @Fecha ,
		     @Motivo ,			         
             @Cantidad 	,
	         @Id_producto 	,
	         @Id_usuario ,	
	         @Tipo,
		     @Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
GO
/****** Object:  StoredProcedure [dbo].[insertar_KARDEX_SALIDA]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_KARDEX_SALIDA]
           @Fecha datetime,
		   @Motivo varchar(max),
		   @Cantidad as numeric(18,2),
		   @Id_producto int	,
	       @Id_usuario as int,
		   @Tipo as varchar(50),
		    @Estado varchar(50),
			@Id_caja int
			as
			declare @Hay as numeric(18,2)
			declare @Habia as numeric(18,2)
			declare @Costo_unt numeric(18,2)
			set @Hay = (select Stock  from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Costo_unt=(select Precio_de_compra   from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Habia = @Hay+@Cantidad 

			insert into KARDEX 
			Values(
			 @Fecha ,
		     @Motivo ,			         
             @Cantidad 	,
	         @Id_producto 	,
	         @Id_usuario ,	
	         @Tipo,
		     @Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)

	





GO
/****** Object:  StoredProcedure [dbo].[Insertar_marcan]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_marcan]

	
	@s varchar(MAX),
	@f varchar(MAX),
	@e varchar(MAX),
	@fa varchar(MAX)
    as
	
    INSERT INTO Marcan values 
	(@s,@f,@e ,@fa)










GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(MAX),
		    @Imagen varchar(50),			         
         
          @Id_grupo as int	,
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where Descripcion = @Descripcion and Codigo=@Codigo  )
RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE/CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'
		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
END
END
GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto_Importacion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto_Importacion]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
     
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		    declare    @Id_grupo as int	
			set @Id_grupo= (Select Idline  from Grupo_de_Productos where Grupo_de_Productos.Linea= 'General')
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
		
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion = @Descripcion and Codigo=@Codigo) or Descripcion ='' )
select top 0 *from Producto1
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'

		   

		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
		begin
		update Producto1 set Codigo=Id_Producto1 
		where Codigo = 'VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='Descripcion'
		end

END
END












GO
/****** Object:  StoredProcedure [dbo].[insertar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_Proveedores]
@Nombre As varchar(MAX),
@Direccion As varchar(MAX),
@IdentificadorFiscal As varchar(MAX),
@Celular As varchar(MAX),
@Estado As varchar(50),
@Saldo As numeric(18,2)
As
if EXISTS(select Nombre  from Proveedores where Nombre=@Nombre )
RAISERROR('Registro ya existente', 16,1)
else
INSERT INTO Proveedores
Values (
@Nombre,
@Direccion,
@IdentificadorFiscal,
@Celular,
@Estado,
@Saldo)





GO
/****** Object:  StoredProcedure [dbo].[insertar_Serializacion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Serializacion]

@Serie varchar (50),
@numeroinicio as varchar (50),
@numerofin as varchar (50),
@Destino as varchar(50),
@tipodoc varchar(50)
,@Por_defecto varchar(50)
as BEGIN
if EXISTS (SELECT tipodoc  FROM Serializacion  where  tipodoc= @tipodoc )
RAISERROR ('YA EXISTE ESTE COMPROBANTE INGRESE UNO NUEVO', 16,1)
else
BEGIN
insert into Serializacion  values (@Serie ,
@numeroinicio ,
@numerofin,@Destino ,@tipodoc ,@Por_defecto)

END
END










GO
/****** Object:  StoredProcedure [dbo].[insertar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_usuario]
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max),
@Estado varchar(50)
as
if exists (select Login FROM USUARIO2 where Login=@Login and Estado='ACTIVO')
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )
ELSE

insert into USUARIO2 
values(@nombres,@Login,@Password,@Icono,@Nombre_de_icono,@Correo,@Rol,@Estado  )











GO
/****** Object:  StoredProcedure [dbo].[insertar_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertar_venta]
@idcliente as integer,
@fecha_venta as datetime,

@nume_documento as varchar(50),
@montototal  as numeric(18,2),
@Tipo_de_pago as varchar(50),
@estado as varchar(50),
@IGV as numeric(18, 1),

@Comprobante as VARCHAR(50),
@id_usuario as int,
@Fecha_de_pago as varchar(50),
@ACCION VARCHAR(50),
@Saldo numeric(18,2),
@Pago_con numeric(18,2),
@Porcentaje_IGV numeric(18,2),
@Id_caja int,
@Referencia_tarjeta varchar(50)

as 
declare @vuelto numeric(18,2)
declare @Efectivo numeric(18,2)
declare @id_numero varchar(50)
declare @Credito numeric(18,2)
declare @Tarjeta numeric(18,2)
SET @vuelto =0
SET @Efectivo =0
SET @id_numero= (select max(idventa)+1 from ventas )
SET @Credito =0
SET @Tarjeta =0
insert into ventas 
values (@idcliente,@fecha_venta,@nume_documento ,@montototal ,@Tipo_de_pago,@estado ,@IGV 
,@Comprobante +' '+ @id_numero ,@id_usuario,@Fecha_de_pago,@ACCION ,@Saldo,@Pago_con,@Porcentaje_IGV,
@Id_caja,@Referencia_tarjeta,
@vuelto ,@Efectivo,@Credito,@Tarjeta )








GO
/****** Object:  StoredProcedure [dbo].[insertarCorreoBase]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertarCorreoBase]
@Correo varchar(max),
@Password varchar(max),
@Estado_De_envio varchar(50)
as
Insert into CorreoBase values(@Correo,@Password,@Estado_De_envio)


GO
/****** Object:  StoredProcedure [dbo].[MarcanVencidas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[MarcanVencidas]
@E varchar(max)
as
update Marcan set E=@E
GO
/****** Object:  StoredProcedure [dbo].[mostrar_Caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[mostrar_Caja]
As
Select * FROM Caja

GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_principal]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Mostrar_caja_principal]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='PRINCIPAL' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos  ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario 
where Caja.tipo='PRINCIPAL' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos, Caja.PuertoBalanza , Caja.EstadoBalanza 

else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='PRINCIPAL' and USUARIO2.Login  ='admin'

GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_remota]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Mostrar_caja_remota]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='SECUNDARIA' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos   ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario 
where Caja.tipo='SECUNDARIA' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos ,Caja.PuertoBalanza , Caja.EstadoBalanza
else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='SECUNDARIA' and USUARIO2.Login  ='admin'













GO
/****** Object:  StoredProcedure [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc  [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]
@Serial as varchar(max)
as
select Id_Caja  ,Descripcion 
from Caja 
where Serial_PC =@Serial





GO
/****** Object:  StoredProcedure [dbo].[mostrar_cierre_de_caja_pendiente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_cierre_de_caja_pendiente]
@idcaja int
as
select Id_caja,fechainicio,Saldo_queda_en_caja as SaldoInicial from MOVIMIENTOCAJACIERRE 
where Id_caja=@idcaja and Estado='CAJA APERTURADA'






GO
/****** Object:  StoredProcedure [dbo].[mostrar_clientes]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_clientes]
As
SELECT        idclientev , Nombre,Direccion_para_factura , RFC as [RFC] , movil, Estado, Saldo
FROM            dbo.clientes where Nombre&lt;&gt;'GENERICO'



GO
/****** Object:  StoredProcedure [dbo].[mostrar_ControlCobros]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[mostrar_ControlCobros]
As
Select * FROM ControlCobros


GO
/****** Object:  StoredProcedure [dbo].[mostrar_descripcion_produco_sin_repetir]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_descripcion_produco_sin_repetir]

@buscar varchar(50)
as begin
select TOP 10 Descripcion  from Producto1  Where Descripcion  LIKE  '%' + @buscar +'%'
end










GO
/****** Object:  StoredProcedure [dbo].[mostrar_DetalleCompra]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_DetalleCompra]
@Idcompra int
As

Select IdDetallecompra,IdCompra,Producto1.Id_Producto1,Producto1.Descripcion,Cantidad,
Costo,convert(numeric(18,2), Total) as Total,Producto1.Se_vende_a,Producto1.Usa_inventarios
FROM DetalleCompra
inner join Producto1 on Producto1.Id_Producto1=DetalleCompra.IdProducto
where IdCompra=@Idcompra 

GO
/****** Object:  StoredProcedure [dbo].[mostrar_Empresa]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_Empresa]
as
select LOGO, Nombre_Empresa as Empresa ,(Impuesto + ' ('+  CONVERT(VARCHAR(50),Porcentaje_impuesto) + ')') Impuesto 
,Moneda  ,Id_empresa  
,Porcentaje_impuesto  ,Impuesto ,Modo_de_busqueda ,Trabajas_con_impuestos ,Trabajas_con_impuestos,
Correo_para_envio_de_reportes,
Carpeta_para_copias_de_seguridad, Redondeo_de_total  , Pais 
from Empresa








GO
/****** Object:  StoredProcedure [dbo].[Mostrar_formato_ticket]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Mostrar_formato_ticket]
as
select EMPRESA.Logo,Empresa.Nombre_Empresa ,Ticket.*  from Ticket 
INNER JOIN EMPRESA ON EMPRESA.Id_empresa=Ticket.Id_Empresa 









GO
/****** Object:  StoredProcedure [dbo].[mostrar_gastos_por_turnos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  proc [dbo].[mostrar_gastos_por_turnos]
@idcaja int,
@fi as datetime,
@ff as datetime
as
SELECT        dbo.Gastos_varios.Id_gasto, dbo.Gastos_varios.Fecha, dbo.Conceptos.Descripcion Concepto,
dbo.Gastos_varios.Descripcion , dbo.Gastos_varios.Importe
FROM            dbo.Conceptos INNER JOIN
                         dbo.Gastos_varios ON dbo.Conceptos.Id_concepto = dbo.Gastos_varios.Id_concepto
						 where Gastos_varios.Id_caja = @idcaja and (Fecha &gt;=@fi and Fecha &lt;=@ff)









GO
/****** Object:  StoredProcedure [dbo].[mostrar_grupos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_grupos]

@buscar varchar(50)
as begin
select Idline,Linea  as Grupo from Grupo_de_Productos  Where Linea  LIKE  '%' + @buscar +'%'
end










GO
/****** Object:  StoredProcedure [dbo].[mostrar_id_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_id_caja]
@idCaja int
as
select Id_Caja from Caja
where Id_Caja=@idCaja
GO
/****** Object:  StoredProcedure [dbo].[mostrar_id_venta_po_Id_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_id_venta_po_Id_caja]
@Id_caja int
as
select MAX(idventa)from ventas
where id_caja=@Id_caja








GO
/****** Object:  StoredProcedure [dbo].[mostrar_impresoras_por_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_impresoras_por_caja]
@Serial as varchar(max)
as
select Impresora_Ticket 
from Caja 
where Serial_PC =@Serial








GO
/****** Object:  StoredProcedure [dbo].[mostrar_ingresos_por_turnos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_ingresos_por_turnos]
@idcaja int,
@fi as datetime,
@ff as datetime
as
SELECT        Id_ingreso , Fecha,
Descripcion ,Importe
FROM   Ingresos_varios          

where Id_caja = @idcaja and (Fecha &gt;=@fi and Fecha &lt;=@ff)





GO
/****** Object:  StoredProcedure [dbo].[mostrar_inicio_De_sesion]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_inicio_De_sesion]
 
  @id_serial_pc as varchar(max)
  as
select  Inicios_de_sesion_por_caja.Id_usuario ,USUARIO2.Nombres_y_Apellidos  
from Inicios_de_sesion_por_caja inner join 
USUARIO2 on USUARIO2.idUsuario=Inicios_de_sesion_por_caja.Id_usuario 

where Id_serial_Pc =@id_serial_pc 


GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_Inventarios_bajo_minimo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[MOSTRAR_Inventarios_bajo_minimo]
AS
select  Codigo,Descripcion,Precio_de_compra AS [Precio_de_Compra],Grupo_de_Productos. linea as Categoria,
 Stock ,Stock_minimo as [Stock_Minimo],Grupo_de_Productos. linea,EMPRESA.Nombre_Empresa,EMPRESA.Logo  
 from Producto1 cross join EMPRESA
				inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
				where Stock &lt;= Stock_minimo 	and Usa_inventarios ='SI'










GO
/****** Object:  StoredProcedure [dbo].[mostrar_inventarios_todos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_inventarios_todos]

@letra varchar(50)
AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
where Descripcion+Codigo   LIKE  '%' + @letra+'%' AND Producto1.Usa_inventarios ='SI'










GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]

@serial varchar(max)

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos     FROM MOVIMIENTOCAJACIERRE 
inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' 





GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]

@serial varchar(50),
@idusuario int

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos    FROM MOVIMIENTOCAJACIERRE inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' and MOVIMIENTOCAJACIERRE.Id_usuario =@idusuario and USUARIO2.Estado ='ACTIVO'












GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]

@idProducto int
AS
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Cantidad ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay  as Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos .linea as Categoria, KARDEX.Costo_unt , KARDEX.Total 
,Grupo_de_Productos .linea ,EMPRESA.Nombre_Empresa,EMPRESA.Logo ,Producto1.Stock,convert(numeric(18,2), Producto1.Stock * KARDEX.Costo_unt) as TotalInventario
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
             cross join EMPRESA
			 inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
			where    Producto1.Id_Producto1=@idProducto
			
			 order by KARDEX.Id_kardex  Desc 













GO
/****** Object:  StoredProcedure [dbo].[mostrar_notas_por_alumno]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  proc [dbo].[mostrar_notas_por_alumno]
@Id_alumno int
AS
 Select dbo.NOTAS.*, dbo.Alumnos.Nombres +' ' + dbo.Alumnos.Apellido_Paterno + ' ' + Apellido_Materno  , dbo.Alumnos.Nombres, dbo.Alumnos.Codigo
 from NOTAS inner join Alumnos on Alumnos.idalumno =NOTAS.Id_alumno 
 
where NOTAS.Id_alumno =@Id_alumno  order by NOTAS.Id_notas  desc















GO
/****** Object:  StoredProcedure [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]
@idusuario int
as 
select 
USUARIO2.Rol 
from USUARIO2 
where USUARIO2.idUsuario =@idusuario and USUARIO2.Estado ='ACTIVO'





GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_agregados_a_venta]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_agregados_a_venta]
@idventa as int
as
select detalle_venta.Codigo,(detalle_venta.Descripcion) as Producto,
detalle_venta.Cantidad_mostrada as cant,
detalle_venta.preciounitario as P_Unit,
CONVERT(numeric(18,2), detalle_venta.Total_a_pagar) as Importe,
detalle_venta.Id_producto, detalle_venta.iddetalle_venta, ventas.Estado,
detalle_venta.Stock, detalle_venta.cantidad, ventas.idclientev,
detalle_venta.Stock, detalle_venta.Stock, Usa_inventarios,
Se_vende_a, detalle_venta.idventa
from detalle_venta inner join ventas on detalle_venta.idventa = ventas.idventa
where detalle_venta.idventa=@idventa and detalle_venta.cantidad &gt;0 order by
detalle_venta.iddetalle_venta desc








GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_agregados_a_ventas_en_espera]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_agregados_a_ventas_en_espera]
@idventa int
as
SELECT dbo.detalle_venta.Descripcion as Producto, dbo.detalle_venta.Cantidad_mostrada as Cant, dbo.detalle_venta.preciounitario as [P Unit], dbo.detalle_venta.Total_a_pagar as Importe
FROM  dbo.ventas INNER JOIN
         dbo.detalle_venta ON dbo.ventas.idventa = dbo.detalle_venta.idventa
		 where detalle_venta.idventa=@idventa and detalle_venta.cantidad&gt;0





GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_vencidos]
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 













GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]

as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,(datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1)as [Dias a Vencer] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &gt; CONVERT(DATE,GETDATE ()) and (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) &lt;=30
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) asc










GO
/****** Object:  StoredProcedure [dbo].[mostrar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_Proveedores]
As
SELECT        IdProveedor, Nombre, Direccion, IdentificadorFiscal as [Identificador Fiscal] , Celular, Estado, Saldo
FROM            dbo.Proveedores





GO
/****** Object:  StoredProcedure [dbo].[mostrar_stock_de_detalle_de_ventas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_stock_de_detalle_de_ventas]
@Id_producto int
as
select detalle_venta.Stock,detalle_venta.Descripcion from ventas 
inner join detalle_venta on detalle_venta.idventa=ventas.idventa
where ventas.Estado ='EN ESPERA' and detalle_venta.Id_producto=@Id_producto and detalle_venta.Usa_inventarios='SI'








GO
/****** Object:  StoredProcedure [dbo].[mostrar_ticket_impreso]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_ticket_impreso]
@Id_venta int,
@total_en_letras varchar(50)
as
declare @cantidad_de_productos int
set @cantidad_de_productos = (select SUM (cantidad ) from detalle_venta inner join ventas on ventas.idventa = detalle_venta.idventa 
where detalle_venta .idventa = @Id_venta  )

select detalle_venta.Descripcion as Producto , detalle_venta.Cantidad_mostrada as Cant,
detalle_venta.preciounitario as P_Unit , detalle_venta.Total_a_pagar as Importe,
EMPRESA.Nombre_Empresa as Empresa, EMPRESA.Logo, Ticket.*,ventas.fecha_venta as fecha,
(EMPRESA.Impuesto + '(' + convert(varchar(50),ventas.Porcentaje_IGV ) + '%):') as Impuesto
 ,((ventas.Monto_total*ventas.Porcentaje_IGV)/100) as Subtotal_Impuesto,ventas.Monto_total ,
 USUARIO2.Nombres_y_Apellidos as Usuario, ventas.Pago_con , ventas.Vuelto ,EMPRESA .Moneda  ,
 clientes.Nombre ,ventas.Tipo_de_pago , @cantidad_de_productos as Cantidad_de_productos,@total_en_letras
 as total_en_letras, ventas.Comprobante , ventas.Numero_de_doc
 from detalle_venta inner join ventas  on ventas.idventa = detalle_venta.idventa 
inner join USUARIO2 on USUARIO2.idUsuario = ventas.Id_usuario 
inner join clientes on clientes .idclientev= ventas.idclientev
cross join EMPRESA 
cross join Ticket

where detalle_venta.idventa= @Id_venta and ventas.Monto_total &gt;0 order by detalle_venta.iddetalle_venta desc  










GO
/****** Object:  StoredProcedure [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]
as

SELECT       dbo.Serializacion.Serie ,dbo.Serializacion.Cantidad_de_numeros , dbo.Serializacion.numerofin ,dbo.Serializacion.Id_serializacion ,(dbo.Serializacion.Serie  +' - '+ dbo.Serializacion.Cantidad_de_numeros + dbo.Serializacion.numerofin) as serie_completa,Serializacion.tipodoc  AS COMPROBANTE
,Por_defecto 
FROM            dbo.Serializacion where destino='VENTAS' OR destino='OTROS'








GO
/****** Object:  StoredProcedure [dbo].[mostrar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_usuario]
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2 Where Estado='ACTIVO'












GO
/****** Object:  StoredProcedure [dbo].[mostrar_ventas_en_efectivo_por_turno]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_ventas_en_efectivo_por_turno]
@idcaja int, 
@fi datetime,
@ff datetime
as
select sum(Efectivo) from ventas 
where (fecha_venta &gt;=@fi and fecha_venta &lt;=@ff) and Id_caja=@idcaja 



GO
/****** Object:  StoredProcedure [dbo].[mostrar_ventas_en_espera_con_fecha_y_monto]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_ventas_en_espera_con_fecha_y_monto]
as
select idventa,Comprobante,fecha_venta,Id_caja  from ventas 
where Estado='EN ESPERA'





GO
/****** Object:  StoredProcedure [dbo].[mostrarEstadosCuentaCliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrarEstadosCuentaCliente]
@idcliente int
as
SELECT dbo.detalle_venta.Descripcion, dbo.detalle_venta.Cantidad_mostrada, dbo.detalle_venta.preciounitario, dbo.ventas.Credito, dbo.ventas.Estado
FROM  dbo.detalle_venta INNER JOIN
         dbo.ventas ON dbo.detalle_venta.idventa = dbo.ventas.idventa
		 
		 where ventas.idclientev=@idcliente and ventas.Credito &gt;0  
GO
/****** Object:  StoredProcedure [dbo].[mostrarPmasVendidos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrarPmasVendidos]
as
select top 5 sum(detalle_venta.cantidad)as Cantidad, Producto1.Descripcion
from detalle_venta inner join Producto1 on Producto1.Id_Producto1=detalle_venta.Id_producto

group by Producto1.Descripcion
GO
/****** Object:  StoredProcedure [dbo].[mostrarPuertos]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrarPuertos]
@idcaja int
as
select PuertoBalanza,EstadoBalanza from Caja 
where Id_Caja=@idcaja
GO
/****** Object:  StoredProcedure [dbo].[mostrarTemaCaja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrarTemaCaja]
@idCaja int
as
select Tema from Caja
where Id_Caja=@idCaja
GO
/****** Object:  StoredProcedure [dbo].[MostrarUltimoIdcompra]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[MostrarUltimoIdcompra]
@Idcaja int
as
select max(Idcompra) from Compras 
where Idcaja =@Idcaja 
GO
/****** Object:  StoredProcedure [dbo].[mostrarVentasGrafica]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrarVentasGrafica]
as
declare @anio int
set @anio =DATEPART (YEAR, GETDATE())
select ( DATENAME(MONTH, fecha_venta)+' ' + datename(year, fecha_venta)) as Fecha
, sum(Monto_total)as Total
from ventas
where DATEPART (YEAR, fecha_venta)=@anio
group by DATENAME(MONTH,fecha_venta), DATENAME(year, fecha_venta)
GO
/****** Object:  StoredProcedure [dbo].[mostrarVentasGraficaFechas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrarVentasGraficaFechas]
@fi date,
@ff date
as
select (datename(MONTH, fecha_venta) + ' ' + datename(YEAR,fecha_venta )) as fecha
,sum(Monto_total) as Total
from ventas 
where convert(date,fecha_venta)&gt;=@fi and CONVERT(date,fecha_venta)&lt;=@ff
group by datename(MONTH , fecha_venta), DATENAME (YEAR ,fecha_venta )
GO
/****** Object:  StoredProcedure [dbo].[ReporteCuentasPorCobrar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteCuentasPorCobrar]
as
select Nombre,movil, Saldo  from clientes 
where Saldo &gt; 0
GO
/****** Object:  StoredProcedure [dbo].[ReporteCuentasPorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteCuentasPorPagar]
as
select Nombre,Celular, Saldo  from Proveedores
where Saldo &gt; 0
GO
/****** Object:  StoredProcedure [dbo].[ReporteGanacias]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteGanacias]
as
select Convert(numeric(18,2), sum(Ganancia)) from detalle_venta
GO
/****** Object:  StoredProcedure [dbo].[ReporteGananciasFecha]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteGananciasFecha]
@fi date,
@ff date
as
select convert(numeric(18,2), sum(Ganancia )) from detalle_venta   
inner join ventas on ventas.idventa  = detalle_venta.idventa  
where CONVERT (date,fecha_venta)&gt;=@fi and CONVERT(date,fecha_venta)&lt;=@ff
GO
/****** Object:  StoredProcedure [dbo].[ReporteGastosAnioCombo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteGastosAnioCombo]

as
set Nocount On;
select Distinct DATEPART (year,Fecha) as anio from Gastos_varios 
GO
/****** Object:  StoredProcedure [dbo].[ReporteGastosAnioGrafica]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteGastosAnioGrafica]
@anio as int 
as
select top 5  Conceptos.Descripcion, sum (Gastos_varios.Importe) as Monto
from Gastos_varios inner join Conceptos on Conceptos.Id_concepto= Gastos_varios.Id_concepto
where DATEPART(YEAR, Fecha)=@anio
group by Conceptos.Descripcion
order by sum (Importe) desc
GO
/****** Object:  StoredProcedure [dbo].[ReporteGastosAnioMesGrafica]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteGastosAnioMesGrafica]
@anio as int, 
@mes as varchar(50)
as
select top 5  Conceptos.Descripcion, sum (Gastos_varios.Importe) as Monto
from Gastos_varios inner join Conceptos on Conceptos.Id_concepto= Gastos_varios.Id_concepto
where DATEPART(YEAR, Fecha)=@anio and  DATENAME(MONTH, Fecha)=@mes
group by Conceptos.Descripcion
order by sum (Importe) desc
GO
/****** Object:  StoredProcedure [dbo].[ReporteGastosAniosCombo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteGastosAniosCombo]
as
set Nocount on;
select Distinct DATEPART(year,Fecha)as anio from Gastos_varios
GO
/****** Object:  StoredProcedure [dbo].[ReporteGastosMesCombo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteGastosMesCombo]
@anio int
as
set Nocount on;
select Distinct DATENAME(MONTH,Fecha)as mes from Gastos_varios
where datepart(year, Fecha)=@anio
GO
/****** Object:  StoredProcedure [dbo].[ReportePorCobrar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReportePorCobrar]
as
select sum(Saldo) from clientes 
GO
/****** Object:  StoredProcedure [dbo].[ReportePorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReportePorPagar]
as
select sum(Saldo) from Proveedores
GO
/****** Object:  StoredProcedure [dbo].[ReporteProductoBajoMinimo]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteProductoBajoMinimo]
as
select count(Id_Producto1)  from Producto1
where Stock&lt;=Stock_minimo and Usa_inventarios ='SI'
GO
/****** Object:  StoredProcedure [dbo].[ReporteResumenVentasEmpleadoFechas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteResumenVentasEmpleadoFechas]
@idEmpleado int,
@fi date,
@ff date
as

select convert(date, ventas.fecha_venta) as fecha_venta, sum(ventas.Monto_total) as Monto,
sum(detalle_venta.Costo * detalle_venta.cantidad ) as Costo,
sum(detalle_venta.Ganancia) as Ganancia, @fi as fi, @ff as ff,USUARIO2.Nombres_y_Apellidos as Empleado
from ventas inner join detalle_venta on detalle_venta.idventa = ventas.idventa
inner join USUARIO2 on USUARIO2.idUsuario = ventas.Id_usuario
Where ventas.Monto_total &gt;0 and ventas.Id_usuario = @idEmpleado and 
(convert(date,ventas.fecha_venta)&gt;=@fi and convert(date,ventas.fecha_venta)&lt;=@ff)

group by convert(date, ventas.fecha_venta),USUARIO2.Nombres_y_Apellidos
GO
/****** Object:  StoredProcedure [dbo].[ReporteResumenVentasFechas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteResumenVentasFechas]
@fi date,
@ff date
as
declare @empleado varchar(50)
set @empleado = 'Todos'
select convert(date, ventas.fecha_venta) as fecha_venta, sum(ventas.Monto_total) as Monto,
sum(detalle_venta.Costo * detalle_venta.cantidad ) as Costo,
sum(detalle_venta.Ganancia) as Ganancia, @fi as fi, @ff as ff,@empleado as Empleado
from ventas inner join detalle_venta on detalle_venta.idventa = ventas.idventa
Where ventas.Monto_total &gt;0 and (convert(date,ventas.fecha_venta)&gt;=@fi and convert(date,ventas.fecha_venta)&lt;=@ff)

group by convert(date, ventas.fecha_venta)
GO
/****** Object:  StoredProcedure [dbo].[ReporteResumenVentasHoy]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteResumenVentasHoy]
as
declare @fi as varchar(50)
set @fi = 'Siempre'
declare @ff as varchar(50)
set @ff= Convert(varchar(50), GetDate())
declare @empleado varchar(50)
set @empleado = 'Todos'

select convert(date, ventas.fecha_venta) as fecha_venta, sum(ventas.Monto_total) as Monto,
sum(detalle_venta.Costo * detalle_venta.cantidad ) as Costo,
sum(detalle_venta.Ganancia) as Ganancia, @fi as fi, @ff as ff, @empleado as Empleado
from ventas inner join detalle_venta on detalle_venta.idventa = ventas.idventa
Where ventas.Monto_total &gt;0

group by convert(date, ventas.fecha_venta)
GO
/****** Object:  StoredProcedure [dbo].[ReporteResumenVentasHoyEmpleado]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteResumenVentasHoyEmpleado]
@idEmpleado int
as

declare @fi as varchar(50)
set @fi = 'Siempre'
declare @ff as varchar(50)
set @ff= Convert(varchar(50), GetDate())

select convert(date, ventas.fecha_venta) as fecha_venta, sum(ventas.Monto_total) as Monto,
sum(detalle_venta.Costo * detalle_venta.cantidad ) as Costo,
sum(detalle_venta.Ganancia) as Ganancia, @fi as fi, @ff as ff,USUARIO2.Nombres_y_Apellidos as Empleado
from ventas inner join detalle_venta on detalle_venta.idventa = ventas.idventa
inner join USUARIO2 on USUARIO2.idUsuario = ventas.Id_usuario
Where ventas.Monto_total &gt;0 and ventas.Id_usuario = @idEmpleado 

group by convert(date, ventas.fecha_venta),USUARIO2.Nombres_y_Apellidos
GO
/****** Object:  StoredProcedure [dbo].[ReporteTotalVentas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ReporteTotalVentas]
as
select sum( Monto_total) FROM dbo.ventas 
GO
/****** Object:  StoredProcedure [dbo].[ReporteTotalVentasFechas]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[ReporteTotalVentasFechas]
@fi date,
@ff date
as
declare @empleado varchar(50)
set @empleado='todos'
select convert(date, ventas.fecha_venta) as fecha_venta, sum(ventas.Monto_total) as Monto,
sum(detalle_venta.Costo * detalle_venta.cantidad ) as Costo,
sum(detalle_venta.Ganancia) as Ganancia, @fi as fi, @ff as ff,@empleado as Empleado
from ventas inner join detalle_venta on detalle_venta.idventa = ventas.idventa
Where ventas.Monto_total &gt;0 and convert(date,ventas.fecha_venta)&gt;=@fi and CONVERT(date,ventas.fecha_venta)&lt;=@ff

group by convert(date, ventas.fecha_venta)
GO
/****** Object:  StoredProcedure [dbo].[restaurar_caja]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[restaurar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Restaurada'
where Id_Caja    =@idcaja








GO
/****** Object:  StoredProcedure [dbo].[restaurar_cliente]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[restaurar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ACTIVO'
where idclientev=@idcliente AND Estado='ELIMINADO' 








GO
/****** Object:  StoredProcedure [dbo].[restaurar_Proveedores]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[restaurar_Proveedores]
@IdProveedor As int

As
update   Proveedores
set Estado ='ACTIVO'
WHERE IdProveedor=@IdProveedor





GO
/****** Object:  StoredProcedure [dbo].[sumar_CreditoPorCobrar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[sumar_CreditoPorCobrar]
@idcaja int, 
@fi datetime,
@ff datetime
as
select sum(Saldo ) from CreditoPorCobrar 
where (Fecha_registro &gt;=@fi and Fecha_registro &lt;=@ff) and Id_caja=@idcaja 





GO
/****** Object:  StoredProcedure [dbo].[sumar_CreditoPorPagar]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[sumar_CreditoPorPagar]
@idcaja int, 
@fi datetime,
@ff datetime
as
select sum(Saldo ) from CreditoPorPagar 
where (Fecha_registro &gt;=@fi and Fecha_registro &lt;=@ff) and Id_caja=@idcaja 





GO
/****** Object:  StoredProcedure [dbo].[sumar_gastos_por_turno]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[sumar_gastos_por_turno]
@idcaja int, 
@fi datetime,
@ff datetime
as
select sum(Importe ) from Gastos_varios 
where (Fecha &gt;=@fi and Fecha &lt;=@ff) and Id_caja=@idcaja 





GO
/****** Object:  StoredProcedure [dbo].[sumar_ingresos_por_turno]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[sumar_ingresos_por_turno]
@idcaja int, 
@fi datetime,
@ff datetime
as
select sum(Importe ) from Ingresos_varios 
where (Fecha &gt;=@fi and Fecha &lt;=@ff) and Id_caja=@idcaja 





GO
/****** Object:  StoredProcedure [dbo].[validar_usuario]    Script Date: 28/05/2024 17:04:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[validar_usuario]

@password varchar(50),
@login varchar(50)
as
select * from USUARIO2
where  Password   = @password and Login=@Login and Estado ='ACTIVO'











GO
USE [master]
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  READ_WRITE 
GO</value>
  </data>
  <data name="txtCrear_procedimientos2.Text" xml:space="preserve">
    <value>ALTER DATABASE [BASE_PUNTO_VENTA] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [BASE_PUNTO_VENTA].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ARITHABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  DISABLE_BROKER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET RECOVERY FULL 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  MULTI_USER 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DB_CHAINING OFF 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
EXEC sys.sp_db_vardecimal_storage_format N'BASE_PUNTO_VENTA', N'ON'
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET QUERY_STORE = OFF
GO
USE [BASE_PUNTO_VENTA]
GO
/****** Object:  User [ada369]    Script Date: 04/12/2023 13:25:03 ******/
CREATE USER [ada369] FOR LOGIN [ada369] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [ada369]
GO
/****** Object:  Table [dbo].[Caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Caja](
	[Id_Caja] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](50) NULL,
	[Tema] [varchar](50) NULL,
	[Serial_PC] [varchar](max) NULL,
	[Impresora_Ticket] [varchar](max) NULL,
	[Impresora_A4] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Tipo] [varchar](50) NULL,
 CONSTRAINT [PK_Caja_1] PRIMARY KEY CLUSTERED 
(
	[Id_Caja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[clientes]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[clientes](
	[idclientev] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](max) NULL,
	[Direccion_para_factura] [varchar](max) NULL,
	[RFC] [varchar](max) NULL,
	[movil] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
 CONSTRAINT [PK_clientes] PRIMARY KEY CLUSTERED 
(
	[idclientev] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Conceptos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Conceptos](
	[Id_concepto] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](max) NULL,
 CONSTRAINT [PK_Conceptos] PRIMARY KEY CLUSTERED 
(
	[Id_concepto] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ControlCobros]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ControlCobros](
	[idcontrolCobro] [int] IDENTITY(1,1) NOT NULL,
	[Monto] [numeric](18, 2) NULL,
	[Fecha] [datetime] NULL,
	[Detalle] [varchar](max) NULL,
	[idCliente] [int] NULL,
	[idUsusario] [int] NULL,
	[idCaja] [int] NULL,
	[Comprobante] [varchar](max) NULL,
	[Efectivo] [numeric](18, 2) NULL,
	[Tarjeta] [numeric](18, 2) NULL,
 CONSTRAINT [PK_ControlCobros] PRIMARY KEY CLUSTERED 
(
	[idcontrolCobro] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CorreoBase]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CorreoBase](
	[IdCorreo] [int] IDENTITY(1,1) NOT NULL,
	[Correo] [varchar](max) NULL,
	[Password] [varchar](max) NULL,
	[EstadoEnvio] [varchar](50) NULL,
 CONSTRAINT [PK_CorreoBase] PRIMARY KEY CLUSTERED 
(
	[IdCorreo] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[detalle_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[detalle_venta](
	[iddetalle_venta] [int] IDENTITY(1,1) NOT NULL,
	[idventa] [int] NULL,
	[Id_producto] [int] NULL,
	[cantidad] [numeric](18, 2) NULL,
	[preciounitario] [numeric](18, 2) NULL,
	[Moneda] [varchar](50) NULL,
	[Total_a_pagar]  AS ([preciounitario]*[cantidad]),
	[Unidad_de_medida] [varchar](50) NULL,
	[Cantidad_mostrada] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Descripcion] [varchar](50) NULL,
	[Codigo] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Costo] [numeric](18, 2) NULL,
	[Ganancia]  AS ([cantidad]*[preciounitario]-[cantidad]*[Costo]),
 CONSTRAINT [PK_detalle_venta] PRIMARY KEY CLUSTERED 
(
	[iddetalle_venta] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EMPRESA]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EMPRESA](
	[Id_empresa] [int] IDENTITY(1,1) NOT NULL,
	[Nombre_Empresa] [varchar](50) NULL,
	[Logo] [image] NULL,
	[Impuesto] [varchar](50) NULL,
	[Porcentaje_impuesto] [numeric](18, 0) NULL,
	[Moneda] [varchar](50) NULL,
	[Trabajas_con_impuestos] [varchar](50) NULL,
	[Modo_de_busqueda] [varchar](50) NULL,
	[Carpeta_para_copias_de_seguridad] [varchar](max) NULL,
	[Correo_para_envio_de_reportes] [varchar](50) NULL,
	[Ultima_fecha_de_copia_de_seguridad] [varchar](50) NULL,
	[Ultima_fecha_de_copia_date] [datetime] NULL,
	[Frecuencia_de_copias] [int] NULL,
	[Estado] [varchar](50) NULL,
	[Tipo_de_empresa] [varchar](50) NULL,
	[Pais] [varchar](max) NULL,
	[Redondeo_de_total] [varchar](50) NULL,
 CONSTRAINT [PK_EMPRESA] PRIMARY KEY CLUSTERED 
(
	[Id_empresa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Gastos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Gastos_varios](
	[id_gasto] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Nro_comprobante] [varchar](5) NULL,
	[Tipo_comprobante] [varchar](max) NULL,
	[Importe] [numeric](18, 2) NULL,
	[Descripcion] [varchar](max) NULL,
	[Id_caja] [int] NULL,
	[Id_concepto] [int] NULL,
 CONSTRAINT [PK_Gastos_varios] PRIMARY KEY CLUSTERED 
(
	[id_gasto] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Grupo_de_Productos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Grupo_de_Productos](
	[Idline] [int] IDENTITY(1,1) NOT NULL,
	[Linea] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_linea] PRIMARY KEY CLUSTERED 
(
	[Idline] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Ingresos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ingresos_varios](
	[id_ingreso] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Nro_comprobante] [varchar](max) NULL,
	[Tipo_comprobante] [varchar](max) NULL,
	[Importe] [numeric](18, 2) NULL,
	[Descripcion] [varchar](max) NULL,
	[Id_caja] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Inicios_de_sesion_por_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Inicios_de_sesion_por_caja](
	[Id_inicio_sesion] [int] IDENTITY(1,1) NOT NULL,
	[Id_serial_Pc] [varchar](max) NULL,
	[Id_usuario] [int] NULL,
 CONSTRAINT [PK_Inicios_de_sesion_por_caja] PRIMARY KEY CLUSTERED 
(
	[Id_inicio_sesion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[KARDEX]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[KARDEX](
	[Id_kardex] [int] IDENTITY(1,1) NOT NULL,
	[Fecha] [datetime] NULL,
	[Motivo] [varchar](max) NULL,
	[Cantidad] [numeric](18, 2) NULL,
	[Id_producto] [int] NULL,
	[Id_usuario] [int] NULL,
	[Tipo] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[Total]  AS ([Cantidad]*[Costo_unt]),
	[Costo_unt] [numeric](18, 2) NULL,
	[Habia] [numeric](18, 2) NULL,
	[Hay] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_KARDEX] PRIMARY KEY CLUSTERED 
(
	[Id_kardex] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Marcan]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Marcan](
	[Id_marca] [int] IDENTITY(1,1) NOT NULL,
	[S] [varchar](max) NULL,
	[F] [varchar](max) NULL,
	[E] [varchar](max) NULL,
	[FA] [varchar](max) NULL,
 CONSTRAINT [PK_Licencias] PRIMARY KEY CLUSTERED 
(
	[Id_marca] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MOVIMIENTOCAJACIERRE]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MOVIMIENTOCAJACIERRE](
	[idcierrecaja] [int] IDENTITY(1,1) NOT NULL,
	[fechainicio] [datetime] NULL,
	[fechafin] [datetime] NULL,
	[fechacierre] [datetime] NULL,
	[ingresos] [numeric](18, 2) NULL,
	[egresos] [numeric](18, 2) NULL,
	[Saldo_queda_en_caja] [numeric](18, 2) NULL,
	[Id_usuario] [int] NULL,
	[Total_calculado] [numeric](18, 2) NULL,
	[Total_real] [numeric](18, 2) NULL,
	[Estado] [varchar](50) NULL,
	[Diferencia] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
 CONSTRAINT [PK_MOVIMIENTOCAJACIERRE] PRIMARY KEY CLUSTERED 
(
	[idcierrecaja] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Producto1]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Producto1](
	[Id_Producto1] [int] IDENTITY(1,1) NOT NULL,
	[Descripcion] [varchar](50) NULL,
	[Imagen] [varchar](50) NULL,
	[Id_grupo] [int] NULL,
	[Usa_inventarios] [varchar](50) NULL,
	[Stock] [varchar](50) NULL,
	[Precio_de_compra] [numeric](18, 2) NULL,
	[Fecha_de_vencimiento] [varchar](50) NULL,
	[Precio_de_venta] [numeric](18, 2) NULL,
	[Codigo] [varchar](50) NULL,
	[Se_vende_a] [varchar](50) NULL,
	[Impuesto] [varchar](50) NULL,
	[Stock_minimo] [numeric](18, 2) NULL,
	[Precio_mayoreo] [numeric](18, 2) NULL,
	[Sub_total_pv]  AS ([Precio_de_venta]-([Precio_de_venta]*[Impuesto])/(100)),
	[Sub_total_pm]  AS ([Precio_mayoreo]-([Precio_mayoreo]*[Impuesto])/(100)),
	[A_partir_de] [numeric](18, 2) NULL,
 CONSTRAINT [PK_Producto1] PRIMARY KEY CLUSTERED 
(
	[Id_Producto1] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Proveedores]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Proveedores](
	[IdProveedor] [int] IDENTITY(1,1) NOT NULL,
	[Nombre] [varchar](max) NULL,
	[Direccion] [varchar](max) NULL,
	[IdentificadorFiscal] [varchar](max) NULL,
	[Celular] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
 CONSTRAINT [PK_Proveedores] PRIMARY KEY CLUSTERED 
(
	[IdProveedor] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Serializacion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Serializacion](
	[Id_serializacion] [int] IDENTITY(1,1) NOT NULL,
	[Serie] [varchar](50) NULL,
	[Cantidad_de_numeros] [varchar](50) NULL,
	[numerofin] [varchar](50) NULL,
	[Destino] [varchar](50) NULL,
	[tipodoc] [varchar](50) NULL,
	[Por_defecto] [varchar](50) NULL,
 CONSTRAINT [PK_Serializacion] PRIMARY KEY CLUSTERED 
(
	[Id_serializacion] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Ticket]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Ticket](
	[Id_ticket] [int] IDENTITY(1,1) NOT NULL,
	[Id_Empresa] [int] NULL,
	[Identificador_fiscal] [varchar](max) NULL,
	[Direccion] [varchar](max) NULL,
	[Provincia_Departamento_Pais] [varchar](max) NULL,
	[Nombre_de_Moneda] [varchar](max) NULL,
	[Agradecimiento] [varchar](max) NULL,
	[pagina_Web_Facebook] [varchar](max) NULL,
	[Anuncio] [varchar](max) NULL,
	[Datos_fiscales_de_autorizacion] [varchar](max) NULL,
	[Por_defecto] [varchar](max) NULL,
 CONSTRAINT [PK_Ticket] PRIMARY KEY CLUSTERED 
(
	[Id_ticket] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[USUARIO2]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[USUARIO2](
	[idUsuario] [int] IDENTITY(1,1) NOT NULL,
	[Nombres_y_Apellidos] [varchar](50) NULL,
	[Login] [varchar](50) NULL,
	[Password] [varchar](50) NULL,
	[Icono] [image] NULL,
	[Nombre_de_icono] [varchar](max) NULL,
	[Correo] [varchar](max) NULL,
	[Rol] [varchar](max) NULL,
	[Estado] [varchar](50) NULL,
 CONSTRAINT [PK_USUARIO2] PRIMARY KEY CLUSTERED 
(
	[idUsuario] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ventas]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ventas](
	[idventa] [int] IDENTITY(1,1) NOT NULL,
	[idclientev] [int] NULL,
	[fecha_venta] [datetime] NULL,
	[Numero_de_doc] [varchar](50) NULL,
	[Monto_total] [numeric](18, 2) NULL,
	[Tipo_de_pago] [varchar](50) NULL,
	[Estado] [varchar](50) NULL,
	[IVA] [numeric](18, 1) NULL,
	[Comprobante] [varchar](50) NULL,
	[Id_usuario] [int] NULL,
	[Fecha_de_pago] [varchar](50) NULL,
	[ACCION] [varchar](50) NULL,
	[Saldo] [numeric](18, 2) NULL,
	[Pago_con] [numeric](18, 2) NULL,
	[Porcentaje_IGV] [numeric](18, 2) NULL,
	[Id_caja] [int] NULL,
	[Referencia_tarjeta] [varchar](50) NULL,
	[Vuelto] [numeric](18, 2) NULL,
	[Efectivo] [numeric](18, 2) NULL,
	[Credito] [numeric](18, 2) NULL,
	[Tarjeta] [numeric](18, 2) NULL,
 CONSTRAINT [PK_ventas] PRIMARY KEY CLUSTERED 
(
	[idventa] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_Caja] FOREIGN KEY([idCaja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_Caja]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_clientes] FOREIGN KEY([idCliente])
REFERENCES [dbo].[clientes] ([idclientev])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_clientes]
GO
ALTER TABLE [dbo].[ControlCobros]  WITH CHECK ADD  CONSTRAINT [FK_ControlCobros_USUARIO2] FOREIGN KEY([idUsusario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[ControlCobros] CHECK CONSTRAINT [FK_ControlCobros_USUARIO2]
GO
ALTER TABLE [dbo].[detalle_venta]  WITH CHECK ADD  CONSTRAINT [FK_detalle_venta_ventas] FOREIGN KEY([idventa])
REFERENCES [dbo].[ventas] ([idventa])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[detalle_venta] CHECK CONSTRAINT [FK_detalle_venta_ventas]
GO
ALTER TABLE [dbo].[Gastos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Gastos_varios_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[Gastos_varios] CHECK CONSTRAINT [FK_Gastos_varios_Caja]
GO
ALTER TABLE [dbo].[Gastos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Gastos_varios_Conceptos] FOREIGN KEY([Id_concepto])
REFERENCES [dbo].[Conceptos] ([Id_concepto])
GO
ALTER TABLE [dbo].[Gastos_varios] CHECK CONSTRAINT [FK_Gastos_varios_Conceptos]
GO
ALTER TABLE [dbo].[Ingresos_varios]  WITH CHECK ADD  CONSTRAINT [FK_Ingresos_varios_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[Ingresos_varios] CHECK CONSTRAINT [FK_Ingresos_varios_Caja]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Caja]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_Producto1] FOREIGN KEY([Id_producto])
REFERENCES [dbo].[Producto1] ([Id_Producto1])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_Producto1]
GO
ALTER TABLE [dbo].[KARDEX]  WITH CHECK ADD  CONSTRAINT [FK_KARDEX_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[KARDEX] CHECK CONSTRAINT [FK_KARDEX_USUARIO2]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja] FOREIGN KEY([Id_caja])
REFERENCES [dbo].[Caja] ([Id_Caja])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_Caja]
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE]  WITH CHECK ADD  CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[MOVIMIENTOCAJACIERRE] CHECK CONSTRAINT [FK_MOVIMIENTOCAJACIERRE_USUARIO2]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_clientes] FOREIGN KEY([idclientev])
REFERENCES [dbo].[clientes] ([idclientev])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_clientes]
GO
ALTER TABLE [dbo].[ventas]  WITH CHECK ADD  CONSTRAINT [FK_ventas_USUARIO2] FOREIGN KEY([Id_usuario])
REFERENCES [dbo].[USUARIO2] ([idUsuario])
GO
ALTER TABLE [dbo].[ventas] CHECK CONSTRAINT [FK_ventas_USUARIO2]
GO
/****** Object:  StoredProcedure [dbo].[actualizar_serializacion_mas_uno]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[actualizar_serializacion_mas_uno]
@idserie as int

as 
update Serializacion set  numerofin=numerofin+1          
where Id_serializacion=@idserie 






GO
/****** Object:  StoredProcedure [dbo].[aumentar_saldo_a_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[aumentar_saldo_a_cliente]
@idcliente as integer,
@Saldo numeric(18,2)          
as 
update clientes set          
			Saldo =Saldo+@Saldo 
where idclientev =@idcliente 







GO
/****** Object:  StoredProcedure [dbo].[aumentar_stock_en_detalle_de_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[aumentar_stock_en_detalle_de_venta]
@Id_Producto1 as int,
@cantidad as decimal (18,2)

as
update detalle_venta   set Stock=Stock+@cantidad where Id_producto   =@Id_Producto1 AND Stock  &lt;&gt;'Ilimitado'






GO
/****** Object:  StoredProcedure [dbo].[buscar_cliente_Form]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscar_cliente_Form]

@letra VARCHAR(50)
AS BEGIN
SELECT       top 10 idclientev, Nombre, Direccion_para_factura as Direccion, RFC,  movil as Celular, Cliente, Proveedor, 
                    Saldo ,     Estado
FROM            dbo.clientes 
WHEre Nombre  LIKE  '%' + @letra+'%' and Cliente  ='SI' 
END








GO
/****** Object:  StoredProcedure [dbo].[buscar_cliente_POR_nombre_PARA_VENTAS_todos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscar_cliente_POR_nombre_PARA_VENTAS_todos]

@letra VARCHAR(50)
AS 
SELECT        Nombre ,idclientev ,Direccion_para_factura  ,movil  ,RFC
FROM         clientes
WHEre Nombre+movil +Direccion_para_factura+RFC   LIKE  '%' + @letra+'%' and Cliente='SI'AND Estado ='ACTIVO' ORDER BY idclientev desc









GO
/****** Object:  StoredProcedure [dbo].[buscar_clientes]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_clientes]
@letra varchar(max)
As
SELECT        idclientev , Nombre, Direccion_para_factura, RFC as [RFC] , movil, Estado, Saldo
FROM            dbo.clientes
where Nombre+RFC+movil   Like '%' + @letra + '%'  AND Nombre&lt;&gt;'GENERICO'
GO
/****** Object:  StoredProcedure [dbo].[buscar_conceptos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscar_conceptos]
@letra varchar(max)
as
select Id_concepto,Descripcion as Concepto from Conceptos
where Descripcion  Like '%' + @letra + '%' 





GO
/****** Object:  StoredProcedure [dbo].[Buscar_id_USUARIO]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Buscar_id_USUARIO]
@Nombres_y_Apellidos varchar(50)
as
select * from USUARIO2 
where Nombres_y_Apellidos =@Nombres_y_Apellidos
order by idUsuario desc










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX]
@idProducto int
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos.Linea as Categoria
,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
               cross join EMPRESA
			INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
						 
WHEre Producto1.Id_Producto1=@idProducto   order by KARDEX.Fecha Desc

END










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros ]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Habia ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay ,USUARIO2.Nombres_y_Apellidos as Usuario ,Grupo_de_Productos .Linea as Categoria
,USUARIO2.idUsuario,@fecha as Fecha_consulta, @tipo as Tipo_consulta, EMPRESA.Nombre_Empresa ,EMPRESA.Logo 
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         INNER JOIN Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
						 CROSS JOIN EMPRESA 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
END










GO
/****** Object:  StoredProcedure [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_MOVIMIENTOS_DE_KARDEX_filtros_acumulado]
@fecha date,
@tipo varchar(50),
@Id_usuario int 
AS BEGIN
SELECT     Producto1.Descripcion ,KARDEX.Tipo ,sum (KARDEX.Cantidad) Cantidad_Total ,@fecha as fecha, USUARIO2.Nombres_y_Apellidos,@tipo as Tipo_consultado
 FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
         
				 
WHEre KARDEX.Id_usuario =@Id_usuario and (KARDEX.Tipo=@tipo or @tipo ='-Todos-') and convert(date,KARDEX.Fecha) =convert(date,@fecha )
group by Producto1.Descripcion,KARDEX.Tipo,USUARIO2.Nombres_y_Apellidos
ORDER BY sum (KARDEX.Cantidad) DESC
END










GO
/****** Object:  StoredProcedure [dbo].[buscar_producto_por_descripcion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_producto_por_descripcion]
@letra VARCHAR(50)
AS BEGIN
select top 10 Id_Producto1,Codigo , Grupo_de_Productos.Linea as Grupo,Descripcion ,Impuesto,Usa_inventarios ,Precio_de_compra AS P_Compra,Precio_mayoreo as P_mayoreo,Se_vende_a as Se_vende_por,Stock_minimo ,Fecha_de_vencimiento as F_vencimiento ,Stock,Precio_de_venta as P_venta 
,Grupo_de_Productos.Idline,A_partir_de 

FROM            dbo.Producto1 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
              
WHEre (dbo.Producto1.Descripcion)+Codigo +Grupo_de_Productos.Linea   LIKE  '%' + @letra+'%' ORDER BY DBO.Producto1.Descripcion  asc
 
END










GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[BUSCAR_PRODUCTOS_KARDEX]

@letrab VARCHAR(50)
AS 
SELECT       top 10 Id_Producto1, (Descripcion) AS Descripcion, Imagen, Grupo_de_Productos.Linea, Usa_inventarios, Stock, Precio_de_compra, Fecha_de_vencimiento, Precio_de_venta, Codigo, Se_vende_a, Impuesto, Stock_minimo, Precio_mayoreo, Sub_total_pv, 
                         Sub_total_pm
FROM            dbo.Producto1 
                      	INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo
  
						 where  (Descripcion+Grupo_de_Productos.Linea  + Codigo) LIKE  '%' + @letrab+'%' and Usa_inventarios ='SI'











GO
/****** Object:  StoredProcedure [dbo].[BUSCAR_PRODUCTOS_oka]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[BUSCAR_PRODUCTOS_oka]

@letrab varchar(50)
as
begin
SELECT      TOP 8  Id_Producto1,(Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) AS Descripcion
, Usa_inventarios, Stock, Precio_de_compra, Precio_de_venta, Codigo, Se_vende_a
,Descripcion as Descripcion2, Codigo 
FROM            dbo.Producto1  cross join EMPRESA 
INNER JOIN Grupo_de_Productos on
Grupo_de_Productos.Idline=Producto1.Id_grupo   
              
where EMPRESA.Id_empresa = 1 and  (Descripcion+' /Precio: '+EMPRESA.Moneda   +' '+ convert(varchar(50),Precio_de_venta)  +' /Codigo: '+ Codigo  ) LIKE  '%' + @letrab+'%' 
end  








GO
/****** Object:  StoredProcedure [dbo].[buscar_productos_vencidos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[buscar_productos_vencidos]
@letra as varchar(50)
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock,empresa.Nombre_Empresa,empresa.Logo
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1
cross join EMPRESA 
where   Descripcion +codigo LIKE  '%' + @letra+'%' and Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))) asc










GO
/****** Object:  StoredProcedure [dbo].[buscar_Proveedores]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_Proveedores]
@letra varchar(max)
As
SELECT        IdProveedor, Nombre, Direccion, IdentificadorFiscal as [Identificador Fiscal] , Celular, Estado, Saldo
FROM            dbo.Proveedores
where Nombre+IdentificadorFiscal+Celular   Like '%' + @letra + '%' 





GO
/****** Object:  StoredProcedure [dbo].[buscar_Tipo_de_documentos_para_insertar_en_ventas]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[buscar_Tipo_de_documentos_para_insertar_en_ventas]
@letra VARCHAR(50)
AS BEGIN

SELECT        Serializacion.tipodoc   AS COMPROBANTE ,
dbo.Serializacion.Serie ,dbo.Serializacion.Cantidad_de_numeros  , dbo.Serializacion.numerofin ,
dbo.Serializacion.Id_serializacion ,
(dbo.Serializacion.Serie  +' - '+ dbo.Serializacion.Cantidad_de_numeros + dbo.Serializacion.numerofin) as serie_completa
FROM            dbo.Serializacion 
 
 WHEre Serializacion.tipodoc =@letra  and dbo.Serializacion .Destino  ='VENTAS'
 end






GO
/****** Object:  StoredProcedure [dbo].[buscar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[buscar_usuario]
@letra varchar(50)
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2

where Nombres_y_Apellidos + Login      LIKE '%'+ @letra +'%' AND Estado='ACTIVO'










GO
/****** Object:  StoredProcedure [dbo].[buscar_USUARIO_por_correo]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[buscar_USUARIO_por_correo]
@correo VARCHAR(max)

AS 
SELECT        Password 
FROM            dbo.USUARIO2						 
WHEre Correo =@correo











GO
/****** Object:  StoredProcedure [dbo].[cambio_de_Caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[cambio_de_Caja]
@idcaja int, 
@idventa int
as
update ventas set Id_caja = @idcaja 
where idventa=@idcaja 






GO
/****** Object:  StoredProcedure [dbo].[CERRAR_CAJA]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[CERRAR_CAJA]
@idcaja as integer,
@fechafin datetime,
@fechacierre datetime


		
as 
update MOVIMIENTOCAJACIERRE set 
Estado ='CAJA CERRADA'
where Id_caja =@idcaja AND Estado='CAJA APERTURADA'














GO
/****** Object:  StoredProcedure [dbo].[cerrarCaja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[cerrarCaja]

@fechafin As datetime,
@fechacierre As datetime,
@ingresos As numeric(18,2),
@egresos As numeric(18,2),
@Saldo_queda_en_caja As numeric(18,2),
@Id_usuario As int,
@Total_calculado As numeric(18,2),
@Total_real As numeric(18,2),
@Estado As varchar(50),
@Diferencia As numeric(18,2),
@Id_caja As int
As
UPDATE MOVIMIENTOCAJACIERRE Set


fechafin=@fechafin,
fechacierre=@fechacierre,
ingresos=@ingresos,
egresos=@egresos,
Saldo_queda_en_caja=@Saldo_queda_en_caja,
Id_usuario=@Id_usuario,
Total_calculado=@Total_calculado,
Total_real=@Total_real,
Estado=@Estado,
Diferencia=@Diferencia
Where Id_caja =@Id_caja



GO
/****** Object:  StoredProcedure [dbo].[Confirmar_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[Confirmar_venta]
@idventa int,
@montototal as numeric(18,2),
@IVA as numeric(18,2),
@Saldo numeric(18,2),
@Tipo_de_pago varchar(50),
@Estado varchar(50),
@Comprobante varchar(50),
@Numero_de_doc varchar(50),
@fecha_venta datetime,
@ACCION varchar(50),
@Fecha_de_pago varchar(50),
@idcliente int,
@Pago_con numeric(18,2),
@Referencia_tarjeta varchar(50),
@Vuelto as numeric(18,2),
@Efectivo as numeric(18,2),
@Credito numeric(18,2),
@Tarjeta numeric(18,2)
as
BEGIN
if EXISTS (SELECT Numero_de_doc  FROM ventas  where Numero_de_doc  = @Numero_de_doc  )
RAISERROR ('Ya existe un Numero de Comprobante con ese Numero y Serie', 16,1)
else
BEGIN
update ventas set Monto_total  =@montototal, IVA=@IVA ,Saldo=@Saldo,
Tipo_de_pago=@Tipo_de_pago 
,Estado=@Estado ,
Comprobante =@Comprobante ,
Numero_de_doc=@Numero_de_doc ,
fecha_venta=@fecha_venta ,
ACCION=@ACCION ,Fecha_de_pago =@Fecha_de_pago ,idclientev=@idcliente ,
Pago_con=@Pago_con,Referencia_tarjeta=@Referencia_tarjeta,
Vuelto=@Vuelto ,Efectivo=@Efectivo,Credito=@Credito,Tarjeta=@Tarjeta 
where idventa =@idventa 
END
END










GO
/****** Object:  StoredProcedure [dbo].[contar_clientes_activos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_clientes_activos]
as
select COUNT (idclientev) from clientes 
where Cliente='SI' AND Estado= 'ACTIVO'








GO
/****** Object:  StoredProcedure [dbo].[contar_clientes_eliminados]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[contar_clientes_eliminados]
as
select COUNT (idclientev) from clientes 
where Cliente='SI' AND Estado= 'ELIMINADO'








GO
/****** Object:  StoredProcedure [dbo].[contar_productos_vencidos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[contar_productos_vencidos] 
as
select
COUNT (Id_Producto1) as Id
from Producto1
where Fecha_de_vencimiento&lt;&gt;'NO APLICA' and Fecha_de_vencimiento &lt;= CONVERT(date,GETDATE()) 








GO
/****** Object:  StoredProcedure [dbo].[disminuir_stock]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuir_stock]
@Id_Producto1 as int,
@cantidad as decimal (18,2)

as
update Producto1   set Stock=Stock-@cantidad 
where Id_Producto1=@Id_Producto1 AND Usa_inventarios  ='SI' and Stock&gt;=@cantidad






GO
/****** Object:  StoredProcedure [dbo].[disminuir_stock_en_detalle_de_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuir_stock_en_detalle_de_venta]
@Id_Producto1 as int,
@cantidad as decimal (18,2)

as
update detalle_venta   set Stock=Stock-@cantidad where Id_producto   =@Id_Producto1 AND Stock  &lt;&gt;'Ilimitado'






GO
/****** Object:  StoredProcedure [dbo].[disminuirSaldocliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[disminuirSaldocliente]
@idcliente int,
@monto numeric(18,2)
as
update clientes set Saldo = Saldo - @monto 
where idclientev=@idcliente 
GO
/****** Object:  StoredProcedure [dbo].[editar_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[editar_caja]
@idcaja integer,
@descripcion varchar(50)

 as       
 if EXISTS (SELECT Descripcion  FROM Caja  where (Descripcion  = @descripcion and Id_Caja  &lt;&gt;@idcaja ) )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else          		
 
update Caja set 
Descripcion  =@descripcion 

where Id_Caja    =@idcaja  








GO
/****** Object:  StoredProcedure [dbo].[editar_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_cliente]
@idcliente as integer,
@Nombre varchar(MAX),
           @Direccion_para_factura varchar(MAX),
            @RFC varchar(MAX),                      
            @movil varchar(50)
		
as 
if EXISTS (SELECT RFC  FROM clientes  where (RFC  = @RFC and idclientev  &lt;&gt;@idcliente and @RFC &lt;&gt; '0') )

RAISERROR ('YA EXISTE UN REGISTRO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)
else
update clientes set 
Nombre =@Nombre ,
          Direccion_para_factura = @Direccion_para_factura ,
           RFC = @RFC ,
          
          movil  = @movil 
where idclientev =@idcliente 









GO
/****** Object:  StoredProcedure [dbo].[editar_Conceptos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_Conceptos]
@Id_concepto As int,
@Descripcion As varchar(MAX)
As
if Exists(select Descripcion  from Conceptos where Descripcion =@Descripcion and Id_concepto&lt;&gt;@Id_concepto )
Raiserror('Concepto ya registrado',16,1 )
else
UPDATE Conceptos Set

Descripcion=@Descripcion
Where Id_concepto=@Id_concepto





GO
/****** Object:  StoredProcedure [dbo].[editar_ControlCobros]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[editar_ControlCobros]
@idcontrolCobro As int,
@Monto As numeric(18,2),
@Fecha As datetime,
@Detalle As varchar(MAX),
@idCliente As int,
@idUsusario As int,
@idCaja As int,
@Comprobante As varchar(MAX)
As
UPDATE ControlCobros Set

Monto=@Monto,
Fecha=@Fecha,
Detalle=@Detalle,
idCliente=@idCliente,
idUsusario=@idUsusario,
idCaja=@idCaja,
Comprobante=@Comprobante
Where idcontrolCobro=@idcontrolCobro

GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_CANTIDAD]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_CANTIDAD]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad=@cantidad,
Cantidad_mostrada =@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end








GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_restar]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_detalle_venta_restar]
@iddetalle_venta INT,
@cantidad as numeric(18, 2),
@Cantidad_mostrada  numeric(18, 2) ,
  @Id_producto varchar(50)   
    ,@Id_venta  as int

	as
	DECLARE @APARTIR_DE as numeric(18,2)
DECLARE @Precio_normal as numeric (18,2)
DECLARE @Precio_pormayor as numeric(18,2)
SET @APARTIR_DE= (SELECT A_partir_de  FROM Producto1  where Producto1.Id_Producto1 = @Id_producto )
SET @Precio_normal =(SELECT Precio_de_venta  FROM Producto1 where Producto1.Id_Producto1 =@Id_producto  )
SET @Precio_pormayor =(SELECT Precio_mayoreo  FROM Producto1 where Producto1.Id_Producto1 = @Id_producto )
PRINT @APARTIR_DE
PRINT @Precio_normal
PRINT @Precio_pormayor

BEGIN


 

update detalle_venta set 
cantidad=cantidad-@cantidad 
, Cantidad_mostrada=Cantidad_mostrada-@Cantidad_mostrada
where detalle_venta.Id_producto = @Id_producto and detalle_venta.idventa=@Id_venta
END

begin 
delete from detalle_venta where  detalle_venta.idventa =@Id_venta and  cantidad &lt;=0
end

begin
if EXISTS( SELECT Descripcion,cantidad,Id_producto ,idventa  FROM detalle_venta where cantidad &gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto AND  detalle_venta.idventa =@Id_venta AND detalle_venta.Codigo &lt;&gt;'0')
UPDATE detalle_venta set
preciounitario =@Precio_pormayor 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and @Precio_pormayor &gt;0 and @APARTIR_DE &gt;0
end

begin
if EXISTS(SELECT cantidad  FROM detalle_venta where cantidad &lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta and detalle_venta.Codigo &lt;&gt;'0')
update detalle_venta set
preciounitario =@Precio_normal 
where detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@Id_venta 
end

begin
IF EXISTS(SELECT cantidad FROM detalle_venta WHERE detalle_venta .idventa =@Id_venta and detalle_venta.Codigo ='0')
update detalle_venta set 
Codigo = 0 
where detalle_venta.Codigo='0' and detalle_venta.idventa =@Id_venta 
end








GO
/****** Object:  StoredProcedure [dbo].[editar_detalle_venta_sumar]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_detalle_venta_sumar]
@Id_producto int,
@cantidad as numeric(18,2),
@Cantidad_mostrada  numeric(18,2),
@id_venta as int
as
declare @APARTIR_DE as numeric(18,2)
declare @precio_normal as numeric(18,2)
declare @precio_pormayor as numeric(18,2)
set @APARTIR_DE =(select A_partir_de from  Producto1
where Producto1.Id_Producto1 =@Id_producto)

set @precio_normal=(select Precio_de_venta from Producto1
where Producto1.Id_Producto1=@Id_producto)

set @precio_pormayor=(select Precio_mayoreo from Producto1
where Producto1.Id_Producto1=@Id_producto)

print @APARTIR_DE
print @precio_normal
print @precio_pormayor

begin
update detalle_venta set
cantidad= cantidad+ @cantidad,
Cantidad_mostrada = Cantidad_mostrada+@Cantidad_mostrada 
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta 
end

begin
if exists (select Descripcion,cantidad,Id_producto,idventa from detalle_venta
where cantidad&gt;=@APARTIR_DE and detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and detalle_venta.Codigo&lt;&gt;'0')
update detalle_venta set
preciounitario=@precio_pormayor
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta and @precio_pormayor&gt;0 and  @APARTIR_DE &gt;0
end 

begin
if exists (select cantidad from detalle_venta 
where cantidad&lt;@APARTIR_DE and detalle_venta.Id_producto =@Id_producto and detalle_venta.idventa =@id_venta and detalle_venta.Codigo&lt;&gt;'0' )
update detalle_venta set
preciounitario=@precio_normal
where detalle_venta.Id_producto=@Id_producto and detalle_venta.idventa=@id_venta
end

begin
if exists (select cantidad from detalle_venta where detalle_venta.idventa=@id_venta and detalle_venta.Codigo='0')
update detalle_venta set Codigo=0
where detalle_venta.Codigo='0' and detalle_venta.idventa=@id_venta
end








GO
/****** Object:  StoredProcedure [dbo].[editar_dinero_caja_inicial]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_dinero_caja_inicial]
@Id_caja as integer,
@saldo numeric(18,2)


as
update MOVIMIENTOCAJACIERRE  set  Saldo_queda_en_caja =@saldo
where Id_caja =@Id_caja AND Estado ='CAJA APERTURADA'











GO
/****** Object:  StoredProcedure [dbo].[editar_eleccion_impresoras]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_eleccion_impresoras]
@idcaja integer,
@Impresora_Ticket varchar(max)	                     		
as 
update Caja set 
 Impresora_Ticket=@Impresora_Ticket
where Id_Caja    =@idcaja  






GO
/****** Object:  StoredProcedure [dbo].[editar_Empresa]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[editar_Empresa]
@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),
@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),

@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50)

as

update  EMPRESA set Nombre_Empresa=@Nombre_Empresa,Logo=@logo ,Impuesto=@Impuesto ,
Porcentaje_impuesto=@Porcentaje_impuesto,Moneda=@Moneda,Trabajas_con_impuestos=@Trabajas_con_impuestos
,Modo_de_busqueda=@Modo_de_busqueda ,Carpeta_para_copias_de_seguridad =@Carpeta_para_copias_de_seguridad ,Correo_para_envio_de_reportes =@Correo_para_envio_de_reportes 









GO
/****** Object:  StoredProcedure [dbo].[editar_FORMATO_TICKET]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[editar_FORMATO_TICKET]
    	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto  varchar(max),
	   @Nombre_Empresa varchar(max),
	   @Logo image
    as
	begin
    update Ticket set  
	Identificador_fiscal=@Identificador_fiscal ,
          Direccion =@Direccion ,    
           Provincia_Departamento_Pais=@Provincia_Departamento_Pais ,
           Nombre_de_Moneda=@Nombre_de_Moneda ,
          Agradecimiento  =@Agradecimiento ,
          pagina_Web_Facebook = @pagina_Web_Facebook ,
         Anuncio =  @Anuncio,
		   Datos_fiscales_de_autorizacion=@Datos_fiscales_de_autorizacion,
		   Por_defecto=@Por_defecto
		   end 

		   begin
		    update EMPRESA  set  
			Nombre_Empresa=@Nombre_Empresa, 
			Logo=@Logo 
			end 








GO
/****** Object:  StoredProcedure [dbo].[editar_Gastos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[editar_Gastos_varios]
@id_gasto As int,
@Fecha As datetime,
@Nro_comprobante As varchar(5),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int,
@Id_concepto As int
As
UPDATE Gastos_varios Set

Fecha=@Fecha,
Nro_comprobante=@Nro_comprobante,
Tipo_comprobante=@Tipo_comprobante,
Importe=@Importe,
Descripcion=@Descripcion,
Id_caja=@Id_caja,
Id_concepto=@Id_concepto
Where id_gasto=@id_gasto





GO
/****** Object:  StoredProcedure [dbo].[editar_Grupo]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[editar_Grupo]
@id int,
@Grupo varchar(50)

as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo and Idline&lt;&gt;@id  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
update  Grupo_de_Productos set Linea=@grupo
where Idline=@id












GO
/****** Object:  StoredProcedure [dbo].[editar_inicio_De_sesion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max),
 @id_usuario int
  as
update Inicios_de_sesion_por_caja set 
Id_usuario =@id_usuario 
where Id_serial_Pc=@Id_serial_Pc 








GO
/****** Object:  StoredProcedure [dbo].[EDITAR_marcan_a]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[EDITAR_marcan_a]

	@e varchar(max),
	@fa varchar(max),
	@f  varchar(max),
	@s varchar(max)
    as
	
    UPDATE Marcan SET E=@e, FA=@fa, F=@f 
	where S=@s 








GO
/****** Object:  StoredProcedure [dbo].[editar_Producto1]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editar_Producto1]
@Id_Producto1 int,
 @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
          @Id_grupo INT,
		  @Usa_inventarios varchar(50),
	  @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
		 	,@A_partir_de numeric(18,2)
as 

if EXISTS (SELECT Descripcion FROM Producto1  where (Descripcion = @Descripcion and Id_Producto1 &lt;&gt;@Id_Producto1 ) )

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE, POR FAVOR INGRESE DE NUEVO', 16,1)

else if EXISTS (SELECT Codigo  FROM Producto1  where (Codigo  = @Codigo  and Id_Producto1 &lt;&gt;@Id_Producto1 ))

RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)

else if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion &lt;&gt; @Descripcion and Id_Producto1 =@Id_Producto1 ) OR (Codigo&lt;&gt;@Codigo and Id_Producto1 = @Id_Producto1))

update Producto1 set  

      Descripcion =@Descripcion ,
		  Imagen =  @Imagen ,			         
         
         Id_grupo = @Id_grupo 	,
		  Usa_inventarios =@Usa_inventarios ,
		  Stock = @Stock ,
           Precio_de_compra =@Precio_de_compra ,
        Fecha_de_vencimiento =   @Fecha_de_vencimiento ,
          Precio_de_venta = @Precio_de_venta ,
         Codigo =  @Codigo ,
         Se_vende_a =  @Se_vende_a ,
           Impuesto =@Impuesto,
           Stock_minimo =@Stock_minimo ,
         Precio_mayoreo =  @Precio_mayoreo 
		 	,A_partir_de=@A_partir_de 
where id_Producto1=@Id_Producto1












GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[editar_serializacion]
@serie VARCHAR(50)  ,
@Cantidad_de_numeros AS VARCHAR(50)    ,
@numerofin as varchar(50) ,
@Tipo as varchar(50), 
   @Id_serie as int
as 
update Serializacion set  Serie =@serie   ,Cantidad_de_numeros=@Cantidad_de_numeros ,numerofin=@numerofin   
         ,tipodoc =@Tipo 
where Id_serializacion=@Id_serie 











GO
/****** Object:  StoredProcedure [dbo].[editar_serializacion_POR_DEFECTO]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[editar_serializacion_POR_DEFECTO]


   @Id_serie as int
as 

BEGIN
update Serializacion set  Por_defecto  ='-' 
     END


	 BEGIN
	 update Serializacion set  Por_defecto  ='SI'
where Id_serializacion=@Id_serie 

END









GO
/****** Object:  StoredProcedure [dbo].[editar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[editar_usuario]
@idUsuario int,
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max)
as
if EXISTS (SELECT Login,idUsuario FROM USUARIO2 where (Login  = @login  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO') or (Nombres_y_Apellidos   = @nombres  AND idUsuario&lt;&gt;@idUsuario and Estado='ACTIVO'))
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )

ELSE

update USUARIO2 set Nombres_y_Apellidos=@nombres ,Password =@Password , Icono=@Icono ,Nombre_de_icono =@Nombre_de_icono
 ,Correo =@Correo , Rol=@rol , Login =@Login
 where idUsuario=@idUsuario 












GO
/****** Object:  StoredProcedure [dbo].[editarRespaldos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[editarRespaldos]

@Ultima_fecha_de_copia_de_seguridad  varchar(50),
@Carpeta_para_copias_de_seguridad varchar (max),
@Ultima_fecha_de_copia_date datetime,
@Frecuencia_de_copias int
as
update EMPRESA  set Ultima_fecha_de_copia_de_seguridad =@Ultima_fecha_de_copia_de_seguridad ,
Carpeta_para_copias_de_seguridad =@Carpeta_para_copias_de_seguridad ,Ultima_fecha_de_copia_date=@Ultima_fecha_de_copia_date
,Frecuencia_de_copias= @Frecuencia_de_copias 



GO
/****** Object:  StoredProcedure [dbo].[eliminar_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Eliminada'
where Id_Caja    =@idcaja








GO
/****** Object:  StoredProcedure [dbo].[eliminar_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ELIMINADO'
where idclientev=@idcliente AND Estado='ACTIVO'








GO
/****** Object:  StoredProcedure [dbo].[eliminar_ControlCobros]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[eliminar_ControlCobros]
@idcontrolCobro As int

As
DELETE FROM ControlCobros
WHERE idcontrolCobro=@idcontrolCobro
GO
/****** Object:  StoredProcedure [dbo].[eliminar_detalle_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[eliminar_detalle_venta]
@iddetalleventa as int 
as
delete detalle_venta where iddetalle_venta=@iddetalleventa








GO
/****** Object:  StoredProcedure [dbo].[eliminar_Gastos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[eliminar_Gastos_varios]
@id_gasto As int

As
DELETE FROM Gastos_varios
WHERE id_gasto=@id_gasto





GO
/****** Object:  StoredProcedure [dbo].[eliminar_producto]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_producto]
@idproducto  int
as
delete from Producto1  where Id_Producto1 =@idproducto 











GO
/****** Object:  StoredProcedure [dbo].[eliminar_Producto1]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_Producto1]
@id  int
as
delete from Producto1  where Id_Producto1 =@id 










GO
/****** Object:  StoredProcedure [dbo].[eliminar_Serializacion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_Serializacion]
@id integer
as
if EXISTS (SELECT Destino FROM Serializacion  where Destino &lt;&gt;'OTROS' AND ID_SERIALIZACION=@id )
RAISERROR ('Este Comprobante no se Eliminara ya que generaria Error', 16,1)
else
delete from Serializacion   where Id_serializacion   =@id and Destino='OTROS'










GO
/****** Object:  StoredProcedure [dbo].[eliminar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[eliminar_usuario]
@idusuario int,
@login varchar(50)
as
if exists(select login from USUARIO2 where @login ='admin')
raiserror('El Usuario *Admin* es Inborrable, si se borraria Eliminarias el Acceso al Sistema de porvida, Accion Denegada', 16,1)
else
UPDATE  USUARIO2 SET Estado='ELIMINADO'
 WHERE idUsuario =@idusuario and Login &lt;&gt;'admin'












GO
/****** Object:  StoredProcedure [dbo].[eliminar_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminar_venta]
@idventa as integer
as
delete from ventas where idventa=@idventa








GO
/****** Object:  StoredProcedure [dbo].[eliminarControlCobro]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[eliminarControlCobro]
@idcontrol int 
as
delete from ControlCobros
where IdcontrolCobro=@idcontrol 
GO
/****** Object:  StoredProcedure [dbo].[imprimir_inventarios_todos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[imprimir_inventarios_todos]


AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 













GO
/****** Object:  StoredProcedure [dbo].[ingresar_nombre_a_venta_en_espera]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[ingresar_nombre_a_venta_en_espera]
@idventa int,
@nombre varchar(50)
as
update ventas set Comprobante =@nombre , Estado='EN ESPERA' where idventa = @idventa 





GO
/****** Object:  StoredProcedure [dbo].[Insertar_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_caja]

	
	@descripcion varchar(50),


	 @Tema varchar(50),
	  @Serial_PC varchar(50),
	   @Impresora_Ticket varchar(max),
	   @Impresora_A4 varchar(max),
	   @Tipo varchar(50)
	   
	  
    as
	BEGIN
if EXISTS (SELECT  Descripcion,Serial_PC      FROM Caja    where  Descripcion=@descripcion and Serial_PC =@Serial_PC   )
RAISERROR ('Ya Existe una Caja con ese Nombre ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³ puede ser que ya se haya creado una Caja para Esta Pc, Ingrese un nombre diferente e intente de Nuevo', 16,1)
else
BEGIN
declare @Estado as varchar(50)
set @Estado ='RECIEN CREADA'

    INSERT INTO Caja values 
	(@descripcion,@Tema ,@Serial_PC ,@Impresora_Ticket,@Impresora_A4,@Estado,@Tipo )

	end
	end










GO
/****** Object:  StoredProcedure [dbo].[insertar_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  procedure [dbo].[insertar_cliente]
@Nombre varchar(MAX),
           @Direccion_para_factura varchar(MAX),
            @RFC varchar(MAX),                      
            @movil varchar(50),               
            @Cliente varchar(50),
            @Proveedor varchar(50),
			@Estado as varchar(50)
		,@Saldo numeric(18,2)
as
		   BEGIN
if EXISTS (SELECT RFC  FROM clientes  where RFC  = @RFC and @RFC&lt;&gt;'0')
RAISERROR ('REGISTRO EXISTENTE', 16,1)
else
BEGIN
insert into clientes  values 
            (@Nombre
           ,@Direccion_para_factura
           ,@RFC
           ,@movil     
          
           ,@Cliente
           ,@Proveedor
		   ,@Estado,
		   @Saldo
            )
			end
			end









GO
/****** Object:  StoredProcedure [dbo].[insertar_clientes]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[insertar_clientes]
@Nombre As varchar(MAX),
@Direccion_para_factura As varchar(MAX),
@RFC As varchar(MAX),
@movil As varchar(max),
@Estado As varchar(50),
@Saldo As numeric(18,2)
As
if EXISTS(select Nombre  from clientes  where Nombre=@Nombre )
RAISERROR('Registro ya existente', 16,1)
else
INSERT INTO clientes
Values (
@Nombre,
@Direccion_para_factura ,
@RFC,
@movil,
@Estado,
@Saldo)




GO
/****** Object:  StoredProcedure [dbo].[insertar_Conceptos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_Conceptos]
@Descripcion As varchar(MAX)
As
if Exists(select Descripcion  from Conceptos where Descripcion =@Descripcion  )
Raiserror('Concepto ya registrado',16,1 )
else
INSERT INTO Conceptos
Values (
@Descripcion)





GO
/****** Object:  StoredProcedure [dbo].[insertar_ControlCobros]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_ControlCobros]
@Monto As numeric(18,2),
@Fecha As datetime,
@Detalle As varchar(MAX),
@idCliente As int,
@idUsusario As int,
@idCaja As int,
@Comprobante As varchar(MAX),
@efectivo numeric(18,2),
@tarjeta numeric(18,2)

As
INSERT INTO ControlCobros
Values (
@Monto,
@Fecha,
@Detalle,
@idCliente,
@idUsusario,
@idCaja,
@Comprobante,
@efectivo,
@tarjeta)
GO
/****** Object:  StoredProcedure [dbo].[insertar_DETALLE_cierre_de_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_DETALLE_cierre_de_caja]
	@fechaini datetime,
	 @fechafin datetime,
	 @fechacierre datetime, 
	  @ingresos numeric(18,2), 
    @egresos numeric(18,2),
	@saldo numeric(18,2),
	@idusuario int,
	 @totalcaluclado numeric(18,2),
	  @totalreal numeric(18,2), 
	 
	 @estado as varchar(50),
	 @diferencia as numeric(18,2)	,
	 @id_caja as int   
  AS BEGIN

if EXISTS (SELECT Estado FROM MOVIMIENTOCAJACIERRE 
 where  MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA')
RAISERROR ('Ya Fue Iniciado el Turno de esta Caja', 16,1)
else
BEGIN
    INSERT INTO MOVIMIENTOCAJACIERRE values 
	(@fechaini ,
	 @fechafin ,
	 @fechacierre , 
	  @ingresos , 
    @egresos ,
	@saldo ,
	@idusuario ,
	 @totalcaluclado ,
	  @totalreal , 
	
	 @estado ,
	 @diferencia ,
	 @id_caja )


	 end
	 end












GO
/****** Object:  StoredProcedure [dbo].[insertar_detalle_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_detalle_venta]

@idventa as integer,
@id_presentacionfraccionada as int,
@cantidad as numeric(18,2),
@preciounitario as numeric(18,2),
@moneda as varchar(50),

@unidades as varchar(50),
@cantidad_mostrada as numeric(18,2),
@Estado as varchar(50),
@Descripcion varchar(50),
@Codigo varchar(50),
@Stock varchar(50),
@Se_vende_a varchar(50),
@Usa_inventarios varchar(50),
@Costo numeric(18,2)
as
begin
if exists (select id_producto, idventa from detalle_venta
inner join Producto1 on Producto1.Id_Producto1=detalle_venta.id_producto
where Producto1.Id_Producto1=@id_presentacionfraccionada and idventa=@idventa)

update detalle_venta set
cantidad = cantidad+@cantidad,
cantidad_mostrada=cantidad_mostrada+@cantidad_mostrada
where id_producto=@id_presentacionfraccionada

else
begin
insert into detalle_venta

values(@idventa,@id_presentacionfraccionada,@cantidad,@preciounitario,@moneda,@unidades,@cantidad_mostrada,
@Estado,@Descripcion,@Codigo,@Stock,@Se_vende_a,@Usa_inventarios,@Costo)

end
end








GO
/****** Object:  StoredProcedure [dbo].[insertar_Empresa]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[insertar_Empresa]

@Nombre_Empresa  varchar(50),

@logo as image,
@Impuesto varchar(50),
@Porcentaje_impuesto numeric(18,0),
@Moneda varchar(50),

@Trabajas_con_impuestos VARCHAR(50),
@Modo_de_busqueda VARCHAR(50),
@Carpeta_para_copias_de_seguridad varchar(max),
@Correo_para_envio_de_reportes varchar(50),
@Ultima_fecha_de_copia_de_seguridad varchar(50),

@Ultima_fecha_de_copia_date datetime,
@Frecuencia_de_copias int,
@Estado varchar(50),
@Tipo_de_empresa varchar(50),
@Pais varchar(max),
@Redondeo_de_total varchar(50)
as 
 BEGIN
if EXISTS (SELECT Nombre_Empresa   FROM EMPRESA   where Nombre_Empresa  = @Nombre_Empresa   )
RAISERROR ('YA EXISTE UNA EMPRESA CON ESE NOMBRE, Ingrese un nombre diferente', 16,1)
else
BEGIN
insert into EMPRESA  
values (@Nombre_Empresa,@logo,@Impuesto,@Porcentaje_impuesto,@Moneda ,@Trabajas_con_impuestos,@Modo_de_busqueda,
@Carpeta_para_copias_de_seguridad,@Correo_para_envio_de_reportes,@Ultima_fecha_de_copia_de_seguridad,
@Ultima_fecha_de_copia_date ,
@Frecuencia_de_copias ,
@Estado ,@Tipo_de_empresa,@Pais,@Redondeo_de_total)

END
END










GO
/****** Object:  StoredProcedure [dbo].[Insertar_FORMATO_TICKET]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_FORMATO_TICKET]

  
	  @Identificador_fiscal varchar(max),
           @Direccion varchar(max),
         
           @Provincia_Departamento_Pais varchar(max),
           @Nombre_de_Moneda varchar(max),
           @Agradecimiento varchar(max),
           @pagina_Web_Facebook varchar(max),
           @Anuncio varchar(max),
	   @Datos_fiscales_de_autorizacion varchar(max),
	   @Por_defecto as varchar(max)
	  
    as
	 DECLARE @Id_Empresa int  = (Select Id_empresa from EMPRESA )
    INSERT INTO Ticket values 

	(  
	@Id_Empresa ,
	  @Identificador_fiscal ,
           @Direccion,
         
           @Provincia_Departamento_Pais,
           @Nombre_de_Moneda ,
           @Agradecimiento ,
           @pagina_Web_Facebook ,
           @Anuncio,
	   @Datos_fiscales_de_autorizacion,
	   @Por_defecto )











GO
/****** Object:  StoredProcedure [dbo].[insertar_Gastos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_Gastos_varios]
@Fecha As datetime,
@Nro_comprobante As varchar(5),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int,
@Id_concepto As int
As
INSERT INTO Gastos_varios
Values (
@Fecha,
@Nro_comprobante,
@Tipo_comprobante,
@Importe,
@Descripcion,
@Id_caja,
@Id_concepto)





GO
/****** Object:  StoredProcedure [dbo].[insertar_Grupo]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Grupo]
@Grupo varchar(50),
@Por_defecto varchar(50)
as
if EXISTS (SELECT Linea FROM Grupo_de_Productos  where Linea = @Grupo  )
RAISERROR ('YA EXISTE UN GRUPO CON ESTE NOMBRE, Ingrese de nuevo', 16,1)
else
insert into Grupo_de_Productos  values (@Grupo, @Por_defecto)











GO
/****** Object:  StoredProcedure [dbo].[insertar_Ingresos_varios]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[insertar_Ingresos_varios]
@Fecha As datetime,
@Nro_comprobante As varchar(MAX),
@Tipo_comprobante As varchar(MAX),
@Importe As numeric(18,2),
@Descripcion As varchar(MAX),
@Id_caja As int
As
INSERT INTO Ingresos_varios
Values (
@Fecha,
@Nro_comprobante,
@Tipo_comprobante,
@Importe,
@Descripcion,
@Id_caja)





GO
/****** Object:  StoredProcedure [dbo].[insertar_inicio_De_sesion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_inicio_De_sesion]

 
 @Id_serial_Pc varchar(max)

  as
  declare @id_usuario_nuevo as int
  set @id_usuario_nuevo = (SELECT idUsuario  FROM USUARIO2  )

insert into Inicios_de_sesion_por_caja

values (@Id_serial_Pc,@id_usuario_nuevo )









GO
/****** Object:  StoredProcedure [dbo].[insertar_KARDEX_SALIDA]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[insertar_KARDEX_SALIDA]
           @Fecha datetime,
		   @Motivo varchar(max),
		   @Cantidad as numeric(18,2),
		   @Id_producto int	,
	       @Id_usuario as int,
		   @Tipo as varchar(50),
		    @Estado varchar(50),
			@Id_caja int
			as
			declare @Hay as numeric(18,2)
			declare @Habia as numeric(18,2)
			declare @Costo_unt numeric(18,2)
			set @Hay = (select Stock  from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Costo_unt=(select Precio_de_compra   from Producto1 where Id_Producto1 =@Id_producto and Usa_inventarios ='SI')
			set @Habia = @Hay+@Cantidad 

			insert into KARDEX 
			Values(
			 @Fecha ,
		     @Motivo ,			         
             @Cantidad 	,
	         @Id_producto 	,
	         @Id_usuario ,	
	         @Tipo,
		     @Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)

	





GO
/****** Object:  StoredProcedure [dbo].[Insertar_marcan]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[Insertar_marcan]

	
	@s varchar(MAX),
	@f varchar(MAX),
	@e varchar(MAX),
	@fa varchar(MAX)
    as
	
    INSERT INTO Marcan values 
	(@s,@f,@e ,@fa)










GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
          @Id_grupo as int	,
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where Descripcion = @Descripcion and Codigo=@Codigo  )
RAISERROR ('YA EXISTE UN PRODUCTO  CON ESTE NOMBRE/CODIGO, POR FAVOR INGRESE DE NUEVO/ SE GENERARA CODIGO AUTOMATICO', 16,1)
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'
		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
END
END










GO
/****** Object:  StoredProcedure [dbo].[insertar_Producto_Importacion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[insertar_Producto_Importacion]   
           --Empezamos a declara primero los parametros para Productos
           @Descripcion varchar(50),
		    @Imagen varchar(50),			         
         
     
		  @Usa_inventarios varchar(50),
		   @Stock varchar(50),
           @Precio_de_compra numeric(18,2),
           @Fecha_de_vencimiento varchar(50),
           @Precio_de_venta numeric(18,2),
           @Codigo varchar(50),
           @Se_vende_a varchar(50),
           @Impuesto varchar(50),
           @Stock_minimo numeric(18,2),
           @Precio_mayoreo numeric(18,2)
	,@A_partir_de numeric(18,2),
	--Ahora declaramos los parametros para el Ingreso a Kardex que es donde se controla el Inventario
	@Fecha datetime,
		    @Motivo varchar(200),			               
          @Cantidad as numeric(18,0)	,
	 
	   @Id_usuario as int,	
	   @Tipo as varchar(50),
	   @Estado varchar(50)	,   	   		
		@Id_caja int
		   AS 
		    declare    @Id_grupo as int	
			set @Id_grupo= (Select Idline  from Grupo_de_Productos where Grupo_de_Productos.Linea= 'General')
		   --Ahora VALIDAMOS para que no se agregen productos con el mismo nombre y codigo de barras
		   BEGIN
		
if EXISTS (SELECT Descripcion,Codigo  FROM Producto1  where (Descripcion = @Descripcion and Codigo=@Codigo) or Descripcion ='' )
select top 0 *from Producto1
else
BEGIN
DECLARE  @Id_producto  INT
		   INSERT INTO Producto1
     VALUES
		    (
           @Descripcion        
           ,@Imagen         
		    ,@Id_grupo 
		,@Usa_inventarios	,
		@Stock ,
           @Precio_de_compra ,
           @Fecha_de_vencimiento ,
           @Precio_de_venta ,
           @Codigo ,
           @Se_vende_a ,
           @Impuesto ,
           @Stock_minimo ,
           @Precio_mayoreo,
		   @A_partir_de
		 )
		 --Ahora Obtenemos el Id del producto que se acaba de ingresar
		    SELECT  @id_producto = scope_identity()
			 --Ahora Obtenemos los datos del producto ingresado para que sean insertados en la Tabla KARDEX
			  DECLARE @Hay AS numeric(18,2)
		 DECLARE @Habia as numeric(18,2)
		 declare @Costo_unt numeric(18,2)
		
       SET @Hay = (SELECT Stock  FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
       SET @Costo_unt = (SELECT Producto1.Precio_de_compra   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )		   
       SET @Habia = 0
	   --Ahora vamos a saber si el Producto usa Inventarios o no
		  set @Usa_inventarios = (SELECT Usa_inventarios   FROM Producto1 WHERE Producto1.Id_Producto1   =@Id_producto and Producto1.Usa_inventarios ='SI' )
		 --Ahora en caso si Use inventarios Entonces Pasamos a Insertar datos en la Tabla Kardex
		   if @Usa_inventarios ='SI'

		   

		   BEGIN	 
		   INSERT INTO KARDEX
        VALUES
		    (
        @Fecha ,
		    @Motivo ,			                  
          @Cantidad 	,

	  @Id_producto 	,
	   @Id_usuario ,	
	   @Tipo,		
		@Estado ,@Costo_unt, @Habia ,@Hay ,@Id_caja)
		END
		
		begin
		update Producto1 set Codigo=Id_Producto1 
		where Codigo = 'VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='VACIO@'
		end

		begin
		delete from Producto1 where Descripcion ='Descripcion'
		end

END
END












GO
/****** Object:  StoredProcedure [dbo].[insertar_Serializacion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[insertar_Serializacion]

@Serie varchar (50),
@numeroinicio as varchar (50),
@numerofin as varchar (50),
@Destino as varchar(50),
@tipodoc varchar(50)
,@Por_defecto varchar(50)
as BEGIN
if EXISTS (SELECT tipodoc  FROM Serializacion  where  tipodoc= @tipodoc )
RAISERROR ('YA EXISTE ESTE COMPROBANTE INGRESE UNO NUEVO', 16,1)
else
BEGIN
insert into Serializacion  values (@Serie ,
@numeroinicio ,
@numerofin,@Destino ,@tipodoc ,@Por_defecto)

END
END










GO
/****** Object:  StoredProcedure [dbo].[insertar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[insertar_usuario]
@nombres varchar(50) ,
@Login varchar(50),
@Password VARCHAR(50),
@Icono image,
@Nombre_de_icono varchar(max),
@Correo varchar(max),
@Rol varchar(max),
@Estado varchar(50)
as
if exists (select Login FROM USUARIO2 where Login=@Login and Estado='ACTIVO')
raiserror('YA EXISTE UN USUARIO CON ESE LOGIN O CON ESE ICONO, POR FAVOR INGRESE DE NUEVO',16,1 )
ELSE

insert into USUARIO2 
values(@nombres,@Login,@Password,@Icono,@Nombre_de_icono,@Correo,@Rol,@Estado  )











GO
/****** Object:  StoredProcedure [dbo].[insertar_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertar_venta]
@idcliente as integer,
@fecha_venta as datetime,

@nume_documento as varchar(50),
@montototal  as numeric(18,2),
@Tipo_de_pago as varchar(50),
@estado as varchar(50),
@IGV as numeric(18, 1),

@Comprobante as VARCHAR(50),
@id_usuario as int,
@Fecha_de_pago as varchar(50),
@ACCION VARCHAR(50),
@Saldo numeric(18,2),
@Pago_con numeric(18,2),
@Porcentaje_IGV numeric(18,2),
@Id_caja int,
@Referencia_tarjeta varchar(50)

as 
declare @vuelto numeric(18,2)
declare @Efectivo numeric(18,2)
declare @id_numero varchar(50)
declare @Credito numeric(18,2)
declare @Tarjeta numeric(18,2)
SET @vuelto =0
SET @Efectivo =0
SET @id_numero= (select max(idventa)+1 from ventas )
SET @Credito =0
SET @Tarjeta =0
insert into ventas 
values (@idcliente,@fecha_venta,@nume_documento ,@montototal ,@Tipo_de_pago,@estado ,@IGV 
,@Comprobante +' '+ @id_numero ,@id_usuario,@Fecha_de_pago,@ACCION ,@Saldo,@Pago_con,@Porcentaje_IGV,
@Id_caja,@Referencia_tarjeta,
@vuelto ,@Efectivo,@Credito,@Tarjeta )








GO
/****** Object:  StoredProcedure [dbo].[insertarCorreoBase]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[insertarCorreoBase]
@Correo varchar(max),
@Password varchar(max),
@Estado_De_envio varchar(50)
as
Insert into CorreoBase values(@Correo,@Password,@Estado_De_envio)


GO
/****** Object:  StoredProcedure [dbo].[MarcanVencidas]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[MarcanVencidas]
@E varchar(max)
as
update Marcan set E=@E
GO
/****** Object:  StoredProcedure [dbo].[mostrar_Caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[mostrar_Caja]
As
Select * FROM Caja

GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_principal]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[Mostrar_caja_principal]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='PRINCIPAL' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos  ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario 
where Caja.tipo='PRINCIPAL' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos

else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='PRINCIPAL' and USUARIO2.Login  ='admin'








GO
/****** Object:  StoredProcedure [dbo].[Mostrar_caja_remota]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[Mostrar_caja_remota]
as
if Exists(Select MOVIMIENTOCAJACIERRE.Id_caja   from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja where Caja.tipo='REMOTA' )

Select Caja.*, USUARIO2.Nombres_y_Apellidos  ,MAX(MOVIMIENTOCAJACIERRE.idcierrecaja )    
from MOVIMIENTOCAJACIERRE inner join 
Caja on caja.Id_Caja=MOVIMIENTOCAJACIERRE.Id_caja 
inner join USUARIO2 on USUARIO2.idUsuario= MOVIMIENTOCAJACIERRE.Id_usuario
where Caja.tipo='REMOTA' 
GROUP BY Caja.Serial_PC, Caja.Id_Caja,Caja.Descripcion,Caja.Tema,Caja.Impresora_A4,Caja.Impresora_Ticket 
,Caja.Estado,CAJA.Tipo  , USUARIO2.Nombres_y_Apellidos

else

Select Caja.*, USUARIO2.Nombres_y_Apellidos  from Caja
cross join USUARIO2 
 where tipo='REMOTA' and USUARIO2.Login  ='admin'








GO
/****** Object:  StoredProcedure [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc  [dbo].[mostrar_cajas_por_Serial_de_DiscoDuro]
@Serial as varchar(max)
as
select Id_Caja  ,Descripcion 
from Caja 
where Serial_PC =@Serial





GO
/****** Object:  StoredProcedure [dbo].[mostrar_cierre_de_caja_pendiente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_cierre_de_caja_pendiente]
@idcaja int
as
select Id_caja,fechainicio,Saldo_queda_en_caja as SaldoInicial from MOVIMIENTOCAJACIERRE 
where Id_caja=@idcaja and Estado='CAJA APERTURADA'






GO
/****** Object:  StoredProcedure [dbo].[mostrar_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[mostrar_cliente]
as
SELECT       top 10 idclientev, Nombre, Direccion_para_factura as Direccion, RFC,  movil as Celular, Cliente, Proveedor, 
                    Saldo ,     Estado
FROM            dbo.clientes 
WHERE clientes.Cliente='SI' order by Nombre  asc 








GO
/****** Object:  StoredProcedure [dbo].[mostrar_clientes]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_clientes]
As
SELECT        idclientev , Nombre,Direccion_para_factura , RFC as [RFC] , movil, Estado, Saldo
FROM            dbo.clientes where Nombre&lt;&gt;'GENERICO'



GO
/****** Object:  StoredProcedure [dbo].[mostrar_ControlCobros]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROC [dbo].[mostrar_ControlCobros]
As
Select * FROM ControlCobros


GO
/****** Object:  StoredProcedure [dbo].[mostrar_descripcion_produco_sin_repetir]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_descripcion_produco_sin_repetir]

@buscar varchar(50)
as begin
select TOP 10 Descripcion  from Producto1  Where Descripcion  LIKE  '%' + @buscar +'%'
end










GO
/****** Object:  StoredProcedure [dbo].[mostrar_Empresa]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_Empresa]
as
select LOGO, Nombre_Empresa as Empresa ,(Impuesto + ' ('+  CONVERT(VARCHAR(50),Porcentaje_impuesto) + ')') Impuesto 
,Moneda  ,Id_empresa  
,Porcentaje_impuesto  ,Impuesto ,Modo_de_busqueda ,Trabajas_con_impuestos ,Trabajas_con_impuestos,
Correo_para_envio_de_reportes,
Carpeta_para_copias_de_seguridad, Redondeo_de_total  , Pais 
from Empresa








GO
/****** Object:  StoredProcedure [dbo].[Mostrar_formato_ticket]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[Mostrar_formato_ticket]
as
select EMPRESA.Logo,Empresa.Nombre_Empresa ,Ticket.*  from Ticket 
INNER JOIN EMPRESA ON EMPRESA.Id_empresa=Ticket.Id_Empresa 









GO
/****** Object:  StoredProcedure [dbo].[mostrar_gastos_por_turnos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  proc [dbo].[mostrar_gastos_por_turnos]
@idcaja int,
@fi as datetime,
@ff as datetime
as
SELECT        dbo.Gastos_varios.Id_gasto, dbo.Gastos_varios.Fecha, dbo.Conceptos.Descripcion Concepto,
dbo.Gastos_varios.Descripcion , dbo.Gastos_varios.Importe
FROM            dbo.Conceptos INNER JOIN
                         dbo.Gastos_varios ON dbo.Conceptos.Id_concepto = dbo.Gastos_varios.Id_concepto
						 where Gastos_varios.Id_caja = @idcaja and (Fecha &gt;=@fi and Fecha &lt;=@ff)









GO
/****** Object:  StoredProcedure [dbo].[mostrar_grupos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_grupos]

@buscar varchar(50)
as begin
select Idline,Linea  as Grupo from Grupo_de_Productos  Where Linea  LIKE  '%' + @buscar +'%'
end










GO
/****** Object:  StoredProcedure [dbo].[mostrar_id_venta_po_Id_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_id_venta_po_Id_caja]
@Id_caja int
as
select MAX(idventa)from ventas
where id_caja=@Id_caja








GO
/****** Object:  StoredProcedure [dbo].[mostrar_impresoras_por_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_impresoras_por_caja]
@Serial as varchar(max)
as
select Impresora_Ticket 
from Caja 
where Serial_PC =@Serial








GO
/****** Object:  StoredProcedure [dbo].[mostrar_ingresos_por_turnos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_ingresos_por_turnos]
@idcaja int,
@fi as datetime,
@ff as datetime
as
SELECT        Id_ingreso , Fecha,
Descripcion ,Importe
FROM   Ingresos_varios          

where Id_caja = @idcaja and (Fecha &gt;=@fi and Fecha &lt;=@ff)





GO
/****** Object:  StoredProcedure [dbo].[mostrar_inicio_De_sesion]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_inicio_De_sesion]
 
  @id_serial_pc as varchar(max)
  as
select  Inicios_de_sesion_por_caja.Id_usuario ,USUARIO2.Nombres_y_Apellidos  
from Inicios_de_sesion_por_caja inner join 
USUARIO2 on USUARIO2.idUsuario=Inicios_de_sesion_por_caja.Id_usuario 

where Id_serial_Pc =@id_serial_pc 


GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_Inventarios_bajo_minimo]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[MOSTRAR_Inventarios_bajo_minimo]
AS
select  Codigo,Descripcion,Precio_de_compra AS [Precio_de_Compra],Grupo_de_Productos. linea as Categoria,
 Stock ,Stock_minimo as [Stock_Minimo],Grupo_de_Productos. linea,EMPRESA.Nombre_Empresa,EMPRESA.Logo  
 from Producto1 cross join EMPRESA
				inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
				where Stock &lt;= Stock_minimo 	and Usa_inventarios ='SI'










GO
/****** Object:  StoredProcedure [dbo].[mostrar_inventarios_todos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[mostrar_inventarios_todos]

@letra varchar(50)
AS 
SELECT    Codigo ,Descripcion,Precio_de_compra as Costo,Precio_de_venta as [Precio_Venta], Stock, Stock_minimo as [Stock_Minimo]
,Grupo_de_Productos.Linea  AS Categoria ,Precio_de_compra*Stock as Importe,EMPRESA.Nombre_Empresa,EMPRESA.Logo 
FROM         
						 dbo.Producto1 
						  cross join EMPRESA
						   inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
where Descripcion+Codigo   LIKE  '%' + @letra+'%' AND Producto1.Usa_inventarios ='SI'










GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL]

@serial varchar(max)

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos     FROM MOVIMIENTOCAJACIERRE 
inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' 





GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_CAJA_POR_SERIAL_y_usuario]

@serial varchar(50),
@idusuario int

AS
SELECT USUARIO2.Login,USUARIO2.Nombres_y_Apellidos    FROM MOVIMIENTOCAJACIERRE inner join USUARIO2 on USUARIO2.idUsuario=MOVIMIENTOCAJACIERRE.Id_usuario
 inner join Caja on Caja.Id_Caja =MOVIMIENTOCAJACIERRE.Id_caja 
 where Caja.Serial_PC = @serial    AND MOVIMIENTOCAJACIERRE.Estado='CAJA APERTURADA' and MOVIMIENTOCAJACIERRE.Id_usuario =@idusuario and USUARIO2.Estado ='ACTIVO'












GO
/****** Object:  StoredProcedure [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[MOSTRAR_MOVIMIENTOS_DE_KARDEX]

@idProducto int
AS
SELECT       KARDEX.Fecha ,Producto1.Descripcion ,KARDEX.Motivo as Movimiento, KARDEX.Cantidad ,KARDEX.Tipo ,KARDEX.Cantidad ,KARDEX.Hay  as Hay ,USUARIO2.Nombres_y_Apellidos as Cajero ,Grupo_de_Productos .linea as Categoria, KARDEX.Costo_unt , KARDEX.Total 
,Grupo_de_Productos .linea ,EMPRESA.Nombre_Empresa,EMPRESA.Logo ,Producto1.Stock,convert(numeric(18,2), Producto1.Stock * KARDEX.Costo_unt) as TotalInventario
FROM            dbo.KARDEX INNER JOIN Producto1 on Producto1.Id_Producto1=KARDEX.Id_producto inner join USUARIO2 on USUARIO2.idUsuario =KARDEX.Id_usuario 
             cross join EMPRESA
			 inner join Grupo_de_Productos on Grupo_de_Productos.Idline=Producto1.Id_grupo 
			where    Producto1.Id_Producto1=@idProducto
			
			 order by KARDEX.Id_kardex  Desc 













GO
/****** Object:  StoredProcedure [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_permisos_por_usuario_ROL_UNICO]
@idusuario int
as 
select 
USUARIO2.Rol 
from USUARIO2 
where USUARIO2.idUsuario =@idusuario and USUARIO2.Estado ='ACTIVO'





GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_agregados_a_venta]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_agregados_a_venta]
@idventa as int
as
select detalle_venta.Codigo,(detalle_venta.Descripcion) as Producto,
detalle_venta.Cantidad_mostrada as cant,
detalle_venta.preciounitario as P_Unit,
CONVERT(numeric(18,2), detalle_venta.Total_a_pagar) as Importe,
detalle_venta.Id_producto, detalle_venta.iddetalle_venta, ventas.Estado,
detalle_venta.Stock, detalle_venta.cantidad, ventas.idclientev,
detalle_venta.Stock, detalle_venta.Stock, Usa_inventarios,
Se_vende_a, detalle_venta.idventa
from detalle_venta inner join ventas on detalle_venta.idventa = ventas.idventa
where detalle_venta.idventa=@idventa and detalle_venta.cantidad &gt;0 order by
detalle_venta.iddetalle_venta desc








GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_agregados_a_ventas_en_espera]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_agregados_a_ventas_en_espera]
@idventa int
as
SELECT dbo.detalle_venta.Descripcion as Producto, dbo.detalle_venta.Cantidad_mostrada as Cant, dbo.detalle_venta.preciounitario as [P Unit], dbo.detalle_venta.Total_a_pagar as Importe
FROM  dbo.ventas INNER JOIN
         dbo.detalle_venta ON dbo.ventas.idventa = dbo.detalle_venta.idventa
		 where detalle_venta.idventa=@idventa and detalle_venta.cantidad&gt;0





GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_productos_vencidos]
as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ()))as [Dias Vencidos] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &lt;= CONVERT(DATE,GETDATE ()) 













GO
/****** Object:  StoredProcedure [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create  proc [dbo].[mostrar_productos_vencidos_en_menos_de_30_dias]

as

select Id_Producto1,Codigo ,Descripcion 

,Fecha_de_vencimiento as F_vencimiento ,Stock
,(datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1)as [Dias a Vencer] from Producto1 

where   Fecha_de_vencimiento &lt;&gt;'NO APLICA' AND Fecha_de_vencimiento &gt; CONVERT(DATE,GETDATE ()) and (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) &lt;=30
order by (datediff(day,Fecha_de_vencimiento,CONVERT(DATE,GETDATE ())))*(-1) asc










GO
/****** Object:  StoredProcedure [dbo].[mostrar_stock_de_detalle_de_ventas]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_stock_de_detalle_de_ventas]
@Id_producto int
as
select detalle_venta.Stock,detalle_venta.Descripcion from ventas 
inner join detalle_venta on detalle_venta.idventa=ventas.idventa
where ventas.Estado ='EN ESPERA' and detalle_venta.Id_producto=@Id_producto and detalle_venta.Usa_inventarios='SI'








GO
/****** Object:  StoredProcedure [dbo].[mostrar_ticket_impreso]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_ticket_impreso]
@Id_venta int,
@total_en_letras varchar(50)
as
declare @cantidad_de_productos int
set @cantidad_de_productos = (select SUM (cantidad ) from detalle_venta inner join ventas on ventas.idventa = detalle_venta.idventa 
where detalle_venta .idventa = @Id_venta  )

select detalle_venta.Descripcion as Producto , detalle_venta.Cantidad_mostrada as Cant,
detalle_venta.preciounitario as P_Unit , detalle_venta.Total_a_pagar as Importe,
EMPRESA.Nombre_Empresa as Empresa, EMPRESA.Logo, Ticket.*,ventas.fecha_venta as fecha,
(EMPRESA.Impuesto + '(' + convert(varchar(50),ventas.Porcentaje_IGV ) + '%):') as Impuesto
 ,((ventas.Monto_total*ventas.Porcentaje_IGV)/100) as Subtotal_Impuesto,ventas.Monto_total ,
 USUARIO2.Nombres_y_Apellidos as Usuario, ventas.Pago_con , ventas.Vuelto ,EMPRESA .Moneda  ,
 clientes.Nombre ,ventas.Tipo_de_pago , @cantidad_de_productos as Cantidad_de_productos,@total_en_letras
 as total_en_letras, ventas.Comprobante , ventas.Numero_de_doc
 from detalle_venta inner join ventas  on ventas.idventa = detalle_venta.idventa 
inner join USUARIO2 on USUARIO2.idUsuario = ventas.Id_usuario 
inner join clientes on clientes .idclientev= ventas.idclientev
cross join EMPRESA 
cross join Ticket

where detalle_venta.idventa= @Id_venta and ventas.Monto_total &gt;0 order by detalle_venta.iddetalle_venta desc  










GO
/****** Object:  StoredProcedure [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create proc [dbo].[mostrar_Tipo_de_documentos_para_insertar_estos_mismos]
as

SELECT       dbo.Serializacion.Serie ,dbo.Serializacion.Cantidad_de_numeros , dbo.Serializacion.numerofin ,dbo.Serializacion.Id_serializacion ,(dbo.Serializacion.Serie  +' - '+ dbo.Serializacion.Cantidad_de_numeros + dbo.Serializacion.numerofin) as serie_completa,Serializacion.tipodoc  AS COMPROBANTE
,Por_defecto 
FROM            dbo.Serializacion where destino='VENTAS' OR destino='OTROS'








GO
/****** Object:  StoredProcedure [dbo].[mostrar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE proc [dbo].[mostrar_usuario]
as
select  idUsuario,Nombres_y_Apellidos AS Nombres,Login,Password
,Icono ,Nombre_de_icono ,Correo ,rol  FROM USUARIO2 Where Estado='ACTIVO'












GO
/****** Object:  StoredProcedure [dbo].[mostrar_ventas_en_espera_con_fecha_y_monto]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrar_ventas_en_espera_con_fecha_y_monto]
as
select idventa,Comprobante,fecha_venta,Id_caja  from ventas 
where Estado='EN ESPERA'





GO
/****** Object:  StoredProcedure [dbo].[mostrarEstadosCuentaCliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[mostrarEstadosCuentaCliente]
@idcliente int
as
SELECT dbo.detalle_venta.Descripcion, dbo.detalle_venta.Cantidad_mostrada, dbo.detalle_venta.preciounitario, dbo.ventas.Credito, dbo.ventas.Estado
FROM  dbo.detalle_venta INNER JOIN
         dbo.ventas ON dbo.detalle_venta.idventa = dbo.ventas.idventa
		 
		 where ventas.idclientev=@idcliente and ventas.Credito &gt;0  
GO
/****** Object:  StoredProcedure [dbo].[restaurar_caja]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[restaurar_caja]
@idcaja integer
as
update Caja set
Estado  ='Caja Restaurada'
where Id_Caja    =@idcaja








GO
/****** Object:  StoredProcedure [dbo].[restaurar_cliente]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[restaurar_cliente]
@idcliente integer
as
update  clientes set  Estado ='ACTIVO'
where idclientev=@idcliente AND Estado='ELIMINADO' 








GO
/****** Object:  StoredProcedure [dbo].[validar_usuario]    Script Date: 04/12/2023 13:25:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create proc [dbo].[validar_usuario]

@password varchar(50),
@login varchar(50)
as
select * from USUARIO2
where  Password   = @password and Login=@Login and Estado ='ACTIVO'











GO
USE [master]
GO
ALTER DATABASE [BASE_PUNTO_VENTA] SET  READ_WRITE 
GO</value>
  </data>
  <data name="txtCrearUsuarioDb.Text" xml:space="preserve">
    <value>CREATE LOGIN ada369 WITH PASSWORD = 'softwarereal'
GO
Use BASE_PUNTO_VENTA ;
GO
IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = N'ada369')
BEGIN
    CREATE USER [VEGA389] FOR LOGIN [VEGA389]
    EXEC sp_addrolemember N'db_owner', N'ada369'
    EXEC master..sp_addsrvrolemember @loginame = N'ada369', @rolename = N'sysadmin'
END;
GO
</value>
  </data>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="timer3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>104, 17</value>
  </metadata>
  <metadata name="timer4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>191, 17</value>
  </metadata>
  <metadata name="timer5.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>278, 17</value>
  </metadata>
  <metadata name="timerCRARINI.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>365, 17</value>
  </metadata>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gg==
</value>
  </data>
</root>